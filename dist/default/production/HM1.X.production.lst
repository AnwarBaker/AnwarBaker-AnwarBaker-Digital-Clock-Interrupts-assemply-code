

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Oct 24 16:36:59 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           ; Version 1.45
    69                           ; Generated 16/11/2017 GMT
    70                           ; 
    71                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4620 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     
   103                           	psect	idataCOMRAM
   104  0027A8                     __pidataCOMRAM:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _LCD_INIT_STRING
   108  0027A8  28                 	db	40
   109  0027A9  0C                 	db	12
   110  0027AA  01                 	db	1
   111  0027AB  06                 	db	6
   112                           
   113                           	psect	mediumconst
   114  00FEA2                     __pmediumconst:
   115                           	opt stack 0
   116  00FEA2  00                 	db	0
   117  00FEA3                     _dpowers:
   118                           	opt stack 0
   119  00FEA3  0001               	dw	1
   120  00FEA5  0000               	dw	0
   121  00FEA7  000A               	dw	10
   122  00FEA9  0000               	dw	0
   123  00FEAB  0064               	dw	100
   124  00FEAD  0000               	dw	0
   125  00FEAF  03E8               	dw	1000
   126  00FEB1  0000               	dw	0
   127  00FEB3  2710               	dw	10000
   128  00FEB5  0000               	dw	0
   129  00FEB7  86A0               	dw	34464
   130  00FEB9  0001               	dw	1
   131  00FEBB  4240               	dw	16960
   132  00FEBD  000F               	dw	15
   133  00FEBF  9680               	dw	38528
   134  00FEC1  0098               	dw	152
   135  00FEC3  E100               	dw	57600
   136  00FEC5  05F5               	dw	1525
   137  00FEC7  CA00               	dw	51712
   138  00FEC9  3B9A               	dw	15258
   139  00FECB                     __end_of_dpowers:
   140                           	opt stack 0
   141  00FECB                     __powers_:
   142                           	opt stack 0
   143  00FECB  00                 	db	0
   144  00FECC  80                 	db	128
   145  00FECD  3F                 	db	63
   146  00FECE  00                 	db	0
   147  00FECF  20                 	db	32
   148  00FED0  41                 	db	65
   149  00FED1  00                 	db	0
   150  00FED2  C8                 	db	200
   151  00FED3  42                 	db	66
   152  00FED4  00                 	db	0
   153  00FED5  7A                 	db	122
   154  00FED6  44                 	db	68
   155  00FED7  40                 	db	64
   156  00FED8  1C                 	db	28
   157  00FED9  46                 	db	70
   158  00FEDA  50                 	db	80
   159  00FEDB  C3                 	db	195
   160  00FEDC  47                 	db	71
   161  00FEDD  24                 	db	36
   162  00FEDE  74                 	db	116
   163  00FEDF  49                 	db	73
   164  00FEE0  97                 	db	151
   165  00FEE1  18                 	db	24
   166  00FEE2  4B                 	db	75
   167  00FEE3  BC                 	db	188
   168  00FEE4  BE                 	db	190
   169  00FEE5  4C                 	db	76
   170  00FEE6  6B                 	db	107
   171  00FEE7  6E                 	db	110
   172  00FEE8  4E                 	db	78
   173  00FEE9  03                 	db	3
   174  00FEEA  15                 	db	21
   175  00FEEB  50                 	db	80
   176  00FEEC  79                 	db	121
   177  00FEED  AD                 	db	173
   178  00FEEE  60                 	db	96
   179  00FEEF  F3                 	db	243
   180  00FEF0  49                 	db	73
   181  00FEF1  71                 	db	113
   182  00FEF2                     __end_of__powers_:
   183                           	opt stack 0
   184  00FEF2                     __npowers_:
   185                           	opt stack 0
   186  00FEF2  00                 	db	0
   187  00FEF3  80                 	db	128
   188  00FEF4  3F                 	db	63
   189  00FEF5  CD                 	db	205
   190  00FEF6  CC                 	db	204
   191  00FEF7  3D                 	db	61
   192  00FEF8  D7                 	db	215
   193  00FEF9  23                 	db	35
   194  00FEFA  3C                 	db	60
   195  00FEFB  12                 	db	18
   196  00FEFC  83                 	db	131
   197  00FEFD  3A                 	db	58
   198  00FEFE  B7                 	db	183
   199  00FEFF  D1                 	db	209
   200  00FF00  38                 	db	56
   201  00FF01  C6                 	db	198
   202  00FF02  27                 	db	39
   203  00FF03  37                 	db	55
   204  00FF04  38                 	db	56
   205  00FF05  86                 	db	134
   206  00FF06  35                 	db	53
   207  00FF07  C0                 	db	192
   208  00FF08  D6                 	db	214
   209  00FF09  33                 	db	51
   210  00FF0A  CC                 	db	204
   211  00FF0B  2B                 	db	43
   212  00FF0C  32                 	db	50
   213  00FF0D  70                 	db	112
   214  00FF0E  89                 	db	137
   215  00FF0F  30                 	db	48
   216  00FF10  E7                 	db	231
   217  00FF11  DB                 	db	219
   218  00FF12  2E                 	db	46
   219  00FF13  E5                 	db	229
   220  00FF14  3C                 	db	60
   221  00FF15  1E                 	db	30
   222  00FF16  42                 	db	66
   223  00FF17  A2                 	db	162
   224  00FF18  0D                 	db	13
   225  00FF19                     __end_of__npowers_:
   226                           	opt stack 0
   227  0000                     _TMR0	set	4054
   228  0000                     _ADRESL	set	4035
   229  0000                     _ADRESH	set	4036
   230  0000                     _ADCON2	set	4032
   231  0000                     _ADCON0bits	set	4034
   232  0000                     _ADCON0	set	4034
   233  0000                     _PORTEbits	set	3972
   234  0000                     _TXREG	set	4013
   235  0000                     _PIR1bits	set	3998
   236  0000                     _RCREG	set	4014
   237  0000                     _RCSTAbits	set	4011
   238  0000                     _RCSTA	set	4011
   239  0000                     _TXSTAbits	set	4012
   240  0000                     _SPBRGH	set	4016
   241  0000                     _SPBRG	set	4015
   242  0000                     _TXSTA	set	4012
   243  0000                     _BAUDCONbits	set	4024
   244  0000                     _LATE	set	3981
   245  0000                     _LATD	set	3980
   246  0000                     _LATC	set	3979
   247  0000                     _TRISE	set	3990
   248  0000                     _TRISD	set	3989
   249  0000                     _TRISA	set	3986
   250  0000                     _TRISC	set	3988
   251  0000                     _TRISB	set	3987
   252  0000                     _ADCON1	set	4033
   253  0000                     _T0CON	set	4053
   254  0000                     _RB3	set	31755
   255  0000                     _RB5	set	31757
   256  0000                     _RC2	set	31762
   257  0000                     _RC5	set	31765
   258  0000                     _RB4	set	31756
   259  0000                     _PEIE	set	32662
   260  0000                     _GIE	set	32663
   261  0000                     _TMR0IE	set	32661
   262  0000                     _INT0IF	set	32657
   263  0000                     _INT2IF	set	32641
   264  0000                     _INT1IF	set	32640
   265  0000                     _TMR0IF	set	32658
   266  00FF19                     STR_8:
   267  00FF19  0A                 	db	10
   268  00FF1A  54                 	db	84	;'T'
   269  00FF1B  69                 	db	105	;'i'
   270  00FF1C  6D                 	db	109	;'m'
   271  00FF1D  65                 	db	101	;'e'
   272  00FF1E  20                 	db	32
   273  00FF1F  53                 	db	83	;'S'
   274  00FF20  65                 	db	101	;'e'
   275  00FF21  74                 	db	116	;'t'
   276  00FF22  3A                 	db	58	;':'
   277  00FF23  20                 	db	32
   278  00FF24  25                 	db	37
   279  00FF25  30                 	db	48	;'0'
   280  00FF26  32                 	db	50	;'2'
   281  00FF27  75                 	db	117	;'u'
   282  00FF28  3A                 	db	58	;':'
   283  00FF29  25                 	db	37
   284  00FF2A  30                 	db	48	;'0'
   285  00FF2B  32                 	db	50	;'2'
   286  00FF2C  75                 	db	117	;'u'
   287  00FF2D  3A                 	db	58	;':'
   288  00FF2E  25                 	db	37
   289  00FF2F  30                 	db	48	;'0'
   290  00FF30  32                 	db	50	;'2'
   291  00FF31  75                 	db	117	;'u'
   292  00FF32  00                 	db	0
   293  00FF33                     STR_9:
   294  00FF33  0A                 	db	10
   295  00FF34  49                 	db	73	;'I'
   296  00FF35  6E                 	db	110	;'n'
   297  00FF36  76                 	db	118	;'v'
   298  00FF37  61                 	db	97	;'a'
   299  00FF38  6C                 	db	108	;'l'
   300  00FF39  69                 	db	105	;'i'
   301  00FF3A  64                 	db	100	;'d'
   302  00FF3B  20                 	db	32
   303  00FF3C  74                 	db	116	;'t'
   304  00FF3D  69                 	db	105	;'i'
   305  00FF3E  6D                 	db	109	;'m'
   306  00FF3F  65                 	db	101	;'e'
   307  00FF40  20                 	db	32
   308  00FF41  65                 	db	101	;'e'
   309  00FF42  6E                 	db	110	;'n'
   310  00FF43  74                 	db	116	;'t'
   311  00FF44  65                 	db	101	;'e'
   312  00FF45  72                 	db	114	;'r'
   313  00FF46  65                 	db	101	;'e'
   314  00FF47  64                 	db	100	;'d'
   315  00FF48  21                 	db	33
   316  00FF49  0A                 	db	10
   317  00FF4A  00                 	db	0
   318  00FF4B                     STR_10:
   319  00FF4B  25                 	db	37
   320  00FF4C  30                 	db	48	;'0'
   321  00FF4D  32                 	db	50	;'2'
   322  00FF4E  75                 	db	117	;'u'
   323  00FF4F  3A                 	db	58	;':'
   324  00FF50  25                 	db	37
   325  00FF51  30                 	db	48	;'0'
   326  00FF52  32                 	db	50	;'2'
   327  00FF53  75                 	db	117	;'u'
   328  00FF54  3A                 	db	58	;':'
   329  00FF55  25                 	db	37
   330  00FF56  30                 	db	48	;'0'
   331  00FF57  32                 	db	50	;'2'
   332  00FF58  75                 	db	117	;'u'
   333  00FF59  20                 	db	32
   334  00FF5A  20                 	db	32
   335  00FF5B  20                 	db	32
   336  00FF5C  20                 	db	32
   337  00FF5D  25                 	db	37
   338  00FF5E  2E                 	db	46
   339  00FF5F  31                 	db	49	;'1'
   340  00FF60  66                 	db	102	;'f'
   341  00FF61  43                 	db	67	;'C'
   342  00FF62  00                 	db	0
   343  00FF63                     STR_3:
   344  00FF63  0A                 	db	10
   345  00FF64  48                 	db	72	;'H'
   346  00FF65  65                 	db	101	;'e'
   347  00FF66  61                 	db	97	;'a'
   348  00FF67  74                 	db	116	;'t'
   349  00FF68  65                 	db	101	;'e'
   350  00FF69  72                 	db	114	;'r'
   351  00FF6A  3A                 	db	58	;':'
   352  00FF6B  20                 	db	32
   353  00FF6C  25                 	db	37
   354  00FF6D  73                 	db	115	;'s'
   355  00FF6E  0A                 	db	10
   356  00FF6F  43                 	db	67	;'C'
   357  00FF70  6F                 	db	111	;'o'
   358  00FF71  6F                 	db	111	;'o'
   359  00FF72  6C                 	db	108	;'l'
   360  00FF73  65                 	db	101	;'e'
   361  00FF74  72                 	db	114	;'r'
   362  00FF75  3A                 	db	58	;':'
   363  00FF76  20                 	db	32
   364  00FF77  25                 	db	37
   365  00FF78  73                 	db	115	;'s'
   366  00FF79  00                 	db	0
   367  00FF7A                     STR_20:
   368  00FF7A  41                 	db	65	;'A'
   369  00FF7B  6E                 	db	110	;'n'
   370  00FF7C  77                 	db	119	;'w'
   371  00FF7D  61                 	db	97	;'a'
   372  00FF7E  72                 	db	114	;'r'
   373  00FF7F  20                 	db	32
   374  00FF80  20                 	db	32
   375  00FF81  20                 	db	32
   376  00FF82  20                 	db	32
   377  00FF83  20                 	db	32
   378  00FF84  20                 	db	32
   379  00FF85  41                 	db	65	;'A'
   380  00FF86  62                 	db	98	;'b'
   381  00FF87  6F                 	db	111	;'o'
   382  00FF88  6F                 	db	111	;'o'
   383  00FF89  64                 	db	100	;'d'
   384  00FF8A  00                 	db	0
   385  00FF8B                     STR_1:
   386  00FF8B  0A                 	db	10
   387  00FF8C  25                 	db	37
   388  00FF8D  30                 	db	48	;'0'
   389  00FF8E  32                 	db	50	;'2'
   390  00FF8F  75                 	db	117	;'u'
   391  00FF90  3A                 	db	58	;':'
   392  00FF91  25                 	db	37
   393  00FF92  30                 	db	48	;'0'
   394  00FF93  32                 	db	50	;'2'
   395  00FF94  75                 	db	117	;'u'
   396  00FF95  3A                 	db	58	;':'
   397  00FF96  25                 	db	37
   398  00FF97  30                 	db	48	;'0'
   399  00FF98  32                 	db	50	;'2'
   400  00FF99  75                 	db	117	;'u'
   401  00FF9A  00                 	db	0
   402  00FF9B                     STR_18:
   403  00FF9B  53                 	db	83	;'S'
   404  00FF9C  65                 	db	101	;'e'
   405  00FF9D  74                 	db	116	;'t'
   406  00FF9E  75                 	db	117	;'u'
   407  00FF9F  70                 	db	112	;'p'
   408  00FFA0  3A                 	db	58	;':'
   409  00FFA1  20                 	db	32
   410  00FFA2  48                 	db	72	;'H'
   411  00FFA3  6F                 	db	111	;'o'
   412  00FFA4  75                 	db	117	;'u'
   413  00FFA5  72                 	db	114	;'r'
   414  00FFA6  73                 	db	115	;'s'
   415  00FFA7  20                 	db	32
   416  00FFA8  20                 	db	32
   417  00FFA9  00                 	db	0
   418  00FFAA                     STR_19:
   419  00FFAA  4E                 	db	78	;'N'
   420  00FFAB  6F                 	db	111	;'o'
   421  00FFAC  72                 	db	114	;'r'
   422  00FFAD  6D                 	db	109	;'m'
   423  00FFAE  61                 	db	97	;'a'
   424  00FFAF  6C                 	db	108	;'l'
   425  00FFB0  20                 	db	32
   426  00FFB1  20                 	db	32
   427  00FFB2  20                 	db	32
   428  00FFB3  20                 	db	32
   429  00FFB4  4D                 	db	77	;'M'
   430  00FFB5  6F                 	db	111	;'o'
   431  00FFB6  64                 	db	100	;'d'
   432  00FFB7  65                 	db	101	;'e'
   433  00FFB8  00                 	db	0
   434  00FFB9                     STR_16:
   435  00FFB9  53                 	db	83	;'S'
   436  00FFBA  65                 	db	101	;'e'
   437  00FFBB  74                 	db	116	;'t'
   438  00FFBC  75                 	db	117	;'u'
   439  00FFBD  70                 	db	112	;'p'
   440  00FFBE  3A                 	db	58	;':'
   441  00FFBF  20                 	db	32
   442  00FFC0  53                 	db	83	;'S'
   443  00FFC1  65                 	db	101	;'e'
   444  00FFC2  63                 	db	99	;'c'
   445  00FFC3  6F                 	db	111	;'o'
   446  00FFC4  6E                 	db	110	;'n'
   447  00FFC5  64                 	db	100	;'d'
   448  00FFC6  73                 	db	115	;'s'
   449  00FFC7  00                 	db	0
   450  00FFC8                     STR_17:
   451  00FFC8  53                 	db	83	;'S'
   452  00FFC9  65                 	db	101	;'e'
   453  00FFCA  74                 	db	116	;'t'
   454  00FFCB  75                 	db	117	;'u'
   455  00FFCC  70                 	db	112	;'p'
   456  00FFCD  3A                 	db	58	;':'
   457  00FFCE  20                 	db	32
   458  00FFCF  4D                 	db	77	;'M'
   459  00FFD0  69                 	db	105	;'i'
   460  00FFD1  6E                 	db	110	;'n'
   461  00FFD2  75                 	db	117	;'u'
   462  00FFD3  74                 	db	116	;'t'
   463  00FFD4  65                 	db	101	;'e'
   464  00FFD5  73                 	db	115	;'s'
   465  00FFD6  00                 	db	0
   466  00FFD7                     STR_11:
   467  00FFD7  43                 	db	67	;'C'
   468  00FFD8  3A                 	db	58	;':'
   469  00FFD9  20                 	db	32
   470  00FFDA  25                 	db	37
   471  00FFDB  73                 	db	115	;'s'
   472  00FFDC  20                 	db	32
   473  00FFDD  20                 	db	32
   474  00FFDE  48                 	db	72	;'H'
   475  00FFDF  3A                 	db	58	;':'
   476  00FFE0  20                 	db	32
   477  00FFE1  25                 	db	37
   478  00FFE2  73                 	db	115	;'s'
   479  00FFE3  00                 	db	0
   480  00FFE4                     STR_2:
   481  00FFE4  0A                 	db	10
   482  00FFE5  54                 	db	84	;'T'
   483  00FFE6  3A                 	db	58	;':'
   484  00FFE7  20                 	db	32
   485  00FFE8  25                 	db	37
   486  00FFE9  2E                 	db	46
   487  00FFEA  31                 	db	49	;'1'
   488  00FFEB  66                 	db	102	;'f'
   489  00FFEC  00                 	db	0
   490  00FFED                     STR_21:
   491  00FFED  28                 	db	40
   492  00FFEE  6E                 	db	110	;'n'
   493  00FFEF  75                 	db	117	;'u'
   494  00FFF0  6C                 	db	108	;'l'
   495  00FFF1  6C                 	db	108	;'l'
   496  00FFF2  29                 	db	41
   497  00FFF3  00                 	db	0
   498  00FFF4                     STR_12:
   499  00FFF4  4F                 	db	79	;'O'
   500  00FFF5  4E                 	db	78	;'N'
   501  00FFF6  20                 	db	32
   502  00FFF7  00                 	db	0
   503  00FFF8                     STR_5:
   504  00FFF8  4F                 	db	79	;'O'
   505  00FFF9  46                 	db	70	;'F'
   506  00FFFA  46                 	db	70	;'F'
   507  00FFFB  00                 	db	0
   508  00FFFC                     STR_4:
   509  00FFFC  4F                 	db	79	;'O'
   510  00FFFD  4E                 	db	78	;'N'
   511  00FFFE  00                 	db	0
   512  0000                     
   513                           ; #config settings
   514  00FFFF  00                 	db	0	; dummy byte at the end
   515  0000                     
   516                           	psect	cinit
   517  002526                     __pcinit:
   518                           	opt stack 0
   519  002526                     start_initialization:
   520                           	opt stack 0
   521  002526                     __initialization:
   522                           	opt stack 0
   523                           
   524                           ; Initialize objects allocated to COMRAM (4 bytes)
   525                           ; load TBLPTR registers with __pidataCOMRAM
   526  002526  0EA8               	movlw	low __pidataCOMRAM
   527  002528  6EF6               	movwf	tblptrl,c
   528  00252A  0E27               	movlw	high __pidataCOMRAM
   529  00252C  6EF7               	movwf	tblptrh,c
   530  00252E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   531  002530  6EF8               	movwf	tblptru,c
   532  002532  EE00  F062         	lfsr	0,__pdataCOMRAM
   533  002536  EE10 F004          	lfsr	1,4
   534  00253A                     copy_data0:
   535  00253A  0009               	tblrd		*+
   536  00253C  CFF5 FFEE          	movff	tablat,postinc0
   537  002540  50E5               	movf	postdec1,w,c
   538  002542  50E1               	movf	fsr1l,w,c
   539  002544  E1FA               	bnz	copy_data0
   540                           
   541                           ; Clear objects allocated to BANK0 (35 bytes)
   542  002546  EE00  F0CA         	lfsr	0,__pbssBANK0
   543  00254A  0E23               	movlw	35
   544  00254C                     clear_0:
   545  00254C  6AEE               	clrf	postinc0,c
   546  00254E  06E8               	decf	wreg,f,c
   547  002550  E1FD               	bnz	clear_0
   548                           
   549                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   550  002552  6A66               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   551                           
   552                           ; Clear objects allocated to COMRAM (4 bytes)
   553  002554  6A61               	clrf	(__pbssCOMRAM+3)& (0+255),c
   554  002556  6A60               	clrf	(__pbssCOMRAM+2)& (0+255),c
   555  002558  6A5F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   556  00255A  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   557  00255C                     end_of_initialization:
   558                           	opt stack 0
   559  00255C                     __end_of__initialization:
   560                           	opt stack 0
   561  00255C  9067               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   562  00255E  9267               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   563  002560  0100               	movlb	0
   564  002562  EF03  F012         	goto	_main	;jump to C main() function
   565                           tblptru	equ	0xFF8
   566                           tblptrh	equ	0xFF7
   567                           tblptrl	equ	0xFF6
   568                           tablat	equ	0xFF5
   569                           postinc0	equ	0xFEE
   570                           wreg	equ	0xFE8
   571                           postdec1	equ	0xFE5
   572                           fsr1l	equ	0xFE1
   573                           
   574                           	psect	bitbssCOMRAM
   575  000330                     __pbitbssCOMRAM:
   576                           	opt stack 0
   577  000330                     _cooler_status:
   578                           	opt stack 0
   579  000330                     	ds	1
   580  000331                     _heater_status:
   581                           	opt stack 0
   582  000331                     	ds	1
   583  000332                     _clockMode:
   584                           	opt stack 0
   585  000332                     	ds	1
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           postdec1	equ	0xFE5
   593                           fsr1l	equ	0xFE1
   594                           
   595                           	psect	bssCOMRAM
   596  00005E                     __pbssCOMRAM:
   597                           	opt stack 0
   598  00005E                     _setupSelect:
   599                           	opt stack 0
   600  00005E                     	ds	1
   601  00005F                     _hours:
   602                           	opt stack 0
   603  00005F                     	ds	1
   604  000060                     _minutes:
   605                           	opt stack 0
   606  000060                     	ds	1
   607  000061                     _seconds:
   608                           	opt stack 0
   609  000061                     	ds	1
   610                           tblptru	equ	0xFF8
   611                           tblptrh	equ	0xFF7
   612                           tblptrl	equ	0xFF6
   613                           tablat	equ	0xFF5
   614                           postinc0	equ	0xFEE
   615                           wreg	equ	0xFE8
   616                           postdec1	equ	0xFE5
   617                           fsr1l	equ	0xFE1
   618                           
   619                           	psect	dataCOMRAM
   620  000062                     __pdataCOMRAM:
   621                           	opt stack 0
   622  000062                     _LCD_INIT_STRING:
   623                           	opt stack 0
   624  000062                     	ds	4
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1l	equ	0xFE1
   633                           
   634                           	psect	bssBANK0
   635  0000CA                     __pbssBANK0:
   636                           	opt stack 0
   637  0000CA                     _temperature:
   638                           	opt stack 0
   639  0000CA                     	ds	3
   640  0000CD                     _Buffer:
   641                           	opt stack 0
   642  0000CD                     	ds	32
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           postdec1	equ	0xFE5
   650                           fsr1l	equ	0xFE1
   651                           
   652                           	psect	cstackBANK1
   653  000100                     __pcstackBANK1:
   654                           	opt stack 0
   655  000100                     handle_uart@c1:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x0
   659  000100                     	ds	1
   660  000101                     handle_uart@c2:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x1
   664  000101                     	ds	1
   665  000102                     handle_uart@buffer:
   666                           	opt stack 0
   667                           
   668                           ; 16 bytes @ 0x2
   669  000102                     	ds	16
   670  000112                     handle_uart@cmd:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x12
   674  000112                     	ds	1
   675  000113                     handle_uart@h1:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x13
   679  000113                     	ds	1
   680  000114                     handle_uart@h2:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x14
   684  000114                     	ds	1
   685  000115                     handle_uart@m1:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x15
   689  000115                     	ds	1
   690  000116                     handle_uart@m2:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x16
   694  000116                     	ds	1
   695  000117                     handle_uart@s1:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x17
   699  000117                     	ds	1
   700  000118                     handle_uart@s2:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x18
   704  000118                     	ds	1
   705  000119                     _handle_uart$142:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x19
   709  000119                     	ds	2
   710  00011B                     _handle_uart$143:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x1B
   714  00011B                     	ds	2
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           postdec1	equ	0xFE5
   722                           fsr1l	equ	0xFE1
   723                           
   724                           	psect	cstackBANK0
   725  000080                     __pcstackBANK0:
   726                           	opt stack 0
   727  000080                     _fround$1288:
   728                           	opt stack 0
   729  000080                     _scale$1289:
   730                           	opt stack 0
   731                           
   732                           ; 3 bytes @ 0x0
   733  000080                     	ds	3
   734  000083                     scale@scl:
   735                           	opt stack 0
   736  000083                     _fround$1287:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x3
   740  000083                     	ds	1
   741  000084                     ?___fttol:
   742                           	opt stack 0
   743  000084                     ___fttol@f1:
   744                           	opt stack 0
   745                           
   746                           ; 3 bytes @ 0x4
   747  000084                     	ds	2
   748  000086                     fround@prec:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x6
   752  000086                     	ds	1
   753  000087                     ?___ftadd:
   754                           	opt stack 0
   755  000087                     ___ftadd@f1:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x7
   759  000087                     	ds	1
   760  000088                     ??___fttol:
   761                           
   762                           ; 1 bytes @ 0x8
   763  000088                     	ds	2
   764  00008A                     ___ftadd@f2:
   765                           	opt stack 0
   766                           
   767                           ; 3 bytes @ 0xA
   768  00008A                     	ds	3
   769  00008D                     ___ftadd@sign:
   770                           	opt stack 0
   771  00008D                     ___fttol@sign1:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0xD
   775  00008D                     	ds	1
   776  00008E                     ___ftadd@exp2:
   777                           	opt stack 0
   778  00008E                     ___fttol@lval:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0xE
   782  00008E                     	ds	1
   783  00008F                     ___ftadd@exp1:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0xF
   787  00008F                     	ds	1
   788  000090                     ?___ftsub:
   789                           	opt stack 0
   790  000090                     ___ftsub@f1:
   791                           	opt stack 0
   792                           
   793                           ; 3 bytes @ 0x10
   794  000090                     	ds	2
   795  000092                     ___fttol@exp1:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x12
   799  000092                     	ds	1
   800  000093                     ___ftsub@f2:
   801                           	opt stack 0
   802                           
   803                           ; 3 bytes @ 0x13
   804  000093                     	ds	3
   805  000096                     ?_sprintf:
   806                           	opt stack 0
   807  000096                     sprintf@sp:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x16
   811  000096                     	ds	2
   812  000098                     sprintf@f:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x18
   816  000098                     	ds	11
   817  0000A3                     ??_sprintf:
   818                           
   819                           ; 1 bytes @ 0x23
   820  0000A3                     	ds	6
   821  0000A9                     _sprintf$1290:
   822                           	opt stack 0
   823                           
   824                           ; 3 bytes @ 0x29
   825  0000A9                     	ds	3
   826  0000AC                     sprintf@cp:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x2C
   830  0000AC                     	ds	2
   831  0000AE                     sprintf@ap:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x2E
   835  0000AE                     	ds	2
   836  0000B0                     sprintf@len:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x30
   840  0000B0                     	ds	2
   841  0000B2                     sprintf@val:
   842                           	opt stack 0
   843                           
   844                           ; 4 bytes @ 0x32
   845  0000B2                     	ds	4
   846  0000B6                     sprintf@tmpval:
   847                           	opt stack 0
   848                           
   849                           ; 4 bytes @ 0x36
   850  0000B6                     	ds	4
   851  0000BA                     sprintf@exp:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x3A
   855  0000BA                     	ds	2
   856  0000BC                     sprintf@flag:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x3C
   860  0000BC                     	ds	2
   861  0000BE                     sprintf@fval:
   862                           	opt stack 0
   863                           
   864                           ; 3 bytes @ 0x3E
   865  0000BE                     	ds	3
   866  0000C1                     sprintf@width:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x41
   870  0000C1                     	ds	2
   871  0000C3                     sprintf@prec:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x43
   875  0000C3                     	ds	2
   876  0000C5                     sprintf@c:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x45
   880  0000C5                     	ds	1
   881  0000C6                     _display_lcd$170:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x46
   885  0000C6                     	ds	2
   886  0000C8                     _display_lcd$171:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x48
   890  0000C8                     	ds	2
   891                           tblptru	equ	0xFF8
   892                           tblptrh	equ	0xFF7
   893                           tblptrl	equ	0xFF6
   894                           tablat	equ	0xFF5
   895                           postinc0	equ	0xFEE
   896                           wreg	equ	0xFE8
   897                           postdec1	equ	0xFE5
   898                           fsr1l	equ	0xFE1
   899                           
   900                           	psect	cstackCOMRAM
   901  000001                     __pcstackCOMRAM:
   902                           	opt stack 0
   903  000001                     ?i2___awmod:
   904                           	opt stack 0
   905  000001                     i2___awmod@dividend:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x0
   909  000001                     	ds	2
   910  000003                     i2___awmod@divisor:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x2
   914  000003                     	ds	2
   915  000005                     i2___awmod@counter:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x4
   919  000005                     	ds	1
   920  000006                     i2___awmod@sign:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x5
   924  000006                     	ds	1
   925  000007                     ??_ISR:
   926                           
   927                           ; 1 bytes @ 0x6
   928  000007                     	ds	18
   929  000019                     ??_isdigit:
   930  000019                     ??_toggle_heater:
   931  000019                     ??_delay_cycles:
   932  000019                     ?_read_adc_raw_no_lib:
   933                           	opt stack 0
   934  000019                     ?___awmod:
   935                           	opt stack 0
   936  000019                     ?___ftpack:
   937                           	opt stack 0
   938  000019                     ?___ftneg:
   939                           	opt stack 0
   940  000019                     ?__tdiv_to_l_:
   941                           	opt stack 0
   942  000019                     ?__div_to_l_:
   943                           	opt stack 0
   944  000019                     ?___lldiv:
   945                           	opt stack 0
   946  000019                     setupSerial@dummy:
   947                           	opt stack 0
   948  000019                     read_byte_no_lib@c:
   949                           	opt stack 0
   950  000019                     send_byte_no_lib@c:
   951                           	opt stack 0
   952  000019                     delay_ms@n:
   953                           	opt stack 0
   954  000019                     ___awmod@dividend:
   955                           	opt stack 0
   956  000019                     __div_to_l_@f1:
   957                           	opt stack 0
   958  000019                     ___ftpack@arg:
   959                           	opt stack 0
   960  000019                     __tdiv_to_l_@f1:
   961                           	opt stack 0
   962  000019                     ___ftge@ff1:
   963                           	opt stack 0
   964  000019                     ___ftneg@f1:
   965                           	opt stack 0
   966  000019                     ___lldiv@dividend:
   967                           	opt stack 0
   968                           
   969                           ; 4 bytes @ 0x18
   970  000019                     	ds	1
   971  00001A                     _isdigit$923:
   972                           	opt stack 0
   973  00001A                     send_string_no_lib@p:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x19
   977  00001A                     	ds	1
   978  00001B                     ??_read_adc_raw_no_lib:
   979  00001B                     isdigit@c:
   980                           	opt stack 0
   981  00001B                     delay_ms@x:
   982                           	opt stack 0
   983  00001B                     ___awmod@divisor:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x1A
   987  00001B                     	ds	1
   988  00001C                     delay_cycles@n:
   989                           	opt stack 0
   990  00001C                     ___ftpack@exp:
   991                           	opt stack 0
   992  00001C                     __div_to_l_@f2:
   993                           	opt stack 0
   994  00001C                     __tdiv_to_l_@f2:
   995                           	opt stack 0
   996  00001C                     ___ftge@ff2:
   997                           	opt stack 0
   998                           
   999                           ; 3 bytes @ 0x1B
  1000  00001C                     	ds	1
  1001  00001D                     ___awmod@counter:
  1002                           	opt stack 0
  1003  00001D                     ___ftpack@sign:
  1004                           	opt stack 0
  1005  00001D                     delay_cycles@x:
  1006                           	opt stack 0
  1007  00001D                     read_adc_raw_no_lib@raw_value:
  1008                           	opt stack 0
  1009  00001D                     ___lldiv@divisor:
  1010                           	opt stack 0
  1011                           
  1012                           ; 4 bytes @ 0x1C
  1013  00001D                     	ds	1
  1014  00001E                     ??___ftpack:
  1015  00001E                     ___awmod@sign:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x1D
  1019  00001E                     	ds	1
  1020  00001F                     ??__tdiv_to_l_:
  1021  00001F                     ??_handle_buttons:
  1022  00001F                     ??_lcd_send_nibble:
  1023  00001F                     ??___ftge:
  1024  00001F                     ?___awdiv:
  1025                           	opt stack 0
  1026  00001F                     read_adc_raw_no_lib@channel:
  1027                           	opt stack 0
  1028  00001F                     ___awdiv@dividend:
  1029                           	opt stack 0
  1030  00001F                     __div_to_l_@quot:
  1031                           	opt stack 0
  1032                           
  1033                           ; 4 bytes @ 0x1E
  1034  00001F                     	ds	1
  1035  000020                     lcd_send_nibble@n:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x1F
  1039  000020                     	ds	1
  1040  000021                     ?___lltoft:
  1041                           	opt stack 0
  1042  000021                     lcd_send_byte@n:
  1043                           	opt stack 0
  1044  000021                     _handle_buttons$158:
  1045                           	opt stack 0
  1046  000021                     ___awdiv@divisor:
  1047                           	opt stack 0
  1048  000021                     ___lldiv@quotient:
  1049                           	opt stack 0
  1050  000021                     ___lltoft@c:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x20
  1054  000021                     	ds	1
  1055  000022                     lcd_send_byte@cm_data:
  1056                           	opt stack 0
  1057  000022                     __tdiv_to_l_@quot:
  1058                           	opt stack 0
  1059                           
  1060                           ; 4 bytes @ 0x21
  1061  000022                     	ds	1
  1062  000023                     lcd_init@i:
  1063                           	opt stack 0
  1064  000023                     lcd_gotoxy@y:
  1065                           	opt stack 0
  1066  000023                     ___awdiv@counter:
  1067                           	opt stack 0
  1068  000023                     __div_to_l_@cntr:
  1069                           	opt stack 0
  1070  000023                     _handle_buttons$159:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x22
  1074  000023                     	ds	1
  1075  000024                     lcd_gotoxy@x:
  1076                           	opt stack 0
  1077  000024                     ___awdiv@sign:
  1078                           	opt stack 0
  1079  000024                     __div_to_l_@exp1:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x23
  1083  000024                     	ds	1
  1084  000025                     ??___lltoft:
  1085  000025                     lcd_gotoxy@address:
  1086                           	opt stack 0
  1087  000025                     ___lldiv@counter:
  1088                           	opt stack 0
  1089  000025                     _handle_buttons$160:
  1090                           	opt stack 0
  1091  000025                     ___awdiv@quotient:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x24
  1095  000025                     	ds	1
  1096  000026                     ?___llmod:
  1097                           	opt stack 0
  1098  000026                     lcd_putc@c:
  1099                           	opt stack 0
  1100  000026                     __tdiv_to_l_@cntr:
  1101                           	opt stack 0
  1102  000026                     ___llmod@dividend:
  1103                           	opt stack 0
  1104                           
  1105                           ; 4 bytes @ 0x25
  1106  000026                     	ds	1
  1107  000027                     ?___wmul:
  1108                           	opt stack 0
  1109  000027                     __tdiv_to_l_@exp1:
  1110                           	opt stack 0
  1111  000027                     lcd_puts@s:
  1112                           	opt stack 0
  1113  000027                     ___wmul@multiplier:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x26
  1117  000027                     	ds	2
  1118  000029                     ___lltoft@exp:
  1119                           	opt stack 0
  1120  000029                     ___wmul@multiplicand:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x28
  1124  000029                     	ds	1
  1125  00002A                     ___llmod@divisor:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x29
  1129  00002A                     	ds	1
  1130  00002B                     ___wmul@product:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x2A
  1134  00002B                     	ds	2
  1135  00002D                     ?___awtoft:
  1136                           	opt stack 0
  1137  00002D                     ___awtoft@c:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x2C
  1141  00002D                     	ds	1
  1142  00002E                     ___llmod@counter:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x2D
  1146  00002E                     	ds	2
  1147  000030                     ___awtoft@sign:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x2F
  1151  000030                     	ds	1
  1152  000031                     ?___ftdiv:
  1153                           	opt stack 0
  1154  000031                     ___ftdiv@f1:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0x30
  1158  000031                     	ds	3
  1159  000034                     ___ftdiv@f2:
  1160                           	opt stack 0
  1161                           
  1162                           ; 3 bytes @ 0x33
  1163  000034                     	ds	3
  1164  000037                     ??___ftdiv:
  1165                           
  1166                           ; 1 bytes @ 0x36
  1167  000037                     	ds	3
  1168  00003A                     ___ftdiv@cntr:
  1169                           	opt stack 0
  1170                           
  1171                           ; 1 bytes @ 0x39
  1172  00003A                     	ds	1
  1173  00003B                     ___ftdiv@f3:
  1174                           	opt stack 0
  1175                           
  1176                           ; 3 bytes @ 0x3A
  1177  00003B                     	ds	3
  1178  00003E                     ___ftdiv@exp:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x3D
  1182  00003E                     	ds	1
  1183  00003F                     ___ftdiv@sign:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x3E
  1187  00003F                     	ds	1
  1188  000040                     ?_read_adc_voltage:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0x3F
  1192  000040                     	ds	3
  1193  000043                     read_adc_voltage@voltage:
  1194                           	opt stack 0
  1195                           
  1196                           ; 3 bytes @ 0x42
  1197  000043                     	ds	3
  1198  000046                     read_adc_voltage@channel:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x45
  1202  000046                     	ds	1
  1203  000047                     read_adc_voltage@raw_value:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x46
  1207  000047                     	ds	2
  1208  000049                     ?___ftmul:
  1209                           	opt stack 0
  1210  000049                     ___ftmul@f1:
  1211                           	opt stack 0
  1212                           
  1213                           ; 3 bytes @ 0x48
  1214  000049                     	ds	3
  1215  00004C                     ___ftmul@f2:
  1216                           	opt stack 0
  1217                           
  1218                           ; 3 bytes @ 0x4B
  1219  00004C                     	ds	3
  1220  00004F                     ??___ftmul:
  1221                           
  1222                           ; 1 bytes @ 0x4E
  1223  00004F                     	ds	3
  1224  000052                     ___ftmul@exp:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x51
  1228  000052                     	ds	1
  1229  000053                     ___ftmul@f3_as_product:
  1230                           	opt stack 0
  1231                           
  1232                           ; 3 bytes @ 0x52
  1233  000053                     	ds	3
  1234  000056                     ___ftmul@cntr:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x55
  1238  000056                     	ds	1
  1239  000057                     ___ftmul@sign:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x56
  1243  000057                     	ds	1
  1244  000058                     ?_fround:
  1245                           	opt stack 0
  1246  000058                     ?_scale:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x57
  1250  000058                     	ds	3
  1251  00005B                     ??___ftadd:
  1252  00005B                     
  1253                           ; 1 bytes @ 0x5A
  1254  00005B                     	ds	3
  1255  00005E                     tblptru	equ	0xFF8
  1256                           tblptrh	equ	0xFF7
  1257                           tblptrl	equ	0xFF6
  1258                           tablat	equ	0xFF5
  1259                           postinc0	equ	0xFEE
  1260                           wreg	equ	0xFE8
  1261                           postdec1	equ	0xFE5
  1262                           fsr1l	equ	0xFE1
  1263                           
  1264                           ; 1 bytes @ 0x5D
  1265 ;;
  1266 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1267 ;;
  1268 ;; *************** function _main *****************
  1269 ;; Defined at:
  1270 ;;		line 342 in file "HM1.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;		None
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;Total ram usage:        0 bytes
  1289 ;; Hardware stack levels required when called:    9
  1290 ;; This function calls:
  1291 ;;		___ftmul
  1292 ;;		_display_lcd
  1293 ;;		_handle_buttons
  1294 ;;		_handle_uart
  1295 ;;		_init_adc_no_lib
  1296 ;;		_init_timer0
  1297 ;;		_lcd_init
  1298 ;;		_read_adc_voltage
  1299 ;;		_setupPorts
  1300 ;;		_setupSerial
  1301 ;;		_toggle_heater
  1302 ;; This function is called by:
  1303 ;;		Startup code after reset
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text0
  1308  002406                     __ptext0:
  1309                           	opt stack 0
  1310  002406                     _main:
  1311                           	opt stack 22
  1312                           
  1313                           ;HM1.c: 343: setupPorts();
  1314                           
  1315                           ;incstack = 0
  1316  002406  EC66  F013         	call	_setupPorts	;wreg free
  1317                           
  1318                           ;HM1.c: 344: setupSerial();
  1319  00240A  EC42  F013         	call	_setupSerial	;wreg free
  1320                           
  1321                           ;HM1.c: 345: lcd_init();
  1322  00240E  EC23  F011         	call	_lcd_init	;wreg free
  1323                           
  1324                           ;HM1.c: 346: init_adc_no_lib();
  1325  002412  ECCA  F013         	call	_init_adc_no_lib	;wreg free
  1326                           
  1327                           ;HM1.c: 347: init_timer0();
  1328  002416  EC97  F013         	call	_init_timer0	;wreg free
  1329  00241A                     
  1330                           ;HM1.c: 351: temperature = read_adc_voltage(2) * 100;
  1331  00241A  0E02               	movlw	2
  1332  00241C  ECBD  F010         	call	_read_adc_voltage
  1333  002420  C040  F049         	movff	?_read_adc_voltage,___ftmul@f1
  1334  002424  C041  F04A         	movff	?_read_adc_voltage+1,___ftmul@f1+1
  1335  002428  C042  F04B         	movff	?_read_adc_voltage+2,___ftmul@f1+2
  1336  00242C  0E00               	movlw	0
  1337  00242E  6E4C               	movwf	___ftmul@f2,c
  1338  002430  0EC8               	movlw	200
  1339  002432  6E4D               	movwf	___ftmul@f2+1,c
  1340  002434  0E42               	movlw	66
  1341  002436  6E4E               	movwf	___ftmul@f2+2,c
  1342  002438  EC3E  F00E         	call	___ftmul	;wreg free
  1343  00243C  C049  F0CA         	movff	?___ftmul,_temperature
  1344  002440  C04A  F0CB         	movff	?___ftmul+1,_temperature+1
  1345  002444  C04B  F0CC         	movff	?___ftmul+2,_temperature+2
  1346                           
  1347                           ;HM1.c: 352: handle_buttons();
  1348  002448  EC1A  F00C         	call	_handle_buttons	;wreg free
  1349                           
  1350                           ;HM1.c: 353: display_lcd();
  1351  00244C  ECAB  F00C         	call	_display_lcd	;wreg free
  1352                           
  1353                           ;HM1.c: 354: handle_uart();
  1354  002450  EC3C  F009         	call	_handle_uart	;wreg free
  1355                           
  1356                           ;HM1.c: 355: toggle_heater();
  1357  002454  ECEC  F012         	call	_toggle_heater	;wreg free
  1358  002458  D7E0               	goto	l194
  1359  00245A                     __end_of_main:
  1360                           	opt stack 0
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           postdec1	equ	0xFE5
  1368                           fsr1l	equ	0xFE1
  1369                           
  1370 ;; *************** function _toggle_heater *****************
  1371 ;; Defined at:
  1372 ;;		line 276 in file "HM1.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;		None
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;Total ram usage:        2 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    2
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_main
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text1
  1401  0025D8                     __ptext1:
  1402                           	opt stack 0
  1403  0025D8                     _toggle_heater:
  1404                           	opt stack 28
  1405                           
  1406                           ;HM1.c: 277: if (RB4 == 0) {
  1407                           
  1408                           ;incstack = 0
  1409  0025D8  B881               	btfsc	3969,4,c	;volatile
  1410  0025DA  0012               	return	
  1411                           
  1412                           ;HM1.c: 278: heater_status = !heater_status;
  1413  0025DC  B266               	btfsc	_heater_status/(0+8),_heater_status& (0+7),c
  1414  0025DE  D002               	goto	u4160
  1415  0025E0  8266               	bsf	_heater_status/(0+8),_heater_status& (0+7),c
  1416  0025E2  D001               	goto	u4175
  1417  0025E4                     u4160:
  1418  0025E4  9266               	bcf	_heater_status/(0+8),_heater_status& (0+7),c
  1419  0025E6                     u4175:
  1420                           
  1421                           ;HM1.c: 279: RC5 = heater_status;
  1422  0025E6  A266               	btfss	_heater_status/(0+8),_heater_status& (0+7),c
  1423  0025E8  D002               	goto	u4180
  1424  0025EA  8A82               	bsf	3970,5,c	;volatile
  1425  0025EC  D001               	goto	u4195
  1426  0025EE                     u4180:
  1427  0025EE  9A82               	bcf	3970,5,c	;volatile
  1428  0025F0                     u4195:
  1429                           
  1430                           ;HM1.c: 280: _delay((unsigned long)((300)*(4000000/4000.0)));
  1431  0025F0  0E02               	movlw	2
  1432  0025F2  6E1A               	movwf	(??_toggle_heater+1)& (0+255),c
  1433  0025F4  0E86               	movlw	134
  1434  0025F6  6E19               	movwf	??_toggle_heater& (0+255),c
  1435  0025F8  0E99               	movlw	153
  1436  0025FA                     u6527:
  1437  0025FA  2EE8               	decfsz	wreg,f,c
  1438  0025FC  D7FE               	bra	u6527
  1439  0025FE  2E19               	decfsz	??_toggle_heater& (0+255),f,c
  1440  002600  D7FC               	bra	u6527
  1441  002602  2E1A               	decfsz	(??_toggle_heater+1)& (0+255),f,c
  1442  002604  D7FA               	bra	u6527
  1443  002606  F000               	nop	
  1444  002608  0012               	return	
  1445  00260A                     __end_of_toggle_heater:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           postinc0	equ	0xFEE
  1452                           wreg	equ	0xFE8
  1453                           postdec1	equ	0xFE5
  1454                           fsr1l	equ	0xFE1
  1455                           
  1456 ;; *************** function _setupSerial *****************
  1457 ;; Defined at:
  1458 ;;		line 3 in file "my_ser.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  dummy           1   24[COMRAM] unsigned char 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  1    wreg      void 
  1465 ;; Registers used:
  1466 ;;		wreg, status,2
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1475 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1476 ;;Total ram usage:        1 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; Hardware stack levels required when called:    2
  1479 ;; This function calls:
  1480 ;;		Nothing
  1481 ;; This function is called by:
  1482 ;;		_main
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text2
  1487  002684                     __ptext2:
  1488                           	opt stack 0
  1489  002684                     _setupSerial:
  1490                           	opt stack 28
  1491                           
  1492                           ;my_ser.c: 4: unsigned char dummy;
  1493                           ;my_ser.c: 5: BAUDCONbits.BRG16 = 0;
  1494                           
  1495                           ;incstack = 0
  1496  002684  96B8               	bcf	4024,3,c	;volatile
  1497                           
  1498                           ;my_ser.c: 6: TXSTA = 0;
  1499  002686  0E00               	movlw	0
  1500  002688  6EAC               	movwf	4012,c	;volatile
  1501                           
  1502                           ;my_ser.c: 7: SPBRG = 25;
  1503  00268A  0E19               	movlw	25
  1504  00268C  6EAF               	movwf	4015,c	;volatile
  1505                           
  1506                           ;my_ser.c: 8: SPBRGH = 0;
  1507  00268E  0E00               	movlw	0
  1508  002690  6EB0               	movwf	4016,c	;volatile
  1509                           
  1510                           ;my_ser.c: 9: TXSTAbits.BRGH = 1;
  1511  002692  84AC               	bsf	4012,2,c	;volatile
  1512                           
  1513                           ;my_ser.c: 10: TXSTAbits.TXEN = 1;
  1514  002694  8AAC               	bsf	4012,5,c	;volatile
  1515                           
  1516                           ;my_ser.c: 12: RCSTA = 0;
  1517  002696  0E00               	movlw	0
  1518  002698  6EAB               	movwf	4011,c	;volatile
  1519                           
  1520                           ;my_ser.c: 13: RCSTAbits.CREN = 1;
  1521  00269A  88AB               	bsf	4011,4,c	;volatile
  1522                           
  1523                           ;my_ser.c: 14: RCSTAbits.SPEN = 1;
  1524  00269C  8EAB               	bsf	4011,7,c	;volatile
  1525                           
  1526                           ;my_ser.c: 15: ;
  1527                           ;my_ser.c: 16: dummy = RCREG;
  1528  00269E  CFAE F019          	movff	4014,setupSerial@dummy	;volatile
  1529                           
  1530                           ;my_ser.c: 17: dummy = RCREG;
  1531  0026A2  CFAE F019          	movff	4014,setupSerial@dummy	;volatile
  1532  0026A6  0012               	return	
  1533  0026A8                     __end_of_setupSerial:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           postdec1	equ	0xFE5
  1542                           fsr1l	equ	0xFE1
  1543                           
  1544 ;; *************** function _setupPorts *****************
  1545 ;; Defined at:
  1546 ;;		line 162 in file "HM1.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, status,2
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1564 ;;Total ram usage:        0 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    2
  1567 ;; This function calls:
  1568 ;;		Nothing
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text3
  1575  0026CC                     __ptext3:
  1576                           	opt stack 0
  1577  0026CC                     _setupPorts:
  1578                           	opt stack 28
  1579                           
  1580                           ;HM1.c: 164: ADCON1 = 0x09;
  1581                           
  1582                           ;incstack = 0
  1583  0026CC  0E09               	movlw	9
  1584  0026CE  6EC1               	movwf	4033,c	;volatile
  1585                           
  1586                           ;HM1.c: 167: TRISB = 0xFF;
  1587  0026D0  6893               	setf	3987,c	;volatile
  1588                           
  1589                           ;HM1.c: 168: TRISC = 0x00;
  1590  0026D2  0E00               	movlw	0
  1591  0026D4  6E94               	movwf	3988,c	;volatile
  1592                           
  1593                           ;HM1.c: 169: TRISA = 0xFF;
  1594  0026D6  6892               	setf	3986,c	;volatile
  1595                           
  1596                           ;HM1.c: 170: TRISD = 0x00;
  1597  0026D8  0E00               	movlw	0
  1598  0026DA  6E95               	movwf	3989,c	;volatile
  1599                           
  1600                           ;HM1.c: 171: TRISE = 0x00;
  1601  0026DC  0E00               	movlw	0
  1602  0026DE  6E96               	movwf	3990,c	;volatile
  1603                           
  1604                           ;HM1.c: 174: LATC = 0x00;
  1605  0026E0  0E00               	movlw	0
  1606  0026E2  6E8B               	movwf	3979,c	;volatile
  1607                           
  1608                           ;HM1.c: 175: LATD = 0x00;
  1609  0026E4  0E00               	movlw	0
  1610  0026E6  6E8C               	movwf	3980,c	;volatile
  1611                           
  1612                           ;HM1.c: 176: LATE = 0x00;
  1613  0026E8  0E00               	movlw	0
  1614  0026EA  6E8D               	movwf	3981,c	;volatile
  1615  0026EC  0012               	return		;funcret
  1616  0026EE                     __end_of_setupPorts:
  1617                           	opt stack 0
  1618                           tblptru	equ	0xFF8
  1619                           tblptrh	equ	0xFF7
  1620                           tblptrl	equ	0xFF6
  1621                           tablat	equ	0xFF5
  1622                           postinc0	equ	0xFEE
  1623                           wreg	equ	0xFE8
  1624                           postdec1	equ	0xFE5
  1625                           fsr1l	equ	0xFE1
  1626                           
  1627 ;; *************** function _read_adc_voltage *****************
  1628 ;; Defined at:
  1629 ;;		line 49 in file "my_adc.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;  channel         1    wreg     unsigned char 
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;  channel         1   69[COMRAM] unsigned char 
  1634 ;;  voltage         3   66[COMRAM] float 
  1635 ;;  raw_value       2   70[COMRAM] int 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  3   63[COMRAM] float 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1645 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;Total ram usage:        9 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    4
  1652 ;; This function calls:
  1653 ;;		___awtoft
  1654 ;;		___ftdiv
  1655 ;;		___wmul
  1656 ;;		_read_adc_raw_no_lib
  1657 ;; This function is called by:
  1658 ;;		_main
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           	psect	text4
  1663  00217A                     __ptext4:
  1664                           	opt stack 0
  1665  00217A                     _read_adc_voltage:
  1666                           	opt stack 26
  1667                           
  1668                           ;incstack = 0
  1669                           ;read_adc_voltage@channel stored from wreg
  1670  00217A  6E46               	movwf	read_adc_voltage@channel,c
  1671                           
  1672                           ;my_adc.c: 50: int raw_value;
  1673                           ;my_adc.c: 51: float voltage;
  1674                           ;my_adc.c: 52: raw_value = read_adc_raw_no_lib(channel);
  1675  00217C  5046               	movf	read_adc_voltage@channel,w,c
  1676  00217E  ECB3  F012         	call	_read_adc_raw_no_lib
  1677  002182  C019  F047         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  1678  002186  C01A  F048         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  1679                           
  1680                           ;my_adc.c: 53: voltage = (raw_value * 5) / 1023.0;
  1681  00218A  C047  F027         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  1682  00218E  C048  F028         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  1683  002192  0E00               	movlw	0
  1684  002194  6E2A               	movwf	___wmul@multiplicand+1,c
  1685  002196  0E05               	movlw	5
  1686  002198  6E29               	movwf	___wmul@multiplicand,c
  1687  00219A  EC1C  F013         	call	___wmul	;wreg free
  1688  00219E  C027  F02D         	movff	?___wmul,___awtoft@c
  1689  0021A2  C028  F02E         	movff	?___wmul+1,___awtoft@c+1
  1690  0021A6  ECD0  F012         	call	___awtoft	;wreg free
  1691  0021AA  C02D  F031         	movff	?___awtoft,___ftdiv@f1
  1692  0021AE  C02E  F032         	movff	?___awtoft+1,___ftdiv@f1+1
  1693  0021B2  C02F  F033         	movff	?___awtoft+2,___ftdiv@f1+2
  1694  0021B6  0EC0               	movlw	192
  1695  0021B8  6E34               	movwf	___ftdiv@f2,c
  1696  0021BA  0E7F               	movlw	127
  1697  0021BC  6E35               	movwf	___ftdiv@f2+1,c
  1698  0021BE  0E44               	movlw	68
  1699  0021C0  6E36               	movwf	___ftdiv@f2+2,c
  1700  0021C2  ECB8  F00E         	call	___ftdiv	;wreg free
  1701  0021C6  C031  F043         	movff	?___ftdiv,read_adc_voltage@voltage
  1702  0021CA  C032  F044         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  1703  0021CE  C033  F045         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  1704                           
  1705                           ;my_adc.c: 54: return voltage;
  1706  0021D2  C043  F040         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  1707  0021D6  C044  F041         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  1708  0021DA  C045  F042         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  1709  0021DE  0012               	return	
  1710  0021E0                     __end_of_read_adc_voltage:
  1711                           	opt stack 0
  1712                           tblptru	equ	0xFF8
  1713                           tblptrh	equ	0xFF7
  1714                           tblptrl	equ	0xFF6
  1715                           tablat	equ	0xFF5
  1716                           postinc0	equ	0xFEE
  1717                           wreg	equ	0xFE8
  1718                           postdec1	equ	0xFE5
  1719                           fsr1l	equ	0xFE1
  1720                           
  1721 ;; *************** function _read_adc_raw_no_lib *****************
  1722 ;; Defined at:
  1723 ;;		line 33 in file "my_adc.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  channel         1    wreg     unsigned char 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  channel         1   30[COMRAM] unsigned char 
  1728 ;;  raw_value       2   28[COMRAM] int 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  2   24[COMRAM] int 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2, status,0
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1738 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1739 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1740 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1741 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1742 ;;Total ram usage:        7 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    2
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_read_adc_voltage
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text5
  1753  002566                     __ptext5:
  1754                           	opt stack 0
  1755  002566                     _read_adc_raw_no_lib:
  1756                           	opt stack 27
  1757                           
  1758                           ;incstack = 0
  1759                           ;read_adc_raw_no_lib@channel stored from wreg
  1760  002566  6E1F               	movwf	read_adc_raw_no_lib@channel,c
  1761                           
  1762                           ;my_adc.c: 34: int raw_value;
  1763                           ;my_adc.c: 35: ADCON0bits.CHS = channel;
  1764  002568  C01F  F01B         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  1765  00256C  461B               	rlncf	??_read_adc_raw_no_lib,f,c
  1766  00256E  461B               	rlncf	??_read_adc_raw_no_lib,f,c
  1767  002570  50C2               	movf	4034,w,c	;volatile
  1768  002572  181B               	xorwf	??_read_adc_raw_no_lib,w,c
  1769  002574  0BC3               	andlw	-61
  1770  002576  181B               	xorwf	??_read_adc_raw_no_lib,w,c
  1771  002578  6EC2               	movwf	4034,c	;volatile
  1772                           
  1773                           ;my_adc.c: 38: ADCON0bits.GO = 1;
  1774  00257A  82C2               	bsf	4034,1,c	;volatile
  1775  00257C  B2C2               	btfsc	4034,1,c	;volatile
  1776  00257E  D7FE               	goto	l325
  1777                           
  1778                           ;my_adc.c: 42: raw_value = ADRESH << 8 | ADRESL;
  1779  002580  50C3               	movf	4035,w,c	;volatile
  1780  002582  CFC4 F01B          	movff	4036,??_read_adc_raw_no_lib	;volatile
  1781  002586  6A1C               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  1782  002588  C01B  F01C         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  1783  00258C  6A1B               	clrf	??_read_adc_raw_no_lib,c
  1784  00258E  101B               	iorwf	??_read_adc_raw_no_lib,w,c
  1785  002590  6E1D               	movwf	read_adc_raw_no_lib@raw_value,c
  1786  002592  501C               	movf	??_read_adc_raw_no_lib+1,w,c
  1787  002594  6E1E               	movwf	read_adc_raw_no_lib@raw_value+1,c
  1788                           
  1789                           ;my_adc.c: 46: return raw_value;
  1790  002596  C01D  F019         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  1791  00259A  C01E  F01A         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  1792  00259E  0012               	return	
  1793  0025A0                     __end_of_read_adc_raw_no_lib:
  1794                           	opt stack 0
  1795                           tblptru	equ	0xFF8
  1796                           tblptrh	equ	0xFF7
  1797                           tblptrl	equ	0xFF6
  1798                           tablat	equ	0xFF5
  1799                           postinc0	equ	0xFEE
  1800                           wreg	equ	0xFE8
  1801                           postdec1	equ	0xFE5
  1802                           fsr1l	equ	0xFE1
  1803                           
  1804 ;; *************** function ___ftdiv *****************
  1805 ;; Defined at:
  1806 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;  f1              3   48[COMRAM] float 
  1809 ;;  f2              3   51[COMRAM] float 
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  f3              3   58[COMRAM] float 
  1812 ;;  sign            1   62[COMRAM] unsigned char 
  1813 ;;  exp             1   61[COMRAM] unsigned char 
  1814 ;;  cntr            1   57[COMRAM] unsigned char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  3   48[COMRAM] float 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1824 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;Total ram usage:       15 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    3
  1831 ;; This function calls:
  1832 ;;		___ftpack
  1833 ;; This function is called by:
  1834 ;;		_read_adc_voltage
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text6
  1839  001D70                     __ptext6:
  1840                           	opt stack 0
  1841  001D70                     ___ftdiv:
  1842                           	opt stack 26
  1843                           
  1844                           ;incstack = 0
  1845  001D70  C033  F037         	movff	___ftdiv@f1+2,??___ftdiv
  1846  001D74  6A38               	clrf	(??___ftdiv+1)& (0+255),c
  1847  001D76  6A39               	clrf	(??___ftdiv+2)& (0+255),c
  1848  001D78  3432               	rlcf	___ftdiv@f1+1,w,c
  1849  001D7A  3637               	rlcf	??___ftdiv& (0+255),f,c
  1850  001D7C  E301               	bnc	u6221
  1851  001D7E  8038               	bsf	(??___ftdiv+1)& (0+255),0,c
  1852  001D80                     u6221:
  1853  001D80  5037               	movf	??___ftdiv,w,c
  1854  001D82  6E3E               	movwf	___ftdiv@exp,c
  1855  001D84  503E               	movf	___ftdiv@exp,w,c
  1856  001D86  A4D8               	btfss	status,2,c
  1857  001D88  D007               	goto	l775
  1858  001D8A  0E00               	movlw	0
  1859  001D8C  6E31               	movwf	?___ftdiv,c
  1860  001D8E  0E00               	movlw	0
  1861  001D90  6E32               	movwf	?___ftdiv+1,c
  1862  001D92  0E00               	movlw	0
  1863  001D94  6E33               	movwf	?___ftdiv+2,c
  1864  001D96  0012               	return	
  1865  001D98                     l775:
  1866  001D98  C036  F037         	movff	___ftdiv@f2+2,??___ftdiv
  1867  001D9C  6A38               	clrf	(??___ftdiv+1)& (0+255),c
  1868  001D9E  6A39               	clrf	(??___ftdiv+2)& (0+255),c
  1869  001DA0  3435               	rlcf	___ftdiv@f2+1,w,c
  1870  001DA2  3637               	rlcf	??___ftdiv& (0+255),f,c
  1871  001DA4  E301               	bnc	u6241
  1872  001DA6  8038               	bsf	(??___ftdiv+1)& (0+255),0,c
  1873  001DA8                     u6241:
  1874  001DA8  5037               	movf	??___ftdiv,w,c
  1875  001DAA  6E3F               	movwf	___ftdiv@sign,c
  1876  001DAC  503F               	movf	___ftdiv@sign,w,c
  1877  001DAE  A4D8               	btfss	status,2,c
  1878  001DB0  D007               	goto	l777
  1879  001DB2  0E00               	movlw	0
  1880  001DB4  6E31               	movwf	?___ftdiv,c
  1881  001DB6  0E00               	movlw	0
  1882  001DB8  6E32               	movwf	?___ftdiv+1,c
  1883  001DBA  0E00               	movlw	0
  1884  001DBC  6E33               	movwf	?___ftdiv+2,c
  1885  001DBE  0012               	return	
  1886  001DC0                     l777:
  1887  001DC0  0E00               	movlw	0
  1888  001DC2  6E3B               	movwf	___ftdiv@f3,c
  1889  001DC4  0E00               	movlw	0
  1890  001DC6  6E3C               	movwf	___ftdiv@f3+1,c
  1891  001DC8  0E00               	movlw	0
  1892  001DCA  6E3D               	movwf	___ftdiv@f3+2,c
  1893  001DCC  503F               	movf	___ftdiv@sign,w,c
  1894  001DCE  0F89               	addlw	137
  1895  001DD0  5E3E               	subwf	___ftdiv@exp,f,c
  1896  001DD2  C033  F03F         	movff	___ftdiv@f1+2,___ftdiv@sign
  1897  001DD6  5036               	movf	___ftdiv@f2+2,w,c
  1898  001DD8  1A3F               	xorwf	___ftdiv@sign,f,c
  1899  001DDA  0E80               	movlw	128
  1900  001DDC  163F               	andwf	___ftdiv@sign,f,c
  1901  001DDE  8E32               	bsf	___ftdiv@f1+1,7,c
  1902  001DE0  0EFF               	movlw	255
  1903  001DE2  1631               	andwf	___ftdiv@f1,f,c
  1904  001DE4  0EFF               	movlw	255
  1905  001DE6  1632               	andwf	___ftdiv@f1+1,f,c
  1906  001DE8  0E00               	movlw	0
  1907  001DEA  1633               	andwf	___ftdiv@f1+2,f,c
  1908  001DEC  8E35               	bsf	___ftdiv@f2+1,7,c
  1909  001DEE  0EFF               	movlw	255
  1910  001DF0  1634               	andwf	___ftdiv@f2,f,c
  1911  001DF2  0EFF               	movlw	255
  1912  001DF4  1635               	andwf	___ftdiv@f2+1,f,c
  1913  001DF6  0E00               	movlw	0
  1914  001DF8  1636               	andwf	___ftdiv@f2+2,f,c
  1915  001DFA  0E18               	movlw	24
  1916  001DFC  6E3A               	movwf	___ftdiv@cntr,c
  1917  001DFE  90D8               	bcf	status,0,c
  1918  001E00  363B               	rlcf	___ftdiv@f3,f,c
  1919  001E02  363C               	rlcf	___ftdiv@f3+1,f,c
  1920  001E04  363D               	rlcf	___ftdiv@f3+2,f,c
  1921  001E06  5034               	movf	___ftdiv@f2,w,c
  1922  001E08  5C31               	subwf	___ftdiv@f1,w,c
  1923  001E0A  5035               	movf	___ftdiv@f2+1,w,c
  1924  001E0C  5832               	subwfb	___ftdiv@f1+1,w,c
  1925  001E0E  5036               	movf	___ftdiv@f2+2,w,c
  1926  001E10  5833               	subwfb	___ftdiv@f1+2,w,c
  1927  001E12  A0D8               	btfss	status,0,c
  1928  001E14  D007               	goto	l779
  1929  001E16  5034               	movf	___ftdiv@f2,w,c
  1930  001E18  5E31               	subwf	___ftdiv@f1,f,c
  1931  001E1A  5035               	movf	___ftdiv@f2+1,w,c
  1932  001E1C  5A32               	subwfb	___ftdiv@f1+1,f,c
  1933  001E1E  5036               	movf	___ftdiv@f2+2,w,c
  1934  001E20  5A33               	subwfb	___ftdiv@f1+2,f,c
  1935  001E22  803B               	bsf	___ftdiv@f3,0,c
  1936  001E24                     l779:
  1937  001E24  90D8               	bcf	status,0,c
  1938  001E26  3631               	rlcf	___ftdiv@f1,f,c
  1939  001E28  3632               	rlcf	___ftdiv@f1+1,f,c
  1940  001E2A  3633               	rlcf	___ftdiv@f1+2,f,c
  1941  001E2C  2E3A               	decfsz	___ftdiv@cntr,f,c
  1942  001E2E  D7E7               	goto	l778
  1943  001E30  C03B  F019         	movff	___ftdiv@f3,___ftpack@arg
  1944  001E34  C03C  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
  1945  001E38  C03D  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
  1946  001E3C  C03E  F01C         	movff	___ftdiv@exp,___ftpack@exp
  1947  001E40  C03F  F01D         	movff	___ftdiv@sign,___ftpack@sign
  1948  001E44  EC2B  F00F         	call	___ftpack	;wreg free
  1949  001E48  C019  F031         	movff	?___ftpack,?___ftdiv
  1950  001E4C  C01A  F032         	movff	?___ftpack+1,?___ftdiv+1
  1951  001E50  C01B  F033         	movff	?___ftpack+2,?___ftdiv+2
  1952  001E54  0012               	return	
  1953  001E56                     __end_of___ftdiv:
  1954                           	opt stack 0
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           postinc0	equ	0xFEE
  1960                           wreg	equ	0xFE8
  1961                           postdec1	equ	0xFE5
  1962                           fsr1l	equ	0xFE1
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function ___awtoft *****************
  1966 ;; Defined at:
  1967 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  c               2   44[COMRAM] int 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  sign            1   47[COMRAM] unsigned char 
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  3   44[COMRAM] float 
  1974 ;; Registers used:
  1975 ;;		wreg, status,2, status,0, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1981 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;Total ram usage:        4 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    3
  1988 ;; This function calls:
  1989 ;;		___ftpack
  1990 ;; This function is called by:
  1991 ;;		_read_adc_voltage
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text7
  1996  0025A0                     __ptext7:
  1997                           	opt stack 0
  1998  0025A0                     ___awtoft:
  1999                           	opt stack 26
  2000                           
  2001                           ;incstack = 0
  2002  0025A0  0E00               	movlw	0
  2003  0025A2  6E30               	movwf	___awtoft@sign,c
  2004  0025A4  AE2E               	btfss	___awtoft@c+1,7,c
  2005  0025A6  D006               	goto	l675
  2006  0025A8  6C2D               	negf	___awtoft@c,c
  2007  0025AA  1E2E               	comf	___awtoft@c+1,f,c
  2008  0025AC  B0D8               	btfsc	status,0,c
  2009  0025AE  2A2E               	incf	___awtoft@c+1,f,c
  2010  0025B0  0E01               	movlw	1
  2011  0025B2  6E30               	movwf	___awtoft@sign,c
  2012  0025B4                     l675:
  2013  0025B4  C02D  F019         	movff	___awtoft@c,___ftpack@arg
  2014  0025B8  C02E  F01A         	movff	___awtoft@c+1,___ftpack@arg+1
  2015  0025BC  6A1B               	clrf	___ftpack@arg+2,c
  2016  0025BE  0E8E               	movlw	142
  2017  0025C0  6E1C               	movwf	___ftpack@exp,c
  2018  0025C2  C030  F01D         	movff	___awtoft@sign,___ftpack@sign
  2019  0025C6  EC2B  F00F         	call	___ftpack	;wreg free
  2020  0025CA  C019  F02D         	movff	?___ftpack,?___awtoft
  2021  0025CE  C01A  F02E         	movff	?___ftpack+1,?___awtoft+1
  2022  0025D2  C01B  F02F         	movff	?___ftpack+2,?___awtoft+2
  2023  0025D6  0012               	return	
  2024  0025D8                     __end_of___awtoft:
  2025                           	opt stack 0
  2026                           tblptru	equ	0xFF8
  2027                           tblptrh	equ	0xFF7
  2028                           tblptrl	equ	0xFF6
  2029                           tablat	equ	0xFF5
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           postdec1	equ	0xFE5
  2033                           fsr1l	equ	0xFE1
  2034                           status	equ	0xFD8
  2035                           
  2036 ;; *************** function _lcd_init *****************
  2037 ;; Defined at:
  2038 ;;		line 56 in file "lcd_x8.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;		None
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  i               1   34[COMRAM] unsigned char 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      void 
  2045 ;; Registers used:
  2046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2053 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2055 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;Total ram usage:        1 bytes
  2057 ;; Hardware stack levels used:    1
  2058 ;; Hardware stack levels required when called:    5
  2059 ;; This function calls:
  2060 ;;		_delay_ms
  2061 ;;		_lcd_send_byte
  2062 ;;		_lcd_send_nibble
  2063 ;; This function is called by:
  2064 ;;		_main
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           	psect	text8
  2069  002246                     __ptext8:
  2070                           	opt stack 0
  2071  002246                     _lcd_init:
  2072                           	opt stack 25
  2073                           
  2074                           ;lcd_x8.c: 58: unsigned char i;
  2075                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  2076                           
  2077                           ;incstack = 0
  2078  002246  9484               	bcf	3972,2,c	;volatile
  2079                           
  2080                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  2081  002248  9284               	bcf	3972,1,c	;volatile
  2082                           
  2083                           ;lcd_x8.c: 65: delay_ms(25);
  2084  00224A  0E00               	movlw	0
  2085  00224C  6E1A               	movwf	delay_ms@n+1,c
  2086  00224E  0E19               	movlw	25
  2087  002250  6E19               	movwf	delay_ms@n,c
  2088  002252  EC2F  F013         	call	_delay_ms	;wreg free
  2089                           
  2090                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  2091  002256  0E01               	movlw	1
  2092  002258  6E23               	movwf	lcd_init@i,c
  2093  00225A                     l3914:
  2094  00225A  0E03               	movlw	3
  2095  00225C  6423               	cpfsgt	lcd_init@i,c
  2096  00225E  D001               	goto	l274
  2097  002260  D00B               	goto	u4390
  2098  002262                     l274:
  2099                           
  2100                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  2101  002262  0E03               	movlw	3
  2102  002264  EC77  F013         	call	_lcd_send_nibble
  2103                           
  2104                           ;lcd_x8.c: 69: delay_ms(6);
  2105  002268  0E00               	movlw	0
  2106  00226A  6E1A               	movwf	delay_ms@n+1,c
  2107  00226C  0E06               	movlw	6
  2108  00226E  6E19               	movwf	delay_ms@n,c
  2109  002270  EC2F  F013         	call	_delay_ms	;wreg free
  2110  002274  2A23               	incf	lcd_init@i,f,c
  2111  002276  D7F1               	goto	l3914
  2112  002278                     u4390:
  2113                           
  2114                           ;lcd_x8.c: 70: }
  2115                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  2116  002278  0E02               	movlw	2
  2117  00227A  EC77  F013         	call	_lcd_send_nibble
  2118                           
  2119                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  2120  00227E  0E00               	movlw	0
  2121  002280  6E23               	movwf	lcd_init@i,c
  2122  002282                     l3928:
  2123  002282  0E03               	movlw	3
  2124  002284  6423               	cpfsgt	lcd_init@i,c
  2125  002286  D001               	goto	l276
  2126  002288  0012               	return	
  2127  00228A                     l276:
  2128                           
  2129                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2130  00228A  5023               	movf	lcd_init@i,w,c
  2131  00228C  0D01               	mullw	1
  2132  00228E  0E62               	movlw	low _LCD_INIT_STRING
  2133  002290  24F3               	addwf	prodl,w,c
  2134  002292  6ED9               	movwf	fsr2l,c
  2135  002294  0E00               	movlw	high _LCD_INIT_STRING
  2136  002296  20F4               	addwfc	prodh,w,c
  2137  002298  6EDA               	movwf	fsr2h,c
  2138  00229A  50DF               	movf	indf2,w,c
  2139  00229C  6E21               	movwf	lcd_send_byte@n,c
  2140  00229E  0E00               	movlw	0
  2141  0022A0  EC2D  F012         	call	_lcd_send_byte
  2142  0022A4  2A23               	incf	lcd_init@i,f,c
  2143  0022A6  D7ED               	goto	l3928
  2144  0022A8                     __end_of_lcd_init:
  2145                           	opt stack 0
  2146                           tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           prodh	equ	0xFF4
  2151                           prodl	equ	0xFF3
  2152                           postinc0	equ	0xFEE
  2153                           wreg	equ	0xFE8
  2154                           postdec1	equ	0xFE5
  2155                           fsr1l	equ	0xFE1
  2156                           indf2	equ	0xFDF
  2157                           fsr2h	equ	0xFDA
  2158                           fsr2l	equ	0xFD9
  2159                           status	equ	0xFD8
  2160                           
  2161 ;; *************** function _init_timer0 *****************
  2162 ;; Defined at:
  2163 ;;		line 182 in file "HM1.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;Total ram usage:        0 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    2
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text9
  2192  00272E                     __ptext9:
  2193                           	opt stack 0
  2194  00272E                     _init_timer0:
  2195                           	opt stack 28
  2196                           
  2197                           ;HM1.c: 183: T0CON = 0x87;
  2198                           
  2199                           ;incstack = 0
  2200  00272E  0E87               	movlw	135
  2201  002730  6ED5               	movwf	4053,c	;volatile
  2202                           
  2203                           ;HM1.c: 187: T0CON = 0x85;
  2204  002732  0E85               	movlw	133
  2205  002734  6ED5               	movwf	4053,c	;volatile
  2206                           
  2207                           ;HM1.c: 189: TMR0 = 45536;
  2208  002736  0EB1               	movlw	177
  2209  002738  6ED7               	movwf	4055,c	;volatile
  2210  00273A  0EE0               	movlw	224
  2211  00273C  6ED6               	movwf	4054,c	;volatile
  2212                           
  2213                           ;HM1.c: 190: TMR0IE = 1;
  2214  00273E  8AF2               	bsf	intcon,5,c	;volatile
  2215                           
  2216                           ;HM1.c: 191: GIE = 1;
  2217  002740  8EF2               	bsf	intcon,7,c	;volatile
  2218                           
  2219                           ;HM1.c: 192: PEIE = 1;
  2220  002742  8CF2               	bsf	intcon,6,c	;volatile
  2221  002744  0012               	return		;funcret
  2222  002746                     __end_of_init_timer0:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           prodh	equ	0xFF4
  2229                           prodl	equ	0xFF3
  2230                           intcon	equ	0xFF2
  2231                           postinc0	equ	0xFEE
  2232                           wreg	equ	0xFE8
  2233                           postdec1	equ	0xFE5
  2234                           fsr1l	equ	0xFE1
  2235                           indf2	equ	0xFDF
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _init_adc_no_lib *****************
  2241 ;; Defined at:
  2242 ;;		line 11 in file "my_adc.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;		None
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;		None
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      void 
  2249 ;; Registers used:
  2250 ;;		wreg, status,2
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;Total ram usage:        0 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    2
  2263 ;; This function calls:
  2264 ;;		Nothing
  2265 ;; This function is called by:
  2266 ;;		_main
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text10
  2271  002794                     __ptext10:
  2272                           	opt stack 0
  2273  002794                     _init_adc_no_lib:
  2274                           	opt stack 28
  2275                           
  2276                           ;my_adc.c: 14: ADCON0 = 0;
  2277                           
  2278                           ;incstack = 0
  2279  002794  0E00               	movlw	0
  2280  002796  6EC2               	movwf	4034,c	;volatile
  2281                           
  2282                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  2283  002798  80C2               	bsf	4034,0,c	;volatile
  2284                           
  2285                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  2286  00279A  0E89               	movlw	137
  2287  00279C  6EC0               	movwf	4032,c	;volatile
  2288  00279E  0012               	return		;funcret
  2289  0027A0                     __end_of_init_adc_no_lib:
  2290                           	opt stack 0
  2291                           tblptru	equ	0xFF8
  2292                           tblptrh	equ	0xFF7
  2293                           tblptrl	equ	0xFF6
  2294                           tablat	equ	0xFF5
  2295                           prodh	equ	0xFF4
  2296                           prodl	equ	0xFF3
  2297                           intcon	equ	0xFF2
  2298                           postinc0	equ	0xFEE
  2299                           wreg	equ	0xFE8
  2300                           postdec1	equ	0xFE5
  2301                           fsr1l	equ	0xFE1
  2302                           indf2	equ	0xFDF
  2303                           fsr2h	equ	0xFDA
  2304                           fsr2l	equ	0xFD9
  2305                           status	equ	0xFD8
  2306                           
  2307 ;; *************** function _handle_uart *****************
  2308 ;; Defined at:
  2309 ;;		line 204 in file "HM1.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  s2              1   24[BANK1 ] unsigned char 
  2314 ;;  s1              1   23[BANK1 ] unsigned char 
  2315 ;;  m2              1   22[BANK1 ] unsigned char 
  2316 ;;  m1              1   21[BANK1 ] unsigned char 
  2317 ;;  h2              1   20[BANK1 ] unsigned char 
  2318 ;;  h1              1   19[BANK1 ] unsigned char 
  2319 ;;  c2              1    1[BANK1 ] unsigned char 
  2320 ;;  c1              1    0[BANK1 ] unsigned char 
  2321 ;;  buffer         16    2[BANK1 ] unsigned char [16]
  2322 ;;  cmd             1   18[BANK1 ] unsigned char 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;      Locals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Totals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;Total ram usage:       29 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    6
  2339 ;; This function calls:
  2340 ;;		_is_byte_available
  2341 ;;		_read_byte_no_lib
  2342 ;;		_send_string_no_lib
  2343 ;;		_sprintf
  2344 ;;		_wait_for_byte
  2345 ;; This function is called by:
  2346 ;;		_main
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           	psect	text11
  2351  001278                     __ptext11:
  2352                           	opt stack 0
  2353  001278                     _handle_uart:
  2354                           	opt stack 24
  2355                           
  2356                           ;HM1.c: 205: if (is_byte_available()) {
  2357                           
  2358                           ;incstack = 0
  2359  001278  ECA3  F013         	call	_is_byte_available	;wreg free
  2360  00127C  0900               	iorlw	0
  2361  00127E  B4D8               	btfsc	status,2,c
  2362  001280  0012               	return	
  2363                           
  2364                           ;HM1.c: 206: unsigned char cmd = read_byte_no_lib();
  2365  001282  ECD0  F013         	call	_read_byte_no_lib	;wreg free
  2366  001286  0101               	movlb	1	; () banked
  2367  001288  6F12               	movwf	handle_uart@cmd& (0+255),b
  2368                           
  2369                           ;HM1.c: 207: char buffer[16];
  2370                           ;HM1.c: 208: switch (cmd) {
  2371  00128A  D0C1               	goto	l119
  2372  00128C                     
  2373                           ; BSR set to: 1
  2374                           ;HM1.c: 210: sprintf(buffer, "\n%02u:%02u:%02u", hours, minutes, seconds);
  2375                           
  2376                           ; BSR set to: 1
  2377  00128C  0E02               	movlw	low handle_uart@buffer
  2378  00128E  0100               	movlb	0	; () banked
  2379  001290  6F96               	movwf	sprintf@sp& (0+255),b
  2380  001292  0E01               	movlw	high handle_uart@buffer
  2381  001294  6F97               	movwf	(sprintf@sp+1)& (0+255),b
  2382  001296  0E8B               	movlw	low STR_1
  2383  001298  6F98               	movwf	sprintf@f& (0+255),b
  2384  00129A  0EFF               	movlw	high STR_1
  2385  00129C  6F99               	movwf	(sprintf@f+1)& (0+255),b
  2386  00129E  C05F  F09A         	movff	_hours,?_sprintf+4	;volatile
  2387  0012A2  6B9B               	clrf	(?_sprintf+5)& (0+255),b
  2388  0012A4  C060  F09C         	movff	_minutes,?_sprintf+6	;volatile
  2389  0012A8  6B9D               	clrf	(?_sprintf+7)& (0+255),b
  2390  0012AA  C061  F09E         	movff	_seconds,?_sprintf+8	;volatile
  2391  0012AE  6B9F               	clrf	(?_sprintf+9)& (0+255),b
  2392  0012B0  EC09  F000         	call	_sprintf	;wreg free
  2393                           
  2394                           ;HM1.c: 211: send_string_no_lib((const unsigned char *)buffer);
  2395  0012B4  0E02               	movlw	low handle_uart@buffer
  2396  0012B6  6E1A               	movwf	send_string_no_lib@p,c
  2397  0012B8  0E01               	movlw	high handle_uart@buffer
  2398  0012BA  6E1B               	movwf	send_string_no_lib@p+1,c
  2399  0012BC  EC82  F011         	call	_send_string_no_lib	;wreg free
  2400                           
  2401                           ;HM1.c: 212: break;
  2402  0012C0  0012               	return	
  2403  0012C2                     
  2404                           ;HM1.c: 215: sprintf(buffer, "\nT: %.1f", temperature);
  2405  0012C2  0E02               	movlw	low handle_uart@buffer
  2406  0012C4  0100               	movlb	0	; () banked
  2407  0012C6  6F96               	movwf	sprintf@sp& (0+255),b
  2408  0012C8  0E01               	movlw	high handle_uart@buffer
  2409  0012CA  6F97               	movwf	(sprintf@sp+1)& (0+255),b
  2410  0012CC  0EE4               	movlw	low STR_2
  2411  0012CE  6F98               	movwf	sprintf@f& (0+255),b
  2412  0012D0  0EFF               	movlw	high STR_2
  2413  0012D2  6F99               	movwf	(sprintf@f+1)& (0+255),b
  2414  0012D4  C0CA  F09A         	movff	_temperature,?_sprintf+4
  2415  0012D8  C0CB  F09B         	movff	_temperature+1,?_sprintf+5
  2416  0012DC  C0CC  F09C         	movff	_temperature+2,?_sprintf+6
  2417  0012E0  EC09  F000         	call	_sprintf	;wreg free
  2418                           
  2419                           ;HM1.c: 216: send_string_no_lib((const unsigned char *)buffer);
  2420  0012E4  0E02               	movlw	low handle_uart@buffer
  2421  0012E6  6E1A               	movwf	send_string_no_lib@p,c
  2422  0012E8  0E01               	movlw	high handle_uart@buffer
  2423  0012EA  6E1B               	movwf	send_string_no_lib@p+1,c
  2424  0012EC  EC82  F011         	call	_send_string_no_lib	;wreg free
  2425                           
  2426                           ;HM1.c: 217: break;
  2427  0012F0  0012               	return	
  2428  0012F2                     l123:
  2429                           
  2430                           ; BSR set to: 1
  2431                           ;HM1.c: 220: sprintf(buffer, "\nHeater: %s\nCooler: %s", heater_status ? "ON" : "OFF", c
      +                          ooler_status ? "ON" : "OFF");
  2432  0012F2  B066               	btfsc	_cooler_status/(0+8),_cooler_status& (0+7),c
  2433  0012F4  D004               	goto	l125
  2434                           
  2435                           ; BSR set to: 1
  2436  0012F6  0EF8               	movlw	low STR_5
  2437  0012F8  6F19               	movwf	_handle_uart$142& (0+255),b
  2438  0012FA  0EFF               	movlw	high STR_5
  2439  0012FC  D003               	goto	L1
  2440  0012FE                     l125:
  2441                           
  2442                           ; BSR set to: 1
  2443                           
  2444                           ; BSR set to: 1
  2445  0012FE  0EFC               	movlw	low STR_4
  2446  001300  6F19               	movwf	_handle_uart$142& (0+255),b
  2447  001302  0EFF               	movlw	high STR_4
  2448  001304                     L1:
  2449  001304  6F1A               	movwf	(_handle_uart$142+1)& (0+255),b
  2450                           
  2451                           ; BSR set to: 1
  2452                           
  2453                           ; BSR set to: 1
  2454  001306  B266               	btfsc	_heater_status/(0+8),_heater_status& (0+7),c
  2455  001308  D004               	goto	l129
  2456                           
  2457                           ; BSR set to: 1
  2458  00130A  0EF8               	movlw	low STR_5
  2459  00130C  6F1B               	movwf	_handle_uart$143& (0+255),b
  2460  00130E  0EFF               	movlw	high STR_5
  2461  001310  D003               	goto	L2
  2462  001312                     l129:
  2463                           
  2464                           ; BSR set to: 1
  2465                           
  2466                           ; BSR set to: 1
  2467  001312  0EFC               	movlw	low STR_4
  2468  001314  6F1B               	movwf	_handle_uart$143& (0+255),b
  2469  001316  0EFF               	movlw	high STR_4
  2470  001318                     L2:
  2471  001318  6F1C               	movwf	(_handle_uart$143+1)& (0+255),b
  2472                           
  2473                           ; BSR set to: 1
  2474                           
  2475                           ; BSR set to: 1
  2476  00131A  0E02               	movlw	low handle_uart@buffer
  2477  00131C  0100               	movlb	0	; () banked
  2478  00131E  6F96               	movwf	sprintf@sp& (0+255),b
  2479  001320  0E01               	movlw	high handle_uart@buffer
  2480  001322  6F97               	movwf	(sprintf@sp+1)& (0+255),b
  2481  001324  0E63               	movlw	low STR_3
  2482  001326  6F98               	movwf	sprintf@f& (0+255),b
  2483  001328  0EFF               	movlw	high STR_3
  2484  00132A  6F99               	movwf	(sprintf@f+1)& (0+255),b
  2485  00132C  C11B  F09A         	movff	_handle_uart$143,?_sprintf+4
  2486  001330  C11C  F09B         	movff	_handle_uart$143+1,?_sprintf+5
  2487  001334  C119  F09C         	movff	_handle_uart$142,?_sprintf+6
  2488  001338  C11A  F09D         	movff	_handle_uart$142+1,?_sprintf+7
  2489  00133C  EC09  F000         	call	_sprintf	;wreg free
  2490                           
  2491                           ;HM1.c: 221: send_string_no_lib((const unsigned char *)buffer);
  2492  001340  0E02               	movlw	low handle_uart@buffer
  2493  001342  6E1A               	movwf	send_string_no_lib@p,c
  2494  001344  0E01               	movlw	high handle_uart@buffer
  2495  001346  6E1B               	movwf	send_string_no_lib@p+1,c
  2496  001348  EC82  F011         	call	_send_string_no_lib	;wreg free
  2497                           
  2498                           ;HM1.c: 222: break;
  2499  00134C  0012               	return	
  2500  00134E                     
  2501                           ;HM1.c: 225: {
  2502                           ;HM1.c: 226: unsigned char h1, h2, m1, m2, s1, s2,c1,c2;
  2503                           ;HM1.c: 230: h1 = wait_for_byte() - '0';
  2504  00134E  ECBA  F013         	call	_wait_for_byte	;wreg free
  2505  001352  0FD0               	addlw	208
  2506  001354  0101               	movlb	1	; () banked
  2507  001356  6F13               	movwf	handle_uart@h1& (0+255),b
  2508                           
  2509                           ;HM1.c: 231: h2 = wait_for_byte() - '0';
  2510  001358  ECBA  F013         	call	_wait_for_byte	;wreg free
  2511  00135C  0FD0               	addlw	208
  2512  00135E  0101               	movlb	1	; () banked
  2513  001360  6F14               	movwf	handle_uart@h2& (0+255),b
  2514                           
  2515                           ; BSR set to: 1
  2516                           ;HM1.c: 235: c1=wait_for_byte();
  2517  001362  ECBA  F013         	call	_wait_for_byte	;wreg free
  2518  001366  0101               	movlb	1	; () banked
  2519  001368  6F00               	movwf	handle_uart@c1& (0+255),b
  2520                           
  2521                           ; BSR set to: 1
  2522                           ;HM1.c: 240: m1 = wait_for_byte() - '0';
  2523  00136A  ECBA  F013         	call	_wait_for_byte	;wreg free
  2524  00136E  0FD0               	addlw	208
  2525  001370  0101               	movlb	1	; () banked
  2526  001372  6F15               	movwf	handle_uart@m1& (0+255),b
  2527                           
  2528                           ; BSR set to: 1
  2529                           ;HM1.c: 241: m2 = wait_for_byte() - '0';
  2530  001374  ECBA  F013         	call	_wait_for_byte	;wreg free
  2531  001378  0FD0               	addlw	208
  2532  00137A  0101               	movlb	1	; () banked
  2533  00137C  6F16               	movwf	handle_uart@m2& (0+255),b
  2534                           
  2535                           ; BSR set to: 1
  2536                           ;HM1.c: 245: c2=wait_for_byte();
  2537  00137E  ECBA  F013         	call	_wait_for_byte	;wreg free
  2538  001382  0101               	movlb	1	; () banked
  2539  001384  6F01               	movwf	handle_uart@c2& (0+255),b
  2540                           
  2541                           ;HM1.c: 250: s1 = wait_for_byte() - '0';
  2542  001386  ECBA  F013         	call	_wait_for_byte	;wreg free
  2543  00138A  0FD0               	addlw	208
  2544  00138C  0101               	movlb	1	; () banked
  2545  00138E  6F17               	movwf	handle_uart@s1& (0+255),b
  2546                           
  2547                           ;HM1.c: 251: s2 = wait_for_byte() - '0';
  2548  001390  ECBA  F013         	call	_wait_for_byte	;wreg free
  2549  001394  0FD0               	addlw	208
  2550  001396  0101               	movlb	1	; () banked
  2551  001398  6F18               	movwf	handle_uart@s2& (0+255),b
  2552                           
  2553                           ; BSR set to: 1
  2554                           ;HM1.c: 254: hours = h1 * 10 + h2;
  2555  00139A  5113               	movf	handle_uart@h1& (0+255),w,b
  2556  00139C  0D0A               	mullw	10
  2557  00139E  50F3               	movf	prodl,w,c
  2558  0013A0  2514               	addwf	handle_uart@h2& (0+255),w,b
  2559  0013A2  6E5F               	movwf	_hours,c	;volatile
  2560                           
  2561                           ; BSR set to: 1
  2562                           ;HM1.c: 255: minutes = m1 * 10 + m2;
  2563  0013A4  5115               	movf	handle_uart@m1& (0+255),w,b
  2564  0013A6  0D0A               	mullw	10
  2565  0013A8  50F3               	movf	prodl,w,c
  2566  0013AA  2516               	addwf	handle_uart@m2& (0+255),w,b
  2567  0013AC  6E60               	movwf	_minutes,c	;volatile
  2568                           
  2569                           ; BSR set to: 1
  2570                           ;HM1.c: 256: seconds = s1 * 10 + s2;
  2571  0013AE  5117               	movf	handle_uart@s1& (0+255),w,b
  2572  0013B0  0D0A               	mullw	10
  2573  0013B2  50F3               	movf	prodl,w,c
  2574  0013B4  2518               	addwf	handle_uart@s2& (0+255),w,b
  2575  0013B6  6E61               	movwf	_seconds,c	;volatile
  2576                           
  2577                           ; BSR set to: 1
  2578                           ;HM1.c: 259: if (hours < 24 && minutes < 60 && seconds < 60) {
  2579  0013B8  0E18               	movlw	24
  2580  0013BA  605F               	cpfslt	_hours,c	;volatile
  2581  0013BC  D021               	goto	l133
  2582                           
  2583                           ; BSR set to: 1
  2584  0013BE  0E3C               	movlw	60
  2585  0013C0  6060               	cpfslt	_minutes,c	;volatile
  2586  0013C2  D01E               	goto	l133
  2587                           
  2588                           ; BSR set to: 1
  2589  0013C4  0E3C               	movlw	60
  2590  0013C6  6061               	cpfslt	_seconds,c	;volatile
  2591  0013C8  D01B               	goto	l133
  2592                           
  2593                           ; BSR set to: 1
  2594                           ;HM1.c: 260: sprintf(buffer, "\nTime Set: %02u:%02u:%02u", hours, minutes, seconds);
  2595  0013CA  0E02               	movlw	low handle_uart@buffer
  2596  0013CC  0100               	movlb	0	; () banked
  2597  0013CE  6F96               	movwf	sprintf@sp& (0+255),b
  2598  0013D0  0E01               	movlw	high handle_uart@buffer
  2599  0013D2  6F97               	movwf	(sprintf@sp+1)& (0+255),b
  2600  0013D4  0E19               	movlw	low STR_8
  2601  0013D6  6F98               	movwf	sprintf@f& (0+255),b
  2602  0013D8  0EFF               	movlw	high STR_8
  2603  0013DA  6F99               	movwf	(sprintf@f+1)& (0+255),b
  2604  0013DC  C05F  F09A         	movff	_hours,?_sprintf+4	;volatile
  2605  0013E0  6B9B               	clrf	(?_sprintf+5)& (0+255),b
  2606  0013E2  C060  F09C         	movff	_minutes,?_sprintf+6	;volatile
  2607  0013E6  6B9D               	clrf	(?_sprintf+7)& (0+255),b
  2608  0013E8  C061  F09E         	movff	_seconds,?_sprintf+8	;volatile
  2609  0013EC  6B9F               	clrf	(?_sprintf+9)& (0+255),b
  2610  0013EE  EC09  F000         	call	_sprintf	;wreg free
  2611                           
  2612                           ;HM1.c: 261: send_string_no_lib((const unsigned char *)buffer);
  2613  0013F2  0E02               	movlw	low handle_uart@buffer
  2614  0013F4  6E1A               	movwf	send_string_no_lib@p,c
  2615  0013F6  0E01               	movlw	high handle_uart@buffer
  2616  0013F8  6E1B               	movwf	send_string_no_lib@p+1,c
  2617  0013FA  EC82  F011         	call	_send_string_no_lib	;wreg free
  2618                           
  2619                           ;HM1.c: 262: } else {
  2620  0013FE  0012               	return	
  2621  001400                     l133:
  2622                           
  2623                           ;HM1.c: 263: send_string_no_lib("\nInvalid time entered!\n");
  2624  001400  0E33               	movlw	low STR_9
  2625  001402  6E1A               	movwf	send_string_no_lib@p,c
  2626  001404  0EFF               	movlw	high STR_9
  2627  001406  6E1B               	movwf	send_string_no_lib@p+1,c
  2628  001408  EC82  F011         	call	_send_string_no_lib	;wreg free
  2629                           
  2630                           ;HM1.c: 270: }
  2631                           
  2632                           ;HM1.c: 269: break;
  2633                           
  2634                           ;HM1.c: 268: default:
  2635                           
  2636                           ;HM1.c: 264: }
  2637                           ;HM1.c: 265: }
  2638                           ;HM1.c: 266: break;
  2639  00140C  0012               	return	
  2640  00140E                     l119:
  2641  00140E  0101               	movlb	1	; () banked
  2642  001410  5112               	movf	handle_uart@cmd& (0+255),w,b
  2643                           
  2644                           ; Switch size 1, requested type "space"
  2645                           ; Number of cases is 4, Range of values is 84 to 119
  2646                           ; switch strategies available:
  2647                           ; Name         Instructions Cycles
  2648                           ; simple_byte           13     7 (average)
  2649                           ;	Chosen strategy is simple_byte
  2650  001412  0A54               	xorlw	84	; case 84
  2651  001414  B4D8               	btfsc	status,2,c
  2652  001416  D755               	goto	l122
  2653  001418  0A27               	xorlw	39	; case 115
  2654  00141A  B4D8               	btfsc	status,2,c
  2655  00141C  D76A               	goto	l123
  2656  00141E  0A07               	xorlw	7	; case 116
  2657  001420  B4D8               	btfsc	status,2,c
  2658  001422  D734               	goto	l120
  2659  001424  0A03               	xorlw	3	; case 119
  2660  001426  A4D8               	btfss	status,2,c
  2661                           
  2662                           ; BSR set to: 1
  2663  001428  0012               	return	
  2664  00142A  D791               	goto	l132
  2665  00142C                     __end_of_handle_uart:
  2666                           	opt stack 0
  2667                           tblptru	equ	0xFF8
  2668                           tblptrh	equ	0xFF7
  2669                           tblptrl	equ	0xFF6
  2670                           tablat	equ	0xFF5
  2671                           prodh	equ	0xFF4
  2672                           prodl	equ	0xFF3
  2673                           intcon	equ	0xFF2
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1l	equ	0xFE1
  2678                           indf2	equ	0xFDF
  2679                           fsr2h	equ	0xFDA
  2680                           fsr2l	equ	0xFD9
  2681                           status	equ	0xFD8
  2682                           
  2683 ;; *************** function _wait_for_byte *****************
  2684 ;; Defined at:
  2685 ;;		line 197 in file "HM1.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;		None
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;		None
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      unsigned char 
  2692 ;; Registers used:
  2693 ;;		wreg, status,2, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;Total ram usage:        0 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    3
  2706 ;; This function calls:
  2707 ;;		_is_byte_available
  2708 ;;		_read_byte_no_lib
  2709 ;; This function is called by:
  2710 ;;		_handle_uart
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text12
  2715  002774                     __ptext12:
  2716                           	opt stack 0
  2717  002774                     _wait_for_byte:
  2718                           	opt stack 26
  2719                           
  2720                           ;HM1.c: 198: while (!is_byte_available()) {
  2721                           
  2722                           ;incstack = 0
  2723  002774  ECA3  F013         	call	_is_byte_available	;wreg free
  2724  002778  0900               	iorlw	0
  2725  00277A  B4D8               	btfsc	status,2,c
  2726  00277C  D7FB               	goto	_wait_for_byte
  2727                           
  2728                           ;HM1.c: 200: }
  2729                           ;HM1.c: 201: return read_byte_no_lib();
  2730  00277E  ECD0  F013         	call	_read_byte_no_lib	;wreg free
  2731  002782  0012               	return	
  2732  002784                     __end_of_wait_for_byte:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           intcon	equ	0xFF2
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           postdec1	equ	0xFE5
  2744                           fsr1l	equ	0xFE1
  2745                           indf2	equ	0xFDF
  2746                           fsr2h	equ	0xFDA
  2747                           fsr2l	equ	0xFD9
  2748                           status	equ	0xFD8
  2749                           
  2750 ;; *************** function _read_byte_no_lib *****************
  2751 ;; Defined at:
  2752 ;;		line 33 in file "my_ser.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;		None
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  c               1   24[COMRAM] unsigned char 
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  1    wreg      unsigned char 
  2759 ;; Registers used:
  2760 ;;		wreg, status,2
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;Total ram usage:        1 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    2
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		_wait_for_byte
  2777 ;;		_handle_uart
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text13
  2782  0027A0                     __ptext13:
  2783                           	opt stack 0
  2784  0027A0                     _read_byte_no_lib:
  2785                           	opt stack 26
  2786                           
  2787                           ;my_ser.c: 34: unsigned char c;
  2788                           ;my_ser.c: 35: c = RCREG;
  2789                           
  2790                           ;incstack = 0
  2791  0027A0  CFAE F019          	movff	4014,read_byte_no_lib@c	;volatile
  2792                           
  2793                           ;my_ser.c: 36: return c;
  2794  0027A4  5019               	movf	read_byte_no_lib@c,w,c
  2795  0027A6  0012               	return	
  2796  0027A8                     __end_of_read_byte_no_lib:
  2797                           	opt stack 0
  2798                           tblptru	equ	0xFF8
  2799                           tblptrh	equ	0xFF7
  2800                           tblptrl	equ	0xFF6
  2801                           tablat	equ	0xFF5
  2802                           prodh	equ	0xFF4
  2803                           prodl	equ	0xFF3
  2804                           intcon	equ	0xFF2
  2805                           postinc0	equ	0xFEE
  2806                           wreg	equ	0xFE8
  2807                           postdec1	equ	0xFE5
  2808                           fsr1l	equ	0xFE1
  2809                           indf2	equ	0xFDF
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _is_byte_available *****************
  2815 ;; Defined at:
  2816 ;;		line 21 in file "my_ser.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;		None
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      unsigned char 
  2823 ;; Registers used:
  2824 ;;		wreg
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;Total ram usage:        0 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    2
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_wait_for_byte
  2841 ;;		_handle_uart
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text14
  2846  002746                     __ptext14:
  2847                           	opt stack 0
  2848  002746                     _is_byte_available:
  2849                           	opt stack 26
  2850                           
  2851                           ;my_ser.c: 23: if (RCSTAbits.FERR || RCSTAbits.OERR)
  2852                           
  2853                           ;incstack = 0
  2854  002746  B4AB               	btfsc	4011,2,c	;volatile
  2855  002748  D002               	goto	u5070
  2856  00274A  A2AB               	btfss	4011,1,c	;volatile
  2857  00274C  D002               	goto	l223
  2858  00274E                     u5070:
  2859                           
  2860                           ;my_ser.c: 24: {
  2861                           ;my_ser.c: 25: RCSTAbits.CREN = 0;
  2862  00274E  98AB               	bcf	4011,4,c	;volatile
  2863                           
  2864                           ;my_ser.c: 26: RCSTAbits.CREN = 1;
  2865  002750  88AB               	bsf	4011,4,c	;volatile
  2866  002752                     l223:
  2867                           
  2868                           ;my_ser.c: 27: }
  2869                           ;my_ser.c: 29: if (PIR1bits.RCIF) return 1;
  2870  002752  AA9E               	btfss	3998,5,c	;volatile
  2871  002754  D002               	goto	l226
  2872  002756  0E01               	movlw	1
  2873  002758  0012               	return	
  2874  00275A                     l226:
  2875                           
  2876                           ;my_ser.c: 30: else return 0;
  2877  00275A  0E00               	movlw	0
  2878  00275C  0012               	return	
  2879  00275E                     __end_of_is_byte_available:
  2880                           	opt stack 0
  2881                           tblptru	equ	0xFF8
  2882                           tblptrh	equ	0xFF7
  2883                           tblptrl	equ	0xFF6
  2884                           tablat	equ	0xFF5
  2885                           prodh	equ	0xFF4
  2886                           prodl	equ	0xFF3
  2887                           intcon	equ	0xFF2
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postdec1	equ	0xFE5
  2891                           fsr1l	equ	0xFE1
  2892                           indf2	equ	0xFDF
  2893                           fsr2h	equ	0xFDA
  2894                           fsr2l	equ	0xFD9
  2895                           status	equ	0xFD8
  2896                           
  2897 ;; *************** function _send_string_no_lib *****************
  2898 ;; Defined at:
  2899 ;;		line 47 in file "my_ser.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  p               2   25[COMRAM] PTR unsigned char 
  2902 ;;		 -> STR_9(24), handle_uart@buffer(16), 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;		None
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2914 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;Total ram usage:        2 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    3
  2921 ;; This function calls:
  2922 ;;		_send_byte_no_lib
  2923 ;; This function is called by:
  2924 ;;		_handle_uart
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text15
  2929  002304                     __ptext15:
  2930                           	opt stack 0
  2931  002304                     _send_string_no_lib:
  2932                           	opt stack 26
  2933                           
  2934                           ;my_ser.c: 48: while (*p) {
  2935                           
  2936                           ;incstack = 0
  2937  002304  D015               	goto	l240
  2938  002306                     
  2939                           ;my_ser.c: 49: send_byte_no_lib(*p);
  2940  002306  C01A  FFF6         	movff	send_string_no_lib@p,tblptrl
  2941  00230A  C01B  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  2942  00230E  0E00               	movlw	low (__mediumconst shr (0+16))
  2943  002310  6EF8               	movwf	tblptru,c
  2944  002312  0E0F               	movlw	(high __ramtop+-1)
  2945  002314  64F7               	cpfsgt	tblptrh,c
  2946  002316  D003               	bra	u6197
  2947  002318  0008               	tblrd		*
  2948  00231A  50F5               	movf	tablat,w,c
  2949  00231C  D005               	bra	u6190
  2950  00231E                     u6197:
  2951  00231E  CFF6 FFD9          	movff	tblptrl,fsr2l
  2952  002322  CFF7 FFDA          	movff	tblptrh,fsr2h
  2953  002326  50DF               	movf	indf2,w,c
  2954  002328                     u6190:
  2955  002328  ECC2  F013         	call	_send_byte_no_lib
  2956                           
  2957                           ;my_ser.c: 50: p++;
  2958  00232C  4A1A               	infsnz	send_string_no_lib@p,f,c
  2959  00232E  2A1B               	incf	send_string_no_lib@p+1,f,c
  2960  002330                     l240:
  2961  002330  C01A  FFF6         	movff	send_string_no_lib@p,tblptrl
  2962  002334  C01B  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  2963  002338  0E00               	movlw	low (__mediumconst shr (0+16))
  2964  00233A  6EF8               	movwf	tblptru,c
  2965  00233C  0E0F               	movlw	(high __ramtop+-1)
  2966  00233E  64F7               	cpfsgt	tblptrh,c
  2967  002340  D003               	bra	u6207
  2968  002342  0008               	tblrd		*
  2969  002344  50F5               	movf	tablat,w,c
  2970  002346  D005               	bra	u6200
  2971  002348                     u6207:
  2972  002348  CFF6 FFD9          	movff	tblptrl,fsr2l
  2973  00234C  CFF7 FFDA          	movff	tblptrh,fsr2h
  2974  002350  50DF               	movf	indf2,w,c
  2975  002352                     u6200:
  2976  002352  0900               	iorlw	0
  2977  002354  B4D8               	btfsc	status,2,c
  2978  002356  0012               	return	
  2979  002358  D7D6               	goto	l241
  2980  00235A                     __end_of_send_string_no_lib:
  2981                           	opt stack 0
  2982                           tblptru	equ	0xFF8
  2983                           tblptrh	equ	0xFF7
  2984                           tblptrl	equ	0xFF6
  2985                           tablat	equ	0xFF5
  2986                           prodh	equ	0xFF4
  2987                           prodl	equ	0xFF3
  2988                           intcon	equ	0xFF2
  2989                           postinc0	equ	0xFEE
  2990                           wreg	equ	0xFE8
  2991                           postdec1	equ	0xFE5
  2992                           fsr1l	equ	0xFE1
  2993                           indf2	equ	0xFDF
  2994                           fsr2h	equ	0xFDA
  2995                           fsr2l	equ	0xFD9
  2996                           status	equ	0xFD8
  2997                           
  2998 ;; *************** function _send_byte_no_lib *****************
  2999 ;; Defined at:
  3000 ;;		line 39 in file "my_ser.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  c               1    wreg     unsigned char 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  c               1   24[COMRAM] unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;Total ram usage:        1 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    2
  3021 ;; This function calls:
  3022 ;;		Nothing
  3023 ;; This function is called by:
  3024 ;;		_send_string_no_lib
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text16
  3029  002784                     __ptext16:
  3030                           	opt stack 0
  3031  002784                     _send_byte_no_lib:
  3032                           	opt stack 26
  3033                           
  3034                           ;incstack = 0
  3035                           ;send_byte_no_lib@c stored from wreg
  3036  002784  6E19               	movwf	send_byte_no_lib@c,c
  3037                           
  3038                           ;my_ser.c: 40: while (!TXSTAbits.TRMT)
  3039  002786  D001               	goto	l234
  3040  002788                     l235:
  3041  002788  0004               	clrwdt		;# 
  3042  00278A                     l234:
  3043  00278A  A2AC               	btfss	4012,1,c	;volatile
  3044  00278C  D7FD               	goto	l235
  3045                           
  3046                           ;my_ser.c: 43: }
  3047                           ;my_ser.c: 44: TXREG = c;
  3048  00278E  C019  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  3049  002792  0012               	return		;funcret
  3050  002794                     __end_of_send_byte_no_lib:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           prodh	equ	0xFF4
  3057                           prodl	equ	0xFF3
  3058                           intcon	equ	0xFF2
  3059                           postinc0	equ	0xFEE
  3060                           wreg	equ	0xFE8
  3061                           postdec1	equ	0xFE5
  3062                           fsr1l	equ	0xFE1
  3063                           indf2	equ	0xFDF
  3064                           fsr2h	equ	0xFDA
  3065                           fsr2l	equ	0xFD9
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _handle_buttons *****************
  3069 ;; Defined at:
  3070 ;;		line 292 in file "HM1.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;		None
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      void 
  3077 ;; Registers used:
  3078 ;;		wreg, status,2, status,0, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;Total ram usage:        8 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    3
  3091 ;; This function calls:
  3092 ;;		___awmod
  3093 ;; This function is called by:
  3094 ;;		_main
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text17
  3099  001834                     __ptext17:
  3100                           	opt stack 0
  3101  001834                     _handle_buttons:
  3102                           	opt stack 27
  3103                           
  3104                           ;HM1.c: 293: if (clockMode) {
  3105                           
  3106                           ;incstack = 0
  3107  001834  A466               	btfss	_clockMode/(0+8),_clockMode& (0+7),c	;volatile
  3108  001836  0012               	return	
  3109                           
  3110                           ;HM1.c: 294: if (RB5 == 0) {
  3111  001838  BA81               	btfsc	3969,5,c	;volatile
  3112  00183A  D042               	goto	l152
  3113                           
  3114                           ;HM1.c: 295: _delay((unsigned long)((200)*(4000000/4000.0)));
  3115  00183C  0E02               	movlw	2
  3116  00183E  6E20               	movwf	(??_handle_buttons+1)& (0+255),c
  3117  001840  0E04               	movlw	4
  3118  001842  6E1F               	movwf	??_handle_buttons& (0+255),c
  3119  001844  0EBA               	movlw	186
  3120  001846                     u6537:
  3121  001846  2EE8               	decfsz	wreg,f,c
  3122  001848  D7FE               	bra	u6537
  3123  00184A  2E1F               	decfsz	??_handle_buttons& (0+255),f,c
  3124  00184C  D7FC               	bra	u6537
  3125  00184E  2E20               	decfsz	(??_handle_buttons+1)& (0+255),f,c
  3126  001850  D7FA               	bra	u6537
  3127  001852  D000               	nop2	
  3128                           
  3129                           ;HM1.c: 296: if (setupSelect == 0) seconds = (seconds + 1) % 60;
  3130  001854  505E               	movf	_setupSelect,w,c	;volatile
  3131  001856  A4D8               	btfss	status,2,c
  3132  001858  D00F               	goto	l148
  3133  00185A  0E01               	movlw	1
  3134  00185C  2461               	addwf	_seconds,w,c	;volatile
  3135  00185E  6E19               	movwf	___awmod@dividend,c
  3136  001860  6A1A               	clrf	___awmod@dividend+1,c
  3137  001862  0E00               	movlw	0
  3138  001864  221A               	addwfc	___awmod@dividend+1,f,c
  3139  001866  0E00               	movlw	0
  3140  001868  6E1C               	movwf	___awmod@divisor+1,c
  3141  00186A  0E3C               	movlw	60
  3142  00186C  6E1B               	movwf	___awmod@divisor,c
  3143  00186E  EC4D  F010         	call	___awmod	;wreg free
  3144  001872  5019               	movf	?___awmod,w,c
  3145  001874  6E61               	movwf	_seconds,c	;volatile
  3146  001876  D024               	goto	l152
  3147  001878                     l148:
  3148                           
  3149                           ;HM1.c: 297: else if (setupSelect == 1) minutes = (minutes + 1) % 60;
  3150  001878  045E               	decf	_setupSelect,w,c	;volatile
  3151  00187A  A4D8               	btfss	status,2,c
  3152  00187C  D00F               	goto	l150
  3153  00187E  0E01               	movlw	1
  3154  001880  2460               	addwf	_minutes,w,c	;volatile
  3155  001882  6E19               	movwf	___awmod@dividend,c
  3156  001884  6A1A               	clrf	___awmod@dividend+1,c
  3157  001886  0E00               	movlw	0
  3158  001888  221A               	addwfc	___awmod@dividend+1,f,c
  3159  00188A  0E00               	movlw	0
  3160  00188C  6E1C               	movwf	___awmod@divisor+1,c
  3161  00188E  0E3C               	movlw	60
  3162  001890  6E1B               	movwf	___awmod@divisor,c
  3163  001892  EC4D  F010         	call	___awmod	;wreg free
  3164  001896  5019               	movf	?___awmod,w,c
  3165  001898  6E60               	movwf	_minutes,c	;volatile
  3166  00189A  D012               	goto	l152
  3167  00189C                     l150:
  3168                           
  3169                           ;HM1.c: 298: else if (setupSelect == 2) hours = (hours + 1) % 24;
  3170  00189C  0E02               	movlw	2
  3171  00189E  185E               	xorwf	_setupSelect,w,c	;volatile
  3172  0018A0  A4D8               	btfss	status,2,c
  3173  0018A2  D00E               	goto	l152
  3174  0018A4  0E01               	movlw	1
  3175  0018A6  245F               	addwf	_hours,w,c	;volatile
  3176  0018A8  6E19               	movwf	___awmod@dividend,c
  3177  0018AA  6A1A               	clrf	___awmod@dividend+1,c
  3178  0018AC  0E00               	movlw	0
  3179  0018AE  221A               	addwfc	___awmod@dividend+1,f,c
  3180  0018B0  0E00               	movlw	0
  3181  0018B2  6E1C               	movwf	___awmod@divisor+1,c
  3182  0018B4  0E18               	movlw	24
  3183  0018B6  6E1B               	movwf	___awmod@divisor,c
  3184  0018B8  EC4D  F010         	call	___awmod	;wreg free
  3185  0018BC  5019               	movf	?___awmod,w,c
  3186  0018BE  6E5F               	movwf	_hours,c	;volatile
  3187  0018C0                     l152:
  3188                           
  3189                           ;HM1.c: 299: }
  3190                           ;HM1.c: 300: if (RB3 == 0) {
  3191  0018C0  B681               	btfsc	3969,3,c	;volatile
  3192  0018C2  0012               	return	
  3193                           
  3194                           ;HM1.c: 301: _delay((unsigned long)((200)*(4000000/4000.0)));
  3195  0018C4  0E02               	movlw	2
  3196  0018C6  6E20               	movwf	(??_handle_buttons+1)& (0+255),c
  3197  0018C8  0E04               	movlw	4
  3198  0018CA  6E1F               	movwf	??_handle_buttons& (0+255),c
  3199  0018CC  0EBA               	movlw	186
  3200  0018CE                     u6547:
  3201  0018CE  2EE8               	decfsz	wreg,f,c
  3202  0018D0  D7FE               	bra	u6547
  3203  0018D2  2E1F               	decfsz	??_handle_buttons& (0+255),f,c
  3204  0018D4  D7FC               	bra	u6547
  3205  0018D6  2E20               	decfsz	(??_handle_buttons+1)& (0+255),f,c
  3206  0018D8  D7FA               	bra	u6547
  3207  0018DA  D000               	nop2	
  3208                           
  3209                           ;HM1.c: 302: if (setupSelect == 0) seconds = (seconds == 0) ? 59 : seconds - 1;
  3210  0018DC  505E               	movf	_setupSelect,w,c	;volatile
  3211  0018DE  A4D8               	btfss	status,2,c
  3212  0018E0  D011               	goto	l154
  3213  0018E2  5061               	movf	_seconds,w,c	;volatile
  3214  0018E4  B4D8               	btfsc	status,2,c
  3215  0018E6  D007               	goto	l156
  3216  0018E8  0EFF               	movlw	255
  3217  0018EA  2461               	addwf	_seconds,w,c	;volatile
  3218  0018EC  6E21               	movwf	_handle_buttons$158,c
  3219  0018EE  6A22               	clrf	_handle_buttons$158+1,c
  3220  0018F0  0EFF               	movlw	255
  3221  0018F2  2222               	addwfc	_handle_buttons$158+1,f,c
  3222  0018F4  D004               	goto	l158
  3223  0018F6                     l156:
  3224  0018F6  0E00               	movlw	0
  3225  0018F8  6E22               	movwf	_handle_buttons$158+1,c
  3226  0018FA  0E3B               	movlw	59
  3227  0018FC  6E21               	movwf	_handle_buttons$158,c
  3228  0018FE                     l158:
  3229  0018FE  C021  F061         	movff	_handle_buttons$158,_seconds	;volatile
  3230  001902  0012               	return	
  3231  001904                     l154:
  3232                           
  3233                           ;HM1.c: 303: else if (setupSelect == 1) minutes = (minutes == 0) ? 59 : minutes - 1;
  3234  001904  045E               	decf	_setupSelect,w,c	;volatile
  3235  001906  A4D8               	btfss	status,2,c
  3236  001908  D011               	goto	l160
  3237  00190A  5060               	movf	_minutes,w,c	;volatile
  3238  00190C  B4D8               	btfsc	status,2,c
  3239  00190E  D007               	goto	l162
  3240  001910  0EFF               	movlw	255
  3241  001912  2460               	addwf	_minutes,w,c	;volatile
  3242  001914  6E23               	movwf	_handle_buttons$159,c
  3243  001916  6A24               	clrf	_handle_buttons$159+1,c
  3244  001918  0EFF               	movlw	255
  3245  00191A  2224               	addwfc	_handle_buttons$159+1,f,c
  3246  00191C  D004               	goto	l164
  3247  00191E                     l162:
  3248  00191E  0E00               	movlw	0
  3249  001920  6E24               	movwf	_handle_buttons$159+1,c
  3250  001922  0E3B               	movlw	59
  3251  001924  6E23               	movwf	_handle_buttons$159,c
  3252  001926                     l164:
  3253  001926  C023  F060         	movff	_handle_buttons$159,_minutes	;volatile
  3254  00192A  0012               	return	
  3255  00192C                     l160:
  3256                           
  3257                           ;HM1.c: 304: else if (setupSelect == 2) hours = (hours == 0) ? 23 : hours - 1;
  3258  00192C  0E02               	movlw	2
  3259  00192E  185E               	xorwf	_setupSelect,w,c	;volatile
  3260  001930  A4D8               	btfss	status,2,c
  3261  001932  0012               	return	
  3262  001934  505F               	movf	_hours,w,c	;volatile
  3263  001936  B4D8               	btfsc	status,2,c
  3264  001938  D007               	goto	l168
  3265  00193A  0EFF               	movlw	255
  3266  00193C  245F               	addwf	_hours,w,c	;volatile
  3267  00193E  6E25               	movwf	_handle_buttons$160,c
  3268  001940  6A26               	clrf	_handle_buttons$160+1,c
  3269  001942  0EFF               	movlw	255
  3270  001944  2226               	addwfc	_handle_buttons$160+1,f,c
  3271  001946  D004               	goto	l170
  3272  001948                     l168:
  3273  001948  0E00               	movlw	0
  3274  00194A  6E26               	movwf	_handle_buttons$160+1,c
  3275  00194C  0E17               	movlw	23
  3276  00194E  6E25               	movwf	_handle_buttons$160,c
  3277  001950                     l170:
  3278  001950  C025  F05F         	movff	_handle_buttons$160,_hours	;volatile
  3279  001954  0012               	return	
  3280  001956                     __end_of_handle_buttons:
  3281                           	opt stack 0
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           prodh	equ	0xFF4
  3287                           prodl	equ	0xFF3
  3288                           intcon	equ	0xFF2
  3289                           postinc0	equ	0xFEE
  3290                           wreg	equ	0xFE8
  3291                           postdec1	equ	0xFE5
  3292                           fsr1l	equ	0xFE1
  3293                           indf2	equ	0xFDF
  3294                           fsr2h	equ	0xFDA
  3295                           fsr2l	equ	0xFD9
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function _display_lcd *****************
  3299 ;; Defined at:
  3300 ;;		line 311 in file "HM1.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;		None
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;Total ram usage:        4 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    8
  3321 ;; This function calls:
  3322 ;;		_lcd_gotoxy
  3323 ;;		_lcd_puts
  3324 ;;		_sprintf
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text18
  3331  001956                     __ptext18:
  3332                           	opt stack 0
  3333  001956                     _display_lcd:
  3334                           	opt stack 22
  3335                           
  3336                           ;HM1.c: 312: lcd_gotoxy(1, 1);
  3337                           
  3338                           ;incstack = 0
  3339  001956  0E01               	movlw	1
  3340  001958  6E23               	movwf	lcd_gotoxy@y,c
  3341  00195A  0E01               	movlw	1
  3342  00195C  EC72  F012         	call	_lcd_gotoxy
  3343                           
  3344                           ;HM1.c: 313: sprintf(Buffer, "%02u:%02u:%02u    %.1fC", hours, minutes, seconds, tempera
      +                          ture);
  3345  001960  0ECD               	movlw	low _Buffer
  3346  001962  0100               	movlb	0	; () banked
  3347  001964  6F96               	movwf	sprintf@sp& (0+255),b
  3348  001966  0E00               	movlw	high _Buffer
  3349  001968  6F97               	movwf	(sprintf@sp+1)& (0+255),b
  3350  00196A  0E4B               	movlw	low STR_10
  3351  00196C  6F98               	movwf	sprintf@f& (0+255),b
  3352  00196E  0EFF               	movlw	high STR_10
  3353  001970  6F99               	movwf	(sprintf@f+1)& (0+255),b
  3354  001972  C05F  F09A         	movff	_hours,?_sprintf+4	;volatile
  3355  001976  6B9B               	clrf	(?_sprintf+5)& (0+255),b
  3356  001978  C060  F09C         	movff	_minutes,?_sprintf+6	;volatile
  3357  00197C  6B9D               	clrf	(?_sprintf+7)& (0+255),b
  3358  00197E  C061  F09E         	movff	_seconds,?_sprintf+8	;volatile
  3359  001982  6B9F               	clrf	(?_sprintf+9)& (0+255),b
  3360  001984  C0CA  F0A0         	movff	_temperature,?_sprintf+10
  3361  001988  C0CB  F0A1         	movff	_temperature+1,?_sprintf+11
  3362  00198C  C0CC  F0A2         	movff	_temperature+2,?_sprintf+12
  3363  001990  EC09  F000         	call	_sprintf	;wreg free
  3364                           
  3365                           ;HM1.c: 314: lcd_puts(Buffer);
  3366  001994  0ECD               	movlw	low _Buffer
  3367  001996  6E27               	movwf	lcd_puts@s,c
  3368  001998  0E00               	movlw	high _Buffer
  3369  00199A  6E28               	movwf	lcd_puts@s+1,c
  3370  00199C  ECAD  F011         	call	_lcd_puts	;wreg free
  3371                           
  3372                           ;HM1.c: 316: lcd_gotoxy(1, 2);
  3373  0019A0  0E02               	movlw	2
  3374  0019A2  6E23               	movwf	lcd_gotoxy@y,c
  3375  0019A4  0E01               	movlw	1
  3376  0019A6  EC72  F012         	call	_lcd_gotoxy
  3377                           
  3378                           ;HM1.c: 317: sprintf(Buffer, "C: %s  H: %s", cooler_status ? "ON " : "OFF", heater_statu
      +                          s ? "ON " : "OFF");
  3379  0019AA  B266               	btfsc	_heater_status/(0+8),_heater_status& (0+7),c
  3380  0019AC  D005               	goto	l175
  3381  0019AE  0EF8               	movlw	low STR_5
  3382  0019B0  0100               	movlb	0	; () banked
  3383  0019B2  6FC6               	movwf	_display_lcd$170& (0+255),b
  3384  0019B4  0EFF               	movlw	high STR_5
  3385  0019B6  D004               	goto	L3
  3386  0019B8                     l175:
  3387                           
  3388                           ; BSR set to: 0
  3389  0019B8  0EF4               	movlw	low STR_12
  3390  0019BA  0100               	movlb	0	; () banked
  3391  0019BC  6FC6               	movwf	_display_lcd$170& (0+255),b
  3392  0019BE  0EFF               	movlw	high STR_12
  3393  0019C0                     L3:
  3394  0019C0  6FC7               	movwf	(_display_lcd$170+1)& (0+255),b
  3395                           
  3396                           ; BSR set to: 0
  3397                           
  3398                           ; BSR set to: 0
  3399  0019C2  B066               	btfsc	_cooler_status/(0+8),_cooler_status& (0+7),c
  3400  0019C4  D004               	goto	l179
  3401                           
  3402                           ; BSR set to: 0
  3403  0019C6  0EF8               	movlw	low STR_5
  3404  0019C8  6FC8               	movwf	_display_lcd$171& (0+255),b
  3405  0019CA  0EFF               	movlw	high STR_5
  3406  0019CC  D003               	goto	L4
  3407  0019CE                     l179:
  3408                           
  3409                           ; BSR set to: 0
  3410                           
  3411                           ; BSR set to: 0
  3412  0019CE  0EF4               	movlw	low STR_12
  3413  0019D0  6FC8               	movwf	_display_lcd$171& (0+255),b
  3414  0019D2  0EFF               	movlw	high STR_12
  3415  0019D4                     L4:
  3416  0019D4  6FC9               	movwf	(_display_lcd$171+1)& (0+255),b
  3417                           
  3418                           ; BSR set to: 0
  3419                           
  3420                           ; BSR set to: 0
  3421  0019D6  0ECD               	movlw	low _Buffer
  3422  0019D8  6F96               	movwf	sprintf@sp& (0+255),b
  3423  0019DA  0E00               	movlw	high _Buffer
  3424  0019DC  6F97               	movwf	(sprintf@sp+1)& (0+255),b
  3425  0019DE  0ED7               	movlw	low STR_11
  3426  0019E0  6F98               	movwf	sprintf@f& (0+255),b
  3427  0019E2  0EFF               	movlw	high STR_11
  3428  0019E4  6F99               	movwf	(sprintf@f+1)& (0+255),b
  3429  0019E6  C0C8  F09A         	movff	_display_lcd$171,?_sprintf+4
  3430  0019EA  C0C9  F09B         	movff	_display_lcd$171+1,?_sprintf+5
  3431  0019EE  C0C6  F09C         	movff	_display_lcd$170,?_sprintf+6
  3432  0019F2  C0C7  F09D         	movff	_display_lcd$170+1,?_sprintf+7
  3433  0019F6  EC09  F000         	call	_sprintf	;wreg free
  3434                           
  3435                           ;HM1.c: 318: lcd_puts(Buffer);
  3436  0019FA  0ECD               	movlw	low _Buffer
  3437  0019FC  6E27               	movwf	lcd_puts@s,c
  3438  0019FE  0E00               	movlw	high _Buffer
  3439  001A00  6E28               	movwf	lcd_puts@s+1,c
  3440  001A02  ECAD  F011         	call	_lcd_puts	;wreg free
  3441                           
  3442                           ;HM1.c: 320: lcd_gotoxy(1, 3);
  3443  001A06  0E03               	movlw	3
  3444  001A08  6E23               	movwf	lcd_gotoxy@y,c
  3445  001A0A  0E01               	movlw	1
  3446  001A0C  EC72  F012         	call	_lcd_gotoxy
  3447                           
  3448                           ;HM1.c: 321: if (clockMode) {
  3449  001A10  A466               	btfss	_clockMode/(0+8),_clockMode& (0+7),c	;volatile
  3450  001A12  D01F               	goto	l182
  3451                           
  3452                           ;HM1.c: 322: if (setupSelect == 0) lcd_puts("Setup: Seconds");
  3453  001A14  505E               	movf	_setupSelect,w,c	;volatile
  3454  001A16  A4D8               	btfss	status,2,c
  3455  001A18  D007               	goto	l183
  3456  001A1A  0EB9               	movlw	low STR_16
  3457  001A1C  6E27               	movwf	lcd_puts@s,c
  3458  001A1E  0EFF               	movlw	high STR_16
  3459  001A20  6E28               	movwf	lcd_puts@s+1,c
  3460  001A22  ECAD  F011         	call	_lcd_puts	;wreg free
  3461  001A26  D01B               	goto	l188
  3462  001A28                     l183:
  3463                           
  3464                           ;HM1.c: 323: else if (setupSelect == 1) lcd_puts("Setup: Minutes");
  3465  001A28  045E               	decf	_setupSelect,w,c	;volatile
  3466  001A2A  A4D8               	btfss	status,2,c
  3467  001A2C  D007               	goto	l185
  3468  001A2E  0EC8               	movlw	low STR_17
  3469  001A30  6E27               	movwf	lcd_puts@s,c
  3470  001A32  0EFF               	movlw	high STR_17
  3471  001A34  6E28               	movwf	lcd_puts@s+1,c
  3472  001A36  ECAD  F011         	call	_lcd_puts	;wreg free
  3473  001A3A  D011               	goto	l188
  3474  001A3C                     l185:
  3475                           
  3476                           ;HM1.c: 324: else if (setupSelect == 2) lcd_puts("Setup: Hours  ");
  3477  001A3C  0E02               	movlw	2
  3478  001A3E  185E               	xorwf	_setupSelect,w,c	;volatile
  3479  001A40  A4D8               	btfss	status,2,c
  3480  001A42  D00D               	goto	l188
  3481  001A44  0E9B               	movlw	low STR_18
  3482  001A46  6E27               	movwf	lcd_puts@s,c
  3483  001A48  0EFF               	movlw	high STR_18
  3484  001A4A  6E28               	movwf	lcd_puts@s+1,c
  3485  001A4C  ECAD  F011         	call	_lcd_puts	;wreg free
  3486                           
  3487                           ;HM1.c: 325: } else {
  3488  001A50  D006               	goto	l188
  3489  001A52                     l182:
  3490                           
  3491                           ;HM1.c: 327: lcd_puts("Normal    Mode");
  3492  001A52  0EAA               	movlw	low STR_19
  3493  001A54  6E27               	movwf	lcd_puts@s,c
  3494  001A56  0EFF               	movlw	high STR_19
  3495  001A58  6E28               	movwf	lcd_puts@s+1,c
  3496  001A5A  ECAD  F011         	call	_lcd_puts	;wreg free
  3497  001A5E                     l188:
  3498                           
  3499                           ;HM1.c: 328: }
  3500                           ;HM1.c: 330: lcd_gotoxy(1, 4);
  3501  001A5E  0E04               	movlw	4
  3502  001A60  6E23               	movwf	lcd_gotoxy@y,c
  3503  001A62  0E01               	movlw	1
  3504  001A64  EC72  F012         	call	_lcd_gotoxy
  3505                           
  3506                           ;HM1.c: 331: lcd_puts("Anwar      Abood");
  3507  001A68  0E7A               	movlw	low STR_20
  3508  001A6A  6E27               	movwf	lcd_puts@s,c
  3509  001A6C  0EFF               	movlw	high STR_20
  3510  001A6E  6E28               	movwf	lcd_puts@s+1,c
  3511  001A70  ECAD  F011         	call	_lcd_puts	;wreg free
  3512  001A74  0012               	return		;funcret
  3513  001A76                     __end_of_display_lcd:
  3514                           	opt stack 0
  3515                           tblptru	equ	0xFF8
  3516                           tblptrh	equ	0xFF7
  3517                           tblptrl	equ	0xFF6
  3518                           tablat	equ	0xFF5
  3519                           prodh	equ	0xFF4
  3520                           prodl	equ	0xFF3
  3521                           intcon	equ	0xFF2
  3522                           postinc0	equ	0xFEE
  3523                           wreg	equ	0xFE8
  3524                           postdec1	equ	0xFE5
  3525                           fsr1l	equ	0xFE1
  3526                           indf2	equ	0xFDF
  3527                           fsr2h	equ	0xFDA
  3528                           fsr2l	equ	0xFD9
  3529                           status	equ	0xFD8
  3530                           
  3531 ;; *************** function _sprintf *****************
  3532 ;; Defined at:
  3533 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  sp              2   22[BANK0 ] PTR unsigned char 
  3536 ;;		 -> Buffer(32), handle_uart@buffer(16), 
  3537 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  3538 ;;		 -> STR_11(13), STR_10(24), STR_8(26), STR_3(23), 
  3539 ;;		 -> STR_2(9), STR_1(16), 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  tmpval          4   54[BANK0 ] struct .
  3542 ;;  val             4   50[BANK0 ] unsigned long 
  3543 ;;  fval            3   62[BANK0 ] unsigned long 
  3544 ;;  prec            2   67[BANK0 ] int 
  3545 ;;  width           2   65[BANK0 ] int 
  3546 ;;  flag            2   60[BANK0 ] unsigned short 
  3547 ;;  exp             2   58[BANK0 ] int 
  3548 ;;  len             2   48[BANK0 ] unsigned int 
  3549 ;;  ap              2   46[BANK0 ] PTR void [1]
  3550 ;;		 -> ?_sprintf(2), 
  3551 ;;  cp              2   44[BANK0 ] PTR const unsigned char 
  3552 ;;		 -> STR_21(7), STR_15(4), STR_14(4), STR_13(4), 
  3553 ;;		 -> STR_12(4), STR_7(4), STR_6(3), STR_5(4), 
  3554 ;;		 -> STR_4(3), 
  3555 ;;  c               1   69[BANK0 ] char 
  3556 ;;  d               1    0        unsigned char 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  2   22[BANK0 ] int 
  3559 ;; Registers used:
  3560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3566 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Totals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;Total ram usage:       48 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    5
  3573 ;; This function calls:
  3574 ;;		___awdiv
  3575 ;;		___ftadd
  3576 ;;		___ftge
  3577 ;;		___ftmul
  3578 ;;		___ftneg
  3579 ;;		___ftsub
  3580 ;;		___fttol
  3581 ;;		___lldiv
  3582 ;;		___llmod
  3583 ;;		___lltoft
  3584 ;;		___wmul
  3585 ;;		__div_to_l_
  3586 ;;		__tdiv_to_l_
  3587 ;;		_fround
  3588 ;;		_isdigit
  3589 ;;		_scale
  3590 ;; This function is called by:
  3591 ;;		_handle_uart
  3592 ;;		_display_lcd
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text19
  3597  000012                     __ptext19:
  3598                           	opt stack 0
  3599  000012                     _sprintf:
  3600                           	opt stack 24
  3601                           
  3602                           ;doprnt.c: 494: va_list ap;
  3603                           ;doprnt.c: 499: signed char c;
  3604                           ;doprnt.c: 501: int width;
  3605                           ;doprnt.c: 504: int prec;
  3606                           ;doprnt.c: 508: unsigned short flag;
  3607                           ;doprnt.c: 515: char d;
  3608                           ;doprnt.c: 516: double fval;
  3609                           ;doprnt.c: 517: int exp;
  3610                           ;doprnt.c: 523: union {
  3611                           ;doprnt.c: 524: unsigned long vd;
  3612                           ;doprnt.c: 525: double integ;
  3613                           ;doprnt.c: 526: } tmpval;
  3614                           ;doprnt.c: 528: unsigned long val;
  3615                           ;doprnt.c: 529: unsigned len;
  3616                           ;doprnt.c: 530: const char * cp;
  3617                           ;doprnt.c: 533: *ap = __va_start();
  3618                           
  3619                           ;incstack = 0
  3620  000012  0E9A               	movlw	low (?_sprintf+4)
  3621  000014  0100               	movlb	0	; () banked
  3622  000016  6FAE               	movwf	sprintf@ap& (0+255),b
  3623  000018  0E00               	movlw	high (?_sprintf+4)
  3624  00001A  6FAF               	movwf	(sprintf@ap+1)& (0+255),b
  3625                           
  3626                           ;doprnt.c: 536: while(c = *f++) {
  3627  00001C  EFB4  F005         	goto	u6170
  3628  000020                     
  3629                           ; BSR set to: 0
  3630                           ;doprnt.c: 538: if(c != '%')
  3631                           
  3632                           ; BSR set to: 0
  3633  000020  0E25               	movlw	37
  3634  000022  19C5               	xorwf	sprintf@c& (0+255),w,b
  3635  000024  B4D8               	btfsc	status,2,c
  3636  000026  D00A               	goto	l367
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;doprnt.c: 540: {
  3640                           ;doprnt.c: 541: ((*sp++ = (c)));
  3641  000028  C096  FFD9         	movff	sprintf@sp,fsr2l
  3642  00002C  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  3643  000030  C0C5  FFDF         	movff	sprintf@c,indf2
  3644                           
  3645                           ; BSR set to: 0
  3646  000034  4B96               	infsnz	sprintf@sp& (0+255),f,b
  3647  000036  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  3648                           
  3649                           ;doprnt.c: 542: continue;
  3650  000038  EFB4  F005         	goto	u6170
  3651  00003C                     l367:
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;doprnt.c: 543: }
  3655                           ;doprnt.c: 546: width = 0;
  3656                           
  3657                           ; BSR set to: 0
  3658  00003C  0E00               	movlw	0
  3659  00003E  6FC2               	movwf	(sprintf@width+1)& (0+255),b
  3660  000040  0E00               	movlw	0
  3661  000042  6FC1               	movwf	sprintf@width& (0+255),b
  3662                           
  3663                           ;doprnt.c: 548: flag = 0;
  3664  000044  0E00               	movlw	0
  3665  000046  6FBD               	movwf	(sprintf@flag+1)& (0+255),b
  3666  000048  0E00               	movlw	0
  3667  00004A  6FBC               	movwf	sprintf@flag& (0+255),b
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;doprnt.c: 551: switch(*f) {
  3671                           
  3672                           ;doprnt.c: 550: for(;;) {
  3673  00004C  D004               	goto	l369
  3674  00004E                     
  3675                           ;doprnt.c: 580: flag |= 0x04;
  3676                           
  3677                           ; BSR set to: 0
  3678  00004E  0100               	movlb	0	; () banked
  3679  000050  85BC               	bsf	sprintf@flag& (0+255),2,b
  3680                           
  3681                           ;doprnt.c: 581: f++;
  3682  000052  4B98               	infsnz	sprintf@f& (0+255),f,b
  3683  000054  2B99               	incf	(sprintf@f+1)& (0+255),f,b
  3684  000056                     l369:
  3685                           
  3686                           ; BSR set to: 0
  3687  000056  C098  FFF6         	movff	sprintf@f,tblptrl
  3688  00005A  C099  FFF7         	movff	sprintf@f+1,tblptrh
  3689  00005E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3690  00005E  6AF8               	clrf	tblptru,c
  3691  000060                     	endif
  3692  000060                     	if	0	;tblptru may be non-zero
  3693  000060                     	endif
  3694  000060  0008               	tblrd		*
  3695  000062  50F5               	movf	tablat,w,c
  3696                           
  3697                           ; Switch size 1, requested type "space"
  3698                           ; Number of cases is 1, Range of values is 48 to 48
  3699                           ; switch strategies available:
  3700                           ; Name         Instructions Cycles
  3701                           ; simple_byte            4     3 (average)
  3702                           ;	Chosen strategy is simple_byte
  3703  000064  0A30               	xorlw	48	; case 48
  3704  000066  B4D8               	btfsc	status,2,c
  3705  000068  D7F2               	goto	l370
  3706                           
  3707                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3708                           
  3709                           ;doprnt.c: 586: }
  3710                           
  3711                           ;doprnt.c: 585: break;
  3712  00006A  C098  FFF6         	movff	sprintf@f,tblptrl
  3713  00006E  C099  FFF7         	movff	sprintf@f+1,tblptrh
  3714  000072                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3715  000072  6AF8               	clrf	tblptru,c
  3716  000074                     	endif
  3717  000074                     	if	0	;tblptru may be non-zero
  3718  000074                     	endif
  3719  000074  0008               	tblrd		*
  3720  000076  50F5               	movf	tablat,w,c
  3721  000078  EC88  F013         	call	_isdigit
  3722  00007C  A0D8               	btfss	status,0,c
  3723  00007E  D036               	goto	u5580
  3724                           
  3725                           ;doprnt.c: 598: width = 0;
  3726  000080  0E00               	movlw	0
  3727  000082  0100               	movlb	0	; () banked
  3728  000084  6FC2               	movwf	(sprintf@width+1)& (0+255),b
  3729  000086  0E00               	movlw	0
  3730  000088  6FC1               	movwf	sprintf@width& (0+255),b
  3731  00008A                     
  3732                           ;doprnt.c: 600: width *= 10;
  3733                           
  3734                           ; BSR set to: 0
  3735  00008A  C0C1  F027         	movff	sprintf@width,___wmul@multiplier
  3736  00008E  C0C2  F028         	movff	sprintf@width+1,___wmul@multiplier+1
  3737  000092  0E00               	movlw	0
  3738  000094  6E2A               	movwf	___wmul@multiplicand+1,c
  3739  000096  0E0A               	movlw	10
  3740  000098  6E29               	movwf	___wmul@multiplicand,c
  3741  00009A  EC1C  F013         	call	___wmul	;wreg free
  3742  00009E  C027  F0C1         	movff	?___wmul,sprintf@width
  3743  0000A2  C028  F0C2         	movff	?___wmul+1,sprintf@width+1
  3744                           
  3745                           ;doprnt.c: 601: width += *f++ - '0';
  3746  0000A6  0ED0               	movlw	208
  3747  0000A8  0100               	movlb	0	; () banked
  3748  0000AA  6FA3               	movwf	??_sprintf& (0+255),b
  3749  0000AC  0EFF               	movlw	255
  3750  0000AE  6FA4               	movwf	(??_sprintf+1)& (0+255),b
  3751  0000B0  C098  FFF6         	movff	sprintf@f,tblptrl
  3752  0000B4  C099  FFF7         	movff	sprintf@f+1,tblptrh
  3753  0000B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3754  0000B8  6AF8               	clrf	tblptru,c
  3755  0000BA                     	endif
  3756  0000BA                     	if	0	;tblptru may be non-zero
  3757  0000BA                     	endif
  3758  0000BA  0008               	tblrd		*
  3759  0000BC  50F5               	movf	tablat,w,c
  3760  0000BE  6FA5               	movwf	(??_sprintf+2)& (0+255),b
  3761  0000C0  6BA6               	clrf	(??_sprintf+3)& (0+255),b
  3762  0000C2  51A3               	movf	??_sprintf& (0+255),w,b
  3763  0000C4  27A5               	addwf	(??_sprintf+2)& (0+255),f,b
  3764  0000C6  51A4               	movf	(??_sprintf+1)& (0+255),w,b
  3765  0000C8  23A6               	addwfc	(??_sprintf+3)& (0+255),f,b
  3766  0000CA  51A5               	movf	(??_sprintf+2)& (0+255),w,b
  3767  0000CC  27C1               	addwf	sprintf@width& (0+255),f,b
  3768  0000CE  51A6               	movf	(??_sprintf+3)& (0+255),w,b
  3769  0000D0  23C2               	addwfc	(sprintf@width+1)& (0+255),f,b
  3770                           
  3771                           ; BSR set to: 0
  3772  0000D2  4B98               	infsnz	sprintf@f& (0+255),f,b
  3773  0000D4  2B99               	incf	(sprintf@f+1)& (0+255),f,b
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3777  0000D6  C098  FFF6         	movff	sprintf@f,tblptrl
  3778  0000DA  C099  FFF7         	movff	sprintf@f+1,tblptrh
  3779  0000DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3780  0000DE  6AF8               	clrf	tblptru,c
  3781  0000E0                     	endif
  3782  0000E0                     	if	0	;tblptru may be non-zero
  3783  0000E0                     	endif
  3784  0000E0  0008               	tblrd		*
  3785  0000E2  50F5               	movf	tablat,w,c
  3786  0000E4  EC88  F013         	call	_isdigit
  3787  0000E8  B0D8               	btfsc	status,0,c
  3788  0000EA  D7CF               	goto	l375
  3789  0000EC                     u5580:
  3790                           
  3791                           ;doprnt.c: 608: }
  3792                           ;doprnt.c: 611: if(*f == '.') {
  3793  0000EC  C098  FFF6         	movff	sprintf@f,tblptrl
  3794  0000F0  C099  FFF7         	movff	sprintf@f+1,tblptrh
  3795  0000F4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3796  0000F4  6AF8               	clrf	tblptru,c
  3797  0000F6                     	endif
  3798  0000F6                     	if	0	;tblptru may be non-zero
  3799  0000F6                     	endif
  3800  0000F6  0008               	tblrd		*
  3801  0000F8  50F5               	movf	tablat,w,c
  3802  0000FA  0A2E               	xorlw	46
  3803  0000FC  A4D8               	btfss	status,2,c
  3804  0000FE  D032               	goto	l377
  3805                           
  3806                           ;doprnt.c: 612: flag |= 0x4000;
  3807  000100  0100               	movlb	0	; () banked
  3808  000102  8DBD               	bsf	(sprintf@flag+1)& (0+255),6,b
  3809                           
  3810                           ;doprnt.c: 613: f++;
  3811  000104  4B98               	infsnz	sprintf@f& (0+255),f,b
  3812  000106  2B99               	incf	(sprintf@f+1)& (0+255),f,b
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;doprnt.c: 620: {
  3816                           ;doprnt.c: 621: prec = 0;
  3817  000108  0E00               	movlw	0
  3818  00010A  6FC4               	movwf	(sprintf@prec+1)& (0+255),b
  3819  00010C  0E00               	movlw	0
  3820  00010E  6FC3               	movwf	sprintf@prec& (0+255),b
  3821                           
  3822                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3823  000110  D01D               	goto	l378
  3824  000112                     
  3825                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3826                           
  3827                           ; BSR set to: 0
  3828  000112  C0C3  F027         	movff	sprintf@prec,___wmul@multiplier
  3829  000116  C0C4  F028         	movff	sprintf@prec+1,___wmul@multiplier+1
  3830  00011A  0E00               	movlw	0
  3831  00011C  6E2A               	movwf	___wmul@multiplicand+1,c
  3832  00011E  0E0A               	movlw	10
  3833  000120  6E29               	movwf	___wmul@multiplicand,c
  3834  000122  EC1C  F013         	call	___wmul	;wreg free
  3835  000126  C098  FFF6         	movff	sprintf@f,tblptrl
  3836  00012A  C099  FFF7         	movff	sprintf@f+1,tblptrh
  3837  00012E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3838  00012E  6AF8               	clrf	tblptru,c
  3839  000130                     	endif
  3840  000130                     	if	0	;tblptru may be non-zero
  3841  000130                     	endif
  3842  000130  0008               	tblrd		*
  3843  000132  50F5               	movf	tablat,w,c
  3844  000134  2627               	addwf	?___wmul,f,c
  3845  000136  0E00               	movlw	0
  3846  000138  2228               	addwfc	?___wmul+1,f,c
  3847  00013A  0ED0               	movlw	208
  3848  00013C  2427               	addwf	?___wmul,w,c
  3849  00013E  0100               	movlb	0	; () banked
  3850  000140  6FC3               	movwf	sprintf@prec& (0+255),b
  3851  000142  0EFF               	movlw	255
  3852  000144  2028               	addwfc	?___wmul+1,w,c
  3853  000146  6FC4               	movwf	(sprintf@prec+1)& (0+255),b
  3854                           
  3855                           ; BSR set to: 0
  3856  000148  4B98               	infsnz	sprintf@f& (0+255),f,b
  3857  00014A  2B99               	incf	(sprintf@f+1)& (0+255),f,b
  3858  00014C                     l378:
  3859                           
  3860                           ; BSR set to: 0
  3861                           
  3862                           ; BSR set to: 0
  3863  00014C  C098  FFF6         	movff	sprintf@f,tblptrl
  3864  000150  C099  FFF7         	movff	sprintf@f+1,tblptrh
  3865  000154                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3866  000154  6AF8               	clrf	tblptru,c
  3867  000156                     	endif
  3868  000156                     	if	0	;tblptru may be non-zero
  3869  000156                     	endif
  3870  000156  0008               	tblrd		*
  3871  000158  50F5               	movf	tablat,w,c
  3872  00015A  EC88  F013         	call	_isdigit
  3873  00015E  A0D8               	btfss	status,0,c
  3874  000160  D081               	goto	l382
  3875  000162  D7D7               	goto	l379
  3876  000164                     l377:
  3877                           
  3878                           ;doprnt.c: 626: prec = 0;
  3879  000164  0E00               	movlw	0
  3880  000166  0100               	movlb	0	; () banked
  3881  000168  6FC4               	movwf	(sprintf@prec+1)& (0+255),b
  3882  00016A  0E00               	movlw	0
  3883  00016C  6FC3               	movwf	sprintf@prec& (0+255),b
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;doprnt.c: 628: flag |= 0x1000;
  3887  00016E  89BD               	bsf	(sprintf@flag+1)& (0+255),4,b
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;doprnt.c: 630: }
  3891                           ;doprnt.c: 635: switch(c = *f++) {
  3892  000170  D079               	goto	l382
  3893  000172                     
  3894                           ; BSR set to: 0
  3895                           ;doprnt.c: 663: flag |= 0x400;
  3896                           
  3897                           ; BSR set to: 0
  3898  000172  85BD               	bsf	(sprintf@flag+1)& (0+255),2,b
  3899                           
  3900                           ;doprnt.c: 664: break;
  3901  000174  D092               	goto	l386
  3902  000176                     
  3903                           ; BSR set to: 0
  3904                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3905                           
  3906                           ; BSR set to: 0
  3907  000176  C0AE  FFD9         	movff	sprintf@ap,fsr2l
  3908  00017A  C0AF  FFDA         	movff	sprintf@ap+1,fsr2h
  3909  00017E  CFDE F0AC          	movff	postinc2,sprintf@cp
  3910  000182  CFDD F0AD          	movff	postdec2,sprintf@cp+1
  3911                           
  3912                           ; BSR set to: 0
  3913  000186  0E02               	movlw	2
  3914  000188  27AE               	addwf	sprintf@ap& (0+255),f,b
  3915  00018A  0E00               	movlw	0
  3916  00018C  23AF               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;doprnt.c: 740: if(!cp)
  3920  00018E  51AC               	movf	sprintf@cp& (0+255),w,b
  3921  000190  11AD               	iorwf	(sprintf@cp+1)& (0+255),w,b
  3922  000192  A4D8               	btfss	status,2,c
  3923  000194  D004               	goto	l388
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 741: cp = "(null)";
  3927  000196  0EED               	movlw	low STR_21
  3928  000198  6FAC               	movwf	sprintf@cp& (0+255),b
  3929  00019A  0EFF               	movlw	high STR_21
  3930  00019C  6FAD               	movwf	(sprintf@cp+1)& (0+255),b
  3931  00019E                     l388:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;doprnt.c: 745: len = 0;
  3935                           
  3936                           ; BSR set to: 0
  3937  00019E  0E00               	movlw	0
  3938  0001A0  6FB1               	movwf	(sprintf@len+1)& (0+255),b
  3939  0001A2  0E00               	movlw	0
  3940  0001A4  6FB0               	movwf	sprintf@len& (0+255),b
  3941                           
  3942                           ;doprnt.c: 746: while(cp[len])
  3943  0001A6  D002               	goto	l389
  3944  0001A8                     
  3945                           ; BSR set to: 0
  3946                           ;doprnt.c: 747: len++;
  3947                           
  3948                           ; BSR set to: 0
  3949  0001A8  4BB0               	infsnz	sprintf@len& (0+255),f,b
  3950  0001AA  2BB1               	incf	(sprintf@len+1)& (0+255),f,b
  3951  0001AC                     l389:
  3952                           
  3953                           ; BSR set to: 0
  3954                           
  3955                           ; BSR set to: 0
  3956  0001AC  51B0               	movf	sprintf@len& (0+255),w,b
  3957  0001AE  25AC               	addwf	sprintf@cp& (0+255),w,b
  3958  0001B0  6FA3               	movwf	??_sprintf& (0+255),b
  3959  0001B2  51B1               	movf	(sprintf@len+1)& (0+255),w,b
  3960  0001B4  21AD               	addwfc	(sprintf@cp+1)& (0+255),w,b
  3961  0001B6  6FA4               	movwf	(??_sprintf+1)& (0+255),b
  3962  0001B8  C0A3  FFF6         	movff	??_sprintf,tblptrl
  3963  0001BC  C0A4  FFF7         	movff	??_sprintf+1,tblptrh
  3964  0001C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3965  0001C0  6AF8               	clrf	tblptru,c
  3966  0001C2                     	endif
  3967  0001C2                     	if	0	;tblptru may be non-zero
  3968  0001C2                     	endif
  3969  0001C2  0008               	tblrd		*
  3970  0001C4  50F5               	movf	tablat,w,c
  3971  0001C6  0900               	iorlw	0
  3972  0001C8  A4D8               	btfss	status,2,c
  3973  0001CA  D7EE               	goto	l390
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;doprnt.c: 753: if(prec && prec < len)
  3977                           
  3978                           ; BSR set to: 0
  3979  0001CC  51C3               	movf	sprintf@prec& (0+255),w,b
  3980  0001CE  11C4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3981  0001D0  B4D8               	btfsc	status,2,c
  3982  0001D2  D00A               	goto	l392
  3983                           
  3984                           ; BSR set to: 0
  3985  0001D4  51B0               	movf	sprintf@len& (0+255),w,b
  3986  0001D6  5DC3               	subwf	sprintf@prec& (0+255),w,b
  3987  0001D8  51B1               	movf	(sprintf@len+1)& (0+255),w,b
  3988  0001DA  59C4               	subwfb	(sprintf@prec+1)& (0+255),w,b
  3989  0001DC  B0D8               	btfsc	status,0,c
  3990  0001DE  D004               	goto	l392
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;doprnt.c: 754: len = prec;
  3994  0001E0  C0C3  F0B0         	movff	sprintf@prec,sprintf@len
  3995  0001E4  C0C4  F0B1         	movff	sprintf@prec+1,sprintf@len+1
  3996  0001E8                     l392:
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;doprnt.c: 757: if(width > len)
  4000                           
  4001                           ; BSR set to: 0
  4002  0001E8  51C1               	movf	sprintf@width& (0+255),w,b
  4003  0001EA  5DB0               	subwf	sprintf@len& (0+255),w,b
  4004  0001EC  51C2               	movf	(sprintf@width+1)& (0+255),w,b
  4005  0001EE  59B1               	subwfb	(sprintf@len+1)& (0+255),w,b
  4006  0001F0  B0D8               	btfsc	status,0,c
  4007  0001F2  D005               	goto	l393
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;doprnt.c: 758: width -= len;
  4011  0001F4  51B0               	movf	sprintf@len& (0+255),w,b
  4012  0001F6  5FC1               	subwf	sprintf@width& (0+255),f,b
  4013  0001F8  51B1               	movf	(sprintf@len+1)& (0+255),w,b
  4014  0001FA  5BC2               	subwfb	(sprintf@width+1)& (0+255),f,b
  4015  0001FC  D00D               	goto	l395
  4016  0001FE                     l393:
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;doprnt.c: 759: else
  4020                           ;doprnt.c: 760: width = 0;
  4021                           
  4022                           ; BSR set to: 0
  4023  0001FE  0E00               	movlw	0
  4024  000200  6FC2               	movwf	(sprintf@width+1)& (0+255),b
  4025  000202  0E00               	movlw	0
  4026  000204  6FC1               	movwf	sprintf@width& (0+255),b
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;doprnt.c: 764: while(width--)
  4030  000206  D008               	goto	l395
  4031  000208                     l4710:
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;doprnt.c: 765: ((*sp++ = (' ')));
  4035  000208  C096  FFD9         	movff	sprintf@sp,fsr2l
  4036  00020C  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  4037  000210  0E20               	movlw	32
  4038  000212  6EDF               	movwf	indf2,c
  4039                           
  4040                           ; BSR set to: 0
  4041  000214  4B96               	infsnz	sprintf@sp& (0+255),f,b
  4042  000216  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  4043  000218                     l395:
  4044                           
  4045                           ; BSR set to: 0
  4046                           
  4047                           ; BSR set to: 0
  4048  000218  07C1               	decf	sprintf@width& (0+255),f,b
  4049  00021A  A0D8               	btfss	status,0,c
  4050  00021C  07C2               	decf	(sprintf@width+1)& (0+255),f,b
  4051  00021E  29C1               	incf	sprintf@width& (0+255),w,b
  4052  000220  E1F3               	bnz	l4710
  4053  000222  29C2               	incf	(sprintf@width+1)& (0+255),w,b
  4054  000224  B4D8               	btfsc	status,2,c
  4055  000226  D011               	goto	l398
  4056  000228  D7EF               	goto	l396
  4057  00022A                     l4716:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4061  00022A  C0AC  FFF6         	movff	sprintf@cp,tblptrl
  4062  00022E  C0AD  FFF7         	movff	sprintf@cp+1,tblptrh
  4063  000232                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4064  000232  6AF8               	clrf	tblptru,c
  4065  000234                     	endif
  4066  000234                     	if	0	;tblptru may be non-zero
  4067  000234                     	endif
  4068  000234  C096  FFD9         	movff	sprintf@sp,fsr2l
  4069  000238  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  4070  00023C  0008               	tblrd		*
  4071  00023E  CFF5 FFDF          	movff	tablat,indf2
  4072                           
  4073                           ; BSR set to: 0
  4074  000242  4BAC               	infsnz	sprintf@cp& (0+255),f,b
  4075  000244  2BAD               	incf	(sprintf@cp+1)& (0+255),f,b
  4076                           
  4077                           ; BSR set to: 0
  4078  000246  4B96               	infsnz	sprintf@sp& (0+255),f,b
  4079  000248  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  4080  00024A                     l398:
  4081                           
  4082                           ; BSR set to: 0
  4083                           
  4084                           ; BSR set to: 0
  4085  00024A  07B0               	decf	sprintf@len& (0+255),f,b
  4086  00024C  A0D8               	btfss	status,0,c
  4087  00024E  07B1               	decf	(sprintf@len+1)& (0+255),f,b
  4088  000250  29B0               	incf	sprintf@len& (0+255),w,b
  4089  000252  E1EB               	bnz	l4716
  4090  000254  29B1               	incf	(sprintf@len+1)& (0+255),w,b
  4091  000256  B4D8               	btfsc	status,2,c
  4092  000258  EFB4  F005         	goto	u6170
  4093  00025C  D7E6               	goto	l399
  4094  00025E                     
  4095                           ; BSR set to: 0
  4096                           ;doprnt.c: 818: flag |= 0xC0;
  4097                           
  4098                           ; BSR set to: 0
  4099  00025E  0EC0               	movlw	192
  4100  000260  13BC               	iorwf	sprintf@flag& (0+255),f,b
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;doprnt.c: 822: }
  4104                           
  4105                           ;doprnt.c: 819: break;
  4106  000262  D01B               	goto	l386
  4107  000264                     l382:
  4108                           
  4109                           ; BSR set to: 0
  4110  000264  C098  FFF6         	movff	sprintf@f,tblptrl
  4111  000268  C099  FFF7         	movff	sprintf@f+1,tblptrh
  4112  00026C  0100               	movlb	0	; () banked
  4113  00026E  4B98               	infsnz	sprintf@f& (0+255),f,b
  4114  000270  2B99               	incf	(sprintf@f+1)& (0+255),f,b
  4115  000272                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4116  000272  6AF8               	clrf	tblptru,c
  4117  000274                     	endif
  4118  000274                     	if	0	;tblptru may be non-zero
  4119  000274                     	endif
  4120  000274  0008               	tblrd		*
  4121  000276  CFF5 F0C5          	movff	tablat,sprintf@c
  4122  00027A  51C5               	movf	sprintf@c& (0+255),w,b
  4123                           
  4124                           ; Switch size 1, requested type "space"
  4125                           ; Number of cases is 4, Range of values is 0 to 117
  4126                           ; switch strategies available:
  4127                           ; Name         Instructions Cycles
  4128                           ; simple_byte           13     7 (average)
  4129                           ;	Chosen strategy is simple_byte
  4130  00027C  0A00               	xorlw	0	; case 0
  4131  00027E  B4D8               	btfsc	status,2,c
  4132  000280  EFC2  F005         	goto	u6180
  4133  000284  0A66               	xorlw	102	; case 102
  4134  000286  B4D8               	btfsc	status,2,c
  4135  000288  D774               	goto	l385
  4136  00028A  0A15               	xorlw	21	; case 115
  4137  00028C  B4D8               	btfsc	status,2,c
  4138  00028E  D773               	goto	l387
  4139  000290  0A06               	xorlw	6	; case 117
  4140  000292  B4D8               	btfsc	status,2,c
  4141  000294  D7E4               	goto	l402
  4142  000296  EFB4  F005         	goto	u6170
  4143  00029A                     l386:
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;doprnt.c: 825: if(flag & (0x700)) {
  4147                           
  4148                           ; BSR set to: 0
  4149  00029A  0E07               	movlw	7
  4150  00029C  15BD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4151  00029E  B4D8               	btfsc	status,2,c
  4152  0002A0  D333               	goto	l403
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;doprnt.c: 827: if(flag & 0x1000)
  4156  0002A2  A9BD               	btfss	(sprintf@flag+1)& (0+255),4,b
  4157  0002A4  D004               	goto	l404
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;doprnt.c: 829: prec = 6;
  4161  0002A6  0E00               	movlw	0
  4162  0002A8  6FC4               	movwf	(sprintf@prec+1)& (0+255),b
  4163  0002AA  0E06               	movlw	6
  4164  0002AC  6FC3               	movwf	sprintf@prec& (0+255),b
  4165  0002AE                     l404:
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4169                           
  4170                           ; BSR set to: 0
  4171  0002AE  C0AE  FFD9         	movff	sprintf@ap,fsr2l
  4172  0002B2  C0AF  FFDA         	movff	sprintf@ap+1,fsr2h
  4173  0002B6  CFDE F0BE          	movff	postinc2,sprintf@fval
  4174  0002BA  CFDE F0BF          	movff	postinc2,sprintf@fval+1
  4175  0002BE  CFDD F0C0          	movff	postdec2,sprintf@fval+2
  4176                           
  4177                           ; BSR set to: 0
  4178  0002C2  0E03               	movlw	3
  4179  0002C4  27AE               	addwf	sprintf@ap& (0+255),f,b
  4180  0002C6  0E00               	movlw	0
  4181  0002C8  23AF               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;doprnt.c: 831: if(fval < 0.0) {
  4185  0002CA  AFC0               	btfss	(sprintf@fval+2)& (0+255),7,b
  4186  0002CC  D011               	goto	l405
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;doprnt.c: 832: fval = -fval;
  4190  0002CE  C0BE  F019         	movff	sprintf@fval,___ftneg@f1
  4191  0002D2  C0BF  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  4192  0002D6  C0C0  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  4193  0002DA  EC54  F013         	call	___ftneg	;wreg free
  4194  0002DE  C019  F0BE         	movff	?___ftneg,sprintf@fval
  4195  0002E2  C01A  F0BF         	movff	?___ftneg+1,sprintf@fval+1
  4196  0002E6  C01B  F0C0         	movff	?___ftneg+2,sprintf@fval+2
  4197                           
  4198                           ;doprnt.c: 833: flag |= 0x03;
  4199  0002EA  0E03               	movlw	3
  4200  0002EC  0100               	movlb	0	; () banked
  4201  0002EE  13BC               	iorwf	sprintf@flag& (0+255),f,b
  4202  0002F0                     l405:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;doprnt.c: 834: }
  4206                           ;doprnt.c: 835: exp = 0;
  4207                           
  4208                           ; BSR set to: 0
  4209  0002F0  0E00               	movlw	0
  4210  0002F2  6FBB               	movwf	(sprintf@exp+1)& (0+255),b
  4211  0002F4  0E00               	movlw	0
  4212  0002F6  6FBA               	movwf	sprintf@exp& (0+255),b
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;doprnt.c: 836: if( fval!=0) {
  4216  0002F8  51BE               	movf	sprintf@fval& (0+255),w,b
  4217  0002FA  11BF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4218  0002FC  11C0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4219  0002FE  B4D8               	btfsc	status,2,c
  4220  000300  D086               	goto	l410
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4224  000302  0E82               	movlw	130
  4225  000304  6FA3               	movwf	??_sprintf& (0+255),b
  4226  000306  0EFF               	movlw	255
  4227  000308  6FA4               	movwf	(??_sprintf+1)& (0+255),b
  4228  00030A  C0BE  F0A5         	movff	sprintf@fval,??_sprintf+2
  4229  00030E  C0BF  F0A6         	movff	sprintf@fval+1,??_sprintf+3
  4230  000312  C0C0  F0A7         	movff	sprintf@fval+2,??_sprintf+4
  4231  000316  C0C1  F0A8         	movff	sprintf@fval+3,??_sprintf+5
  4232  00031A  0E10               	movlw	16
  4233  00031C  D005               	goto	u5720
  4234  00031E                     u5725:
  4235  00031E  90D8               	bcf	status,0,c
  4236  000320  33A8               	rrcf	(??_sprintf+5)& (0+255),f,b
  4237  000322  33A7               	rrcf	(??_sprintf+4)& (0+255),f,b
  4238  000324  33A6               	rrcf	(??_sprintf+3)& (0+255),f,b
  4239  000326  33A5               	rrcf	(??_sprintf+2)& (0+255),f,b
  4240  000328                     u5720:
  4241  000328  2EE8               	decfsz	wreg,f,c
  4242  00032A  D7F9               	goto	u5725
  4243  00032C  51A5               	movf	(??_sprintf+2)& (0+255),w,b
  4244  00032E  25A3               	addwf	??_sprintf& (0+255),w,b
  4245  000330  6FBA               	movwf	sprintf@exp& (0+255),b
  4246  000332  0E00               	movlw	0
  4247  000334  21A4               	addwfc	(??_sprintf+1)& (0+255),w,b
  4248  000336  6FBB               	movwf	(sprintf@exp+1)& (0+255),b
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;doprnt.c: 838: exp--;
  4252  000338  07BA               	decf	sprintf@exp& (0+255),f,b
  4253  00033A  A0D8               	btfss	status,0,c
  4254  00033C  07BB               	decf	(sprintf@exp+1)& (0+255),f,b
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;doprnt.c: 839: exp *= 3;
  4258  00033E  C0BA  F027         	movff	sprintf@exp,___wmul@multiplier
  4259  000342  C0BB  F028         	movff	sprintf@exp+1,___wmul@multiplier+1
  4260  000346  0E00               	movlw	0
  4261  000348  6E2A               	movwf	___wmul@multiplicand+1,c
  4262  00034A  0E03               	movlw	3
  4263  00034C  6E29               	movwf	___wmul@multiplicand,c
  4264  00034E  EC1C  F013         	call	___wmul	;wreg free
  4265  000352  C027  F0BA         	movff	?___wmul,sprintf@exp
  4266  000356  C028  F0BB         	movff	?___wmul+1,sprintf@exp+1
  4267                           
  4268                           ;doprnt.c: 840: exp /= 10;
  4269  00035A  C0BA  F01F         	movff	sprintf@exp,___awdiv@dividend
  4270  00035E  C0BB  F020         	movff	sprintf@exp+1,___awdiv@dividend+1
  4271  000362  0E00               	movlw	0
  4272  000364  6E22               	movwf	___awdiv@divisor+1,c
  4273  000366  0E0A               	movlw	10
  4274  000368  6E21               	movwf	___awdiv@divisor,c
  4275  00036A  ECCA  F00F         	call	___awdiv	;wreg free
  4276  00036E  C01F  F0BA         	movff	?___awdiv,sprintf@exp
  4277  000372  C020  F0BB         	movff	?___awdiv+1,sprintf@exp+1
  4278                           
  4279                           ;doprnt.c: 841: if(exp < 0)
  4280  000376  0100               	movlb	0	; () banked
  4281  000378  AFBB               	btfss	(sprintf@exp+1)& (0+255),7,b
  4282  00037A  D003               	goto	l407
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;doprnt.c: 842: exp--;
  4286  00037C  07BA               	decf	sprintf@exp& (0+255),f,b
  4287  00037E  A0D8               	btfss	status,0,c
  4288  000380  07BB               	decf	(sprintf@exp+1)& (0+255),f,b
  4289  000382                     l407:
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4293                           
  4294                           ; BSR set to: 0
  4295  000382  51BA               	movf	sprintf@exp& (0+255),w,b
  4296  000384  0800               	sublw	0
  4297  000386  ECC9  F005         	call	_scale
  4298  00038A  C058  F0B6         	movff	?_scale,sprintf@tmpval
  4299  00038E  C059  F0B7         	movff	?_scale+1,sprintf@tmpval+1
  4300  000392  C05A  F0B8         	movff	?_scale+2,sprintf@tmpval+2
  4301                           
  4302                           ;doprnt.c: 847: tmpval.integ *= fval;
  4303  000396  C0B6  F049         	movff	sprintf@tmpval,___ftmul@f1
  4304  00039A  C0B7  F04A         	movff	sprintf@tmpval+1,___ftmul@f1+1
  4305  00039E  C0B8  F04B         	movff	sprintf@tmpval+2,___ftmul@f1+2
  4306  0003A2  C0BE  F04C         	movff	sprintf@fval,___ftmul@f2
  4307  0003A6  C0BF  F04D         	movff	sprintf@fval+1,___ftmul@f2+1
  4308  0003AA  C0C0  F04E         	movff	sprintf@fval+2,___ftmul@f2+2
  4309  0003AE  EC3E  F00E         	call	___ftmul	;wreg free
  4310  0003B2  C049  F0B6         	movff	?___ftmul,sprintf@tmpval
  4311  0003B6  C04A  F0B7         	movff	?___ftmul+1,sprintf@tmpval+1
  4312  0003BA  C04B  F0B8         	movff	?___ftmul+2,sprintf@tmpval+2
  4313                           
  4314                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4315  0003BE  C0B6  F019         	movff	sprintf@tmpval,___ftge@ff1
  4316  0003C2  C0B7  F01A         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4317  0003C6  C0B8  F01B         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4318  0003CA  0E00               	movlw	0
  4319  0003CC  6E1C               	movwf	___ftge@ff2,c
  4320  0003CE  0E80               	movlw	128
  4321  0003D0  6E1D               	movwf	___ftge@ff2+1,c
  4322  0003D2  0E3F               	movlw	63
  4323  0003D4  6E1E               	movwf	___ftge@ff2+2,c
  4324  0003D6  EC82  F00F         	call	___ftge	;wreg free
  4325  0003DA  B0D8               	btfsc	status,0,c
  4326  0003DC  D005               	goto	l408
  4327                           
  4328                           ;doprnt.c: 849: exp--;
  4329  0003DE  0100               	movlb	0	; () banked
  4330  0003E0  07BA               	decf	sprintf@exp& (0+255),f,b
  4331  0003E2  A0D8               	btfss	status,0,c
  4332  0003E4  07BB               	decf	(sprintf@exp+1)& (0+255),f,b
  4333  0003E6  D013               	goto	l410
  4334  0003E8                     l408:
  4335                           
  4336                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4337                           
  4338                           ; BSR set to: 0
  4339  0003E8  C0B6  F019         	movff	sprintf@tmpval,___ftge@ff1
  4340  0003EC  C0B7  F01A         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4341  0003F0  C0B8  F01B         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4342  0003F4  0E00               	movlw	0
  4343  0003F6  6E1C               	movwf	___ftge@ff2,c
  4344  0003F8  0E20               	movlw	32
  4345  0003FA  6E1D               	movwf	___ftge@ff2+1,c
  4346  0003FC  0E41               	movlw	65
  4347  0003FE  6E1E               	movwf	___ftge@ff2+2,c
  4348  000400  EC82  F00F         	call	___ftge	;wreg free
  4349  000404  A0D8               	btfss	status,0,c
  4350  000406  D003               	goto	l410
  4351                           
  4352                           ;doprnt.c: 851: exp++;
  4353  000408  0100               	movlb	0	; () banked
  4354  00040A  4BBA               	infsnz	sprintf@exp& (0+255),f,b
  4355  00040C  2BBB               	incf	(sprintf@exp+1)& (0+255),f,b
  4356  00040E                     l410:
  4357                           
  4358                           ;doprnt.c: 852: }
  4359                           ;doprnt.c: 1112: if(prec <= 12)
  4360                           
  4361                           ; BSR set to: 0
  4362                           
  4363                           ; BSR set to: 0
  4364                           
  4365                           ; BSR set to: 0
  4366  00040E  0100               	movlb	0	; () banked
  4367  000410  BFC4               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4368  000412  D006               	goto	u5760
  4369  000414  51C4               	movf	(sprintf@prec+1)& (0+255),w,b
  4370  000416  E11B               	bnz	l4778
  4371  000418  0E0D               	movlw	13
  4372  00041A  5DC3               	subwf	sprintf@prec& (0+255),w,b
  4373  00041C  B0D8               	btfsc	status,0,c
  4374  00041E  D017               	goto	l411
  4375  000420                     u5760:
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;doprnt.c: 1113: fval += fround(prec);
  4379  000420  C0BE  F087         	movff	sprintf@fval,___ftadd@f1
  4380  000424  C0BF  F088         	movff	sprintf@fval+1,___ftadd@f1+1
  4381  000428  C0C0  F089         	movff	sprintf@fval+2,___ftadd@f1+2
  4382  00042C  51C3               	movf	sprintf@prec& (0+255),w,b
  4383  00042E  ECFD  F007         	call	_fround
  4384  000432  C058  F08A         	movff	?_fround,___ftadd@f2
  4385  000436  C059  F08B         	movff	?_fround+1,___ftadd@f2+1
  4386  00043A  C05A  F08C         	movff	?_fround+2,___ftadd@f2+2
  4387  00043E  EC16  F00A         	call	___ftadd	;wreg free
  4388  000442  C087  F0BE         	movff	?___ftadd,sprintf@fval
  4389  000446  C088  F0BF         	movff	?___ftadd+1,sprintf@fval+1
  4390  00044A  C089  F0C0         	movff	?___ftadd+2,sprintf@fval+2
  4391  00044E                     l411:
  4392  00044E                     l4778:
  4393                           
  4394                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4395  00044E  0100               	movlb	0	; () banked
  4396  000450  BFBB               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4397  000452  D006               	goto	u5770
  4398  000454  51BB               	movf	(sprintf@exp+1)& (0+255),w,b
  4399  000456  E11F               	bnz	l4786
  4400  000458  0E0A               	movlw	10
  4401  00045A  5DBA               	subwf	sprintf@exp& (0+255),w,b
  4402  00045C  B0D8               	btfsc	status,0,c
  4403  00045E  D01B               	goto	u5800
  4404  000460                     u5770:
  4405                           
  4406                           ; BSR set to: 0
  4407  000460  51BE               	movf	sprintf@fval& (0+255),w,b
  4408  000462  11BF               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4409  000464  11C0               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4410  000466  B4D8               	btfsc	status,2,c
  4411  000468  D055               	goto	l412
  4412                           
  4413                           ; BSR set to: 0
  4414  00046A  C0BE  F084         	movff	sprintf@fval,___fttol@f1
  4415  00046E  C0BF  F085         	movff	sprintf@fval+1,___fttol@f1+1
  4416  000472  C0C0  F086         	movff	sprintf@fval+2,___fttol@f1+2
  4417  000476  ECC2  F00D         	call	___fttol	;wreg free
  4418  00047A  0100               	movlb	0	; () banked
  4419  00047C  5184               	movf	?___fttol& (0+255),w,b
  4420  00047E  1185               	iorwf	(?___fttol+1)& (0+255),w,b
  4421  000480  1186               	iorwf	(?___fttol+2)& (0+255),w,b
  4422  000482  1187               	iorwf	(?___fttol+3)& (0+255),w,b
  4423  000484  B4D8               	btfsc	status,2,c
  4424                           
  4425                           ; BSR set to: 0
  4426  000486  BFBB               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4427  000488  D045               	goto	l412
  4428  00048A  51BB               	movf	(sprintf@exp+1)& (0+255),w,b
  4429  00048C  E104               	bnz	l4786
  4430  00048E  0E02               	movlw	2
  4431  000490  5DBA               	subwf	sprintf@exp& (0+255),w,b
  4432  000492  A0D8               	btfss	status,0,c
  4433  000494  D03F               	goto	l412
  4434  000496                     u5800:
  4435  000496                     l4786:
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4439  000496  C0B6  F019         	movff	sprintf@tmpval,___ftge@ff1
  4440  00049A  C0B7  F01A         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4441  00049E  C0B8  F01B         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4442  0004A2  0E70               	movlw	112
  4443  0004A4  6E1C               	movwf	___ftge@ff2,c
  4444  0004A6  0E89               	movlw	137
  4445  0004A8  6E1D               	movwf	___ftge@ff2+1,c
  4446  0004AA  0E40               	movlw	64
  4447  0004AC  6E1E               	movwf	___ftge@ff2+2,c
  4448  0004AE  EC82  F00F         	call	___ftge	;wreg free
  4449  0004B2  B0D8               	btfsc	status,0,c
  4450  0004B4  D003               	goto	l415
  4451                           
  4452                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4453  0004B6  0100               	movlb	0	; () banked
  4454  0004B8  0EF7               	movlw	247
  4455  0004BA  D002               	goto	L5
  4456  0004BC                     l415:
  4457                           
  4458                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4459                           
  4460                           ; BSR set to: 0
  4461  0004BC  0100               	movlb	0	; () banked
  4462  0004BE  0EF8               	movlw	248
  4463  0004C0                     L5:
  4464  0004C0  27BA               	addwf	sprintf@exp& (0+255),f,b
  4465  0004C2  0EFF               	movlw	255
  4466  0004C4  23BB               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;doprnt.c: 1124: }
  4470                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4471                           
  4472                           ; BSR set to: 0
  4473  0004C6  51BA               	movf	sprintf@exp& (0+255),w,b
  4474  0004C8  ECC9  F005         	call	_scale
  4475  0004CC  C058  F0B6         	movff	?_scale,sprintf@tmpval
  4476  0004D0  C059  F0B7         	movff	?_scale+1,sprintf@tmpval+1
  4477  0004D4  C05A  F0B8         	movff	?_scale+2,sprintf@tmpval+2
  4478                           
  4479                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4480  0004D8  C0BE  F019         	movff	sprintf@fval,__tdiv_to_l_@f1
  4481  0004DC  C0BF  F01A         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4482  0004E0  C0C0  F01B         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4483  0004E4  C0B6  F01C         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  4484  0004E8  C0B7  F01D         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  4485  0004EC  C0B8  F01E         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  4486  0004F0  ECED  F00A         	call	__tdiv_to_l_	;wreg free
  4487  0004F4  C019  F0B2         	movff	?__tdiv_to_l_,sprintf@val
  4488  0004F8  C01A  F0B3         	movff	?__tdiv_to_l_+1,sprintf@val+1
  4489  0004FC  C01B  F0B4         	movff	?__tdiv_to_l_+2,sprintf@val+2
  4490  000500  C01C  F0B5         	movff	?__tdiv_to_l_+3,sprintf@val+3
  4491                           
  4492                           ;doprnt.c: 1129: fval = 0.0;
  4493  000504  0E00               	movlw	0
  4494  000506  0100               	movlb	0	; () banked
  4495  000508  6FBE               	movwf	sprintf@fval& (0+255),b
  4496  00050A  0E00               	movlw	0
  4497  00050C  6FBF               	movwf	(sprintf@fval+1)& (0+255),b
  4498  00050E  0E00               	movlw	0
  4499  000510  6FC0               	movwf	(sprintf@fval+2)& (0+255),b
  4500                           
  4501                           ;doprnt.c: 1130: } else {
  4502  000512  D033               	goto	l421
  4503  000514                     l412:
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4507                           
  4508                           ; BSR set to: 0
  4509  000514  C0BE  F084         	movff	sprintf@fval,___fttol@f1
  4510  000518  C0BF  F085         	movff	sprintf@fval+1,___fttol@f1+1
  4511  00051C  C0C0  F086         	movff	sprintf@fval+2,___fttol@f1+2
  4512  000520  ECC2  F00D         	call	___fttol	;wreg free
  4513  000524  C084  F0B2         	movff	?___fttol,sprintf@val
  4514  000528  C085  F0B3         	movff	?___fttol+1,sprintf@val+1
  4515  00052C  C086  F0B4         	movff	?___fttol+2,sprintf@val+2
  4516  000530  C087  F0B5         	movff	?___fttol+3,sprintf@val+3
  4517                           
  4518                           ;doprnt.c: 1132: fval -= (double)val;
  4519  000534  C0BE  F090         	movff	sprintf@fval,___ftsub@f1
  4520  000538  C0BF  F091         	movff	sprintf@fval+1,___ftsub@f1+1
  4521  00053C  C0C0  F092         	movff	sprintf@fval+2,___ftsub@f1+2
  4522  000540  C0B2  F021         	movff	sprintf@val,___lltoft@c
  4523  000544  C0B3  F022         	movff	sprintf@val+1,___lltoft@c+1
  4524  000548  C0B4  F023         	movff	sprintf@val+2,___lltoft@c+2
  4525  00054C  C0B5  F024         	movff	sprintf@val+3,___lltoft@c+3
  4526  000550  EC54  F011         	call	___lltoft	;wreg free
  4527  000554  C021  F093         	movff	?___lltoft,___ftsub@f2
  4528  000558  C022  F094         	movff	?___lltoft+1,___ftsub@f2+1
  4529  00055C  C023  F095         	movff	?___lltoft+2,___ftsub@f2+2
  4530  000560  EC51  F012         	call	___ftsub	;wreg free
  4531  000564  C090  F0BE         	movff	?___ftsub,sprintf@fval
  4532  000568  C091  F0BF         	movff	?___ftsub+1,sprintf@fval+1
  4533  00056C  C092  F0C0         	movff	?___ftsub+2,sprintf@fval+2
  4534                           
  4535                           ;doprnt.c: 1133: exp = 0;
  4536  000570  0E00               	movlw	0
  4537  000572  0100               	movlb	0	; () banked
  4538  000574  6FBB               	movwf	(sprintf@exp+1)& (0+255),b
  4539  000576  0E00               	movlw	0
  4540  000578  6FBA               	movwf	sprintf@exp& (0+255),b
  4541  00057A                     l421:
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;doprnt.c: 1134: }
  4545                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4546                           
  4547                           ; BSR set to: 0
  4548  00057A  0E01               	movlw	1
  4549  00057C  6FC5               	movwf	sprintf@c& (0+255),b
  4550  00057E                     l4806:
  4551                           
  4552                           ; BSR set to: 0
  4553  00057E  0E0A               	movlw	10
  4554  000580  19C5               	xorwf	sprintf@c& (0+255),w,b
  4555  000582  B4D8               	btfsc	status,2,c
  4556  000584  D01B               	goto	u5840
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;doprnt.c: 1137: if(val < dpowers[c])
  4560                           
  4561                           ; BSR set to: 0
  4562                           
  4563                           ; BSR set to: 0
  4564  000586  51C5               	movf	sprintf@c& (0+255),w,b
  4565  000588  0D04               	mullw	4
  4566  00058A  0EA3               	movlw	low _dpowers
  4567  00058C  24F3               	addwf	prodl,w,c
  4568  00058E  6EF6               	movwf	tblptrl,c
  4569  000590  0EFE               	movlw	high _dpowers
  4570  000592  20F4               	addwfc	prodh,w,c
  4571  000594  6EF7               	movwf	tblptrh,c
  4572  000596                     	if	1	;There are 3 active tblptr bytes
  4573  000596  6AF8               	clrf	tblptru,c
  4574  000598  0E00               	movlw	low (__mediumconst shr (0+16))
  4575  00059A  22F8               	addwfc	tblptru,f,c
  4576  00059C                     	endif
  4577  00059C  0009               	tblrd		*+
  4578  00059E  50F5               	movf	tablat,w,c
  4579  0005A0  5DB2               	subwf	sprintf@val& (0+255),w,b
  4580  0005A2  0009               	tblrd		*+
  4581  0005A4  50F5               	movf	tablat,w,c
  4582  0005A6  59B3               	subwfb	(sprintf@val+1)& (0+255),w,b
  4583  0005A8  0009               	tblrd		*+
  4584  0005AA  50F5               	movf	tablat,w,c
  4585  0005AC  59B4               	subwfb	(sprintf@val+2)& (0+255),w,b
  4586  0005AE  0009               	tblrd		*+
  4587  0005B0  50F5               	movf	tablat,w,c
  4588  0005B2  59B5               	subwfb	(sprintf@val+3)& (0+255),w,b
  4589  0005B4  A0D8               	btfss	status,0,c
  4590  0005B6  D002               	goto	u5840
  4591                           
  4592                           ; BSR set to: 0
  4593                           
  4594                           ; BSR set to: 0
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;doprnt.c: 1138: break;
  4598  0005B8  2BC5               	incf	sprintf@c& (0+255),f,b
  4599  0005BA  D7E1               	goto	l4806
  4600  0005BC                     u5840:
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 1142: width -= prec + c + exp;
  4604                           
  4605                           ; BSR set to: 0
  4606  0005BC  C0C5  F0A3         	movff	sprintf@c,??_sprintf
  4607  0005C0  6BA4               	clrf	(??_sprintf+1)& (0+255),b
  4608  0005C2  BFA3               	btfsc	??_sprintf& (0+255),7,b
  4609  0005C4  07A4               	decf	(??_sprintf+1)& (0+255),f,b
  4610  0005C6  51C3               	movf	sprintf@prec& (0+255),w,b
  4611  0005C8  27A3               	addwf	??_sprintf& (0+255),f,b
  4612  0005CA  51C4               	movf	(sprintf@prec+1)& (0+255),w,b
  4613  0005CC  23A4               	addwfc	(??_sprintf+1)& (0+255),f,b
  4614  0005CE  51BA               	movf	sprintf@exp& (0+255),w,b
  4615  0005D0  27A3               	addwf	??_sprintf& (0+255),f,b
  4616  0005D2  51BB               	movf	(sprintf@exp+1)& (0+255),w,b
  4617  0005D4  23A4               	addwfc	(??_sprintf+1)& (0+255),f,b
  4618  0005D6  51A3               	movf	??_sprintf& (0+255),w,b
  4619  0005D8  5FC1               	subwf	sprintf@width& (0+255),f,b
  4620  0005DA  51A4               	movf	(??_sprintf+1)& (0+255),w,b
  4621  0005DC  5BC2               	subwfb	(sprintf@width+1)& (0+255),f,b
  4622                           
  4623                           ;doprnt.c: 1143: if(
  4624                           ;doprnt.c: 1147: prec)
  4625  0005DE  51C3               	movf	sprintf@prec& (0+255),w,b
  4626  0005E0  11C4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4627  0005E2  B4D8               	btfsc	status,2,c
  4628  0005E4  D003               	goto	l425
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;doprnt.c: 1148: width--;
  4632  0005E6  07C1               	decf	sprintf@width& (0+255),f,b
  4633  0005E8  A0D8               	btfss	status,0,c
  4634  0005EA  07C2               	decf	(sprintf@width+1)& (0+255),f,b
  4635  0005EC                     l425:
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;doprnt.c: 1149: if(flag & 0x03)
  4639                           
  4640                           ; BSR set to: 0
  4641  0005EC  0E03               	movlw	3
  4642  0005EE  15BC               	andwf	sprintf@flag& (0+255),w,b
  4643  0005F0  6FA3               	movwf	??_sprintf& (0+255),b
  4644  0005F2  0E00               	movlw	0
  4645  0005F4  15BD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4646  0005F6  6FA4               	movwf	(??_sprintf+1)& (0+255),b
  4647  0005F8  51A3               	movf	??_sprintf& (0+255),w,b
  4648  0005FA  11A4               	iorwf	(??_sprintf+1)& (0+255),w,b
  4649  0005FC  B4D8               	btfsc	status,2,c
  4650  0005FE  D003               	goto	l426
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;doprnt.c: 1150: width--;
  4654  000600  07C1               	decf	sprintf@width& (0+255),f,b
  4655  000602  A0D8               	btfss	status,0,c
  4656  000604  07C2               	decf	(sprintf@width+1)& (0+255),f,b
  4657  000606                     l426:
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;doprnt.c: 1153: if(flag & 0x04) {
  4661                           
  4662                           ; BSR set to: 0
  4663  000606  A5BC               	btfss	sprintf@flag& (0+255),2,b
  4664  000608  D031               	goto	l433
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;doprnt.c: 1157: if(flag & 0x03)
  4668  00060A  0E03               	movlw	3
  4669  00060C  15BC               	andwf	sprintf@flag& (0+255),w,b
  4670  00060E  6FA3               	movwf	??_sprintf& (0+255),b
  4671  000610  0E00               	movlw	0
  4672  000612  15BD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4673  000614  6FA4               	movwf	(??_sprintf+1)& (0+255),b
  4674  000616  51A3               	movf	??_sprintf& (0+255),w,b
  4675  000618  11A4               	iorwf	(??_sprintf+1)& (0+255),w,b
  4676  00061A  B4D8               	btfsc	status,2,c
  4677  00061C  D014               	goto	l429
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  4681  00061E  C096  FFD9         	movff	sprintf@sp,fsr2l
  4682  000622  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  4683  000626  0E2D               	movlw	45
  4684  000628  6EDF               	movwf	indf2,c
  4685                           
  4686                           ; BSR set to: 0
  4687  00062A  4B96               	infsnz	sprintf@sp& (0+255),f,b
  4688  00062C  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;doprnt.c: 1168: while(width > 0) {
  4692  00062E  D00B               	goto	l429
  4693  000630                     l4834:
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  4697  000630  C096  FFD9         	movff	sprintf@sp,fsr2l
  4698  000634  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  4699  000638  0E30               	movlw	48
  4700  00063A  6EDF               	movwf	indf2,c
  4701                           
  4702                           ; BSR set to: 0
  4703  00063C  4B96               	infsnz	sprintf@sp& (0+255),f,b
  4704  00063E  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;doprnt.c: 1170: width--;
  4708  000640  07C1               	decf	sprintf@width& (0+255),f,b
  4709  000642  A0D8               	btfss	status,0,c
  4710  000644  07C2               	decf	(sprintf@width+1)& (0+255),f,b
  4711  000646                     l429:
  4712                           
  4713                           ; BSR set to: 0
  4714                           
  4715                           ; BSR set to: 0
  4716  000646  BFC2               	btfsc	(sprintf@width+1)& (0+255),7,b
  4717  000648  D075               	goto	l437
  4718  00064A  51C2               	movf	(sprintf@width+1)& (0+255),w,b
  4719  00064C  E1F1               	bnz	l4834
  4720  00064E  05C1               	decf	sprintf@width& (0+255),w,b
  4721  000650  A0D8               	btfss	status,0,c
  4722  000652  D070               	goto	l437
  4723  000654  D7ED               	goto	l430
  4724  000656                     l4842:
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  4728  000656  C096  FFD9         	movff	sprintf@sp,fsr2l
  4729  00065A  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  4730  00065E  0E20               	movlw	32
  4731  000660  6EDF               	movwf	indf2,c
  4732                           
  4733                           ; BSR set to: 0
  4734  000662  4B96               	infsnz	sprintf@sp& (0+255),f,b
  4735  000664  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;doprnt.c: 1182: width--;
  4739  000666  07C1               	decf	sprintf@width& (0+255),f,b
  4740  000668  A0D8               	btfss	status,0,c
  4741  00066A  07C2               	decf	(sprintf@width+1)& (0+255),f,b
  4742  00066C                     l433:
  4743                           
  4744                           ; BSR set to: 0
  4745                           
  4746                           ; BSR set to: 0
  4747  00066C  BFC2               	btfsc	(sprintf@width+1)& (0+255),7,b
  4748  00066E  D005               	goto	u5900
  4749  000670  51C2               	movf	(sprintf@width+1)& (0+255),w,b
  4750  000672  E1F1               	bnz	l4842
  4751  000674  05C1               	decf	sprintf@width& (0+255),w,b
  4752  000676  B0D8               	btfsc	status,0,c
  4753  000678  D7EE               	goto	l434
  4754  00067A                     u5900:
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;doprnt.c: 1183: }
  4758                           ;doprnt.c: 1188: if(flag & 0x03)
  4759                           
  4760                           ; BSR set to: 0
  4761  00067A  0E03               	movlw	3
  4762  00067C  15BC               	andwf	sprintf@flag& (0+255),w,b
  4763  00067E  6FA3               	movwf	??_sprintf& (0+255),b
  4764  000680  0E00               	movlw	0
  4765  000682  15BD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4766  000684  6FA4               	movwf	(??_sprintf+1)& (0+255),b
  4767  000686  51A3               	movf	??_sprintf& (0+255),w,b
  4768  000688  11A4               	iorwf	(??_sprintf+1)& (0+255),w,b
  4769  00068A  B4D8               	btfsc	status,2,c
  4770  00068C  D053               	goto	l437
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4774  00068E  C096  FFD9         	movff	sprintf@sp,fsr2l
  4775  000692  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  4776  000696  0E2D               	movlw	45
  4777  000698  D04A               	goto	L6
  4778  00069A                     
  4779                           ; BSR set to: 0
  4780                           ;doprnt.c: 1200: {
  4781                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4782                           
  4783                           ; BSR set to: 0
  4784  00069A  C0B2  F019         	movff	sprintf@val,___lldiv@dividend
  4785  00069E  C0B3  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  4786  0006A2  C0B4  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  4787  0006A6  C0B5  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  4788  0006AA  51C5               	movf	sprintf@c& (0+255),w,b
  4789  0006AC  0D04               	mullw	4
  4790  0006AE  0EA3               	movlw	low _dpowers
  4791  0006B0  24F3               	addwf	prodl,w,c
  4792  0006B2  6EF6               	movwf	tblptrl,c
  4793  0006B4  0EFE               	movlw	high _dpowers
  4794  0006B6  20F4               	addwfc	prodh,w,c
  4795  0006B8  6EF7               	movwf	tblptrh,c
  4796  0006BA                     	if	1	;There are 3 active tblptr bytes
  4797  0006BA  6AF8               	clrf	tblptru,c
  4798  0006BC  0E00               	movlw	low (__mediumconst shr (0+16))
  4799  0006BE  22F8               	addwfc	tblptru,f,c
  4800  0006C0                     	endif
  4801  0006C0  0009               	tblrd		*+
  4802  0006C2  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4803  0006C6  0009               	tblrd		*+
  4804  0006C8  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4805  0006CC  0009               	tblrd		*+
  4806  0006CE  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4807  0006D2  000A               	tblrd		*-
  4808  0006D4  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4809  0006D8  EC0C  F010         	call	___lldiv	;wreg free
  4810  0006DC  C019  F0B6         	movff	?___lldiv,sprintf@tmpval
  4811  0006E0  C01A  F0B7         	movff	?___lldiv+1,sprintf@tmpval+1
  4812  0006E4  C01B  F0B8         	movff	?___lldiv+2,sprintf@tmpval+2
  4813  0006E8  C01C  F0B9         	movff	?___lldiv+3,sprintf@tmpval+3
  4814                           
  4815                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4816  0006EC  C0B6  F026         	movff	sprintf@tmpval,___llmod@dividend
  4817  0006F0  C0B7  F027         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4818  0006F4  C0B8  F028         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4819  0006F8  C0B9  F029         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4820  0006FC  0E0A               	movlw	10
  4821  0006FE  6E2A               	movwf	___llmod@divisor,c
  4822  000700  0E00               	movlw	0
  4823  000702  6E2B               	movwf	___llmod@divisor+1,c
  4824  000704  0E00               	movlw	0
  4825  000706  6E2C               	movwf	___llmod@divisor+2,c
  4826  000708  0E00               	movlw	0
  4827  00070A  6E2D               	movwf	___llmod@divisor+3,c
  4828  00070C  ECF0  F010         	call	___llmod	;wreg free
  4829  000710  C026  F0B6         	movff	?___llmod,sprintf@tmpval
  4830  000714  C027  F0B7         	movff	?___llmod+1,sprintf@tmpval+1
  4831  000718  C028  F0B8         	movff	?___llmod+2,sprintf@tmpval+2
  4832  00071C  C029  F0B9         	movff	?___llmod+3,sprintf@tmpval+3
  4833                           
  4834                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4835  000720  0100               	movlb	0	; () banked
  4836  000722  51B6               	movf	sprintf@tmpval& (0+255),w,b
  4837  000724  0F30               	addlw	48
  4838  000726  C096  FFD9         	movff	sprintf@sp,fsr2l
  4839  00072A  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  4840  00072E                     L6:
  4841  00072E  6EDF               	movwf	indf2,c
  4842                           
  4843                           ; BSR set to: 0
  4844  000730  4B96               	infsnz	sprintf@sp& (0+255),f,b
  4845  000732  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  4846  000734                     l437:
  4847                           
  4848                           ; BSR set to: 0
  4849                           
  4850                           ; BSR set to: 0
  4851  000734  07C5               	decf	sprintf@c& (0+255),f,b
  4852  000736  29C5               	incf	sprintf@c& (0+255),w,b
  4853  000738  B4D8               	btfsc	status,2,c
  4854  00073A  D00C               	goto	l440
  4855  00073C  D7AE               	goto	l438
  4856  00073E                     l4866:
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4860  00073E  C096  FFD9         	movff	sprintf@sp,fsr2l
  4861  000742  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  4862  000746  0E30               	movlw	48
  4863  000748  6EDF               	movwf	indf2,c
  4864                           
  4865                           ; BSR set to: 0
  4866  00074A  4B96               	infsnz	sprintf@sp& (0+255),f,b
  4867  00074C  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;doprnt.c: 1209: exp--;
  4871  00074E  07BA               	decf	sprintf@exp& (0+255),f,b
  4872  000750  A0D8               	btfss	status,0,c
  4873  000752  07BB               	decf	(sprintf@exp+1)& (0+255),f,b
  4874  000754                     l440:
  4875                           
  4876                           ; BSR set to: 0
  4877                           
  4878                           ; BSR set to: 0
  4879  000754  BFBB               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4880  000756  D005               	goto	u5930
  4881  000758  51BB               	movf	(sprintf@exp+1)& (0+255),w,b
  4882  00075A  E1F1               	bnz	l4866
  4883  00075C  05BA               	decf	sprintf@exp& (0+255),w,b
  4884  00075E  B0D8               	btfsc	status,0,c
  4885  000760  D7EE               	goto	l441
  4886  000762                     u5930:
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;doprnt.c: 1210: }
  4890                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4891                           
  4892                           ; BSR set to: 0
  4893  000762  BFC4               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4894  000764  D009               	goto	l443
  4895  000766  51C4               	movf	(sprintf@prec+1)& (0+255),w,b
  4896  000768  E104               	bnz	u5940
  4897  00076A  0E09               	movlw	9
  4898  00076C  5DC3               	subwf	sprintf@prec& (0+255),w,b
  4899  00076E  A0D8               	btfss	status,0,c
  4900  000770  D003               	goto	l443
  4901  000772                     u5940:
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4905  000772  0E08               	movlw	8
  4906  000774  6FC5               	movwf	sprintf@c& (0+255),b
  4907  000776  D002               	goto	l444
  4908  000778                     l443:
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;doprnt.c: 1213: else
  4912                           ;doprnt.c: 1214: c = prec;
  4913  000778  C0C3  F0C5         	movff	sprintf@prec,sprintf@c
  4914  00077C                     l444:
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;doprnt.c: 1215: prec -= c;
  4918                           
  4919                           ; BSR set to: 0
  4920  00077C  51C5               	movf	sprintf@c& (0+255),w,b
  4921  00077E  5FC3               	subwf	sprintf@prec& (0+255),f,b
  4922  000780  0E00               	movlw	0
  4923  000782  BFC5               	btfsc	sprintf@c& (0+255),7,b
  4924  000784  0EFF               	movlw	255
  4925  000786  5BC4               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;doprnt.c: 1219: if(c)
  4929  000788  51C5               	movf	sprintf@c& (0+255),w,b
  4930  00078A  B4D8               	btfsc	status,2,c
  4931  00078C  D008               	goto	l445
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4935  00078E  C096  FFD9         	movff	sprintf@sp,fsr2l
  4936  000792  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  4937  000796  0E2E               	movlw	46
  4938  000798  6EDF               	movwf	indf2,c
  4939                           
  4940                           ; BSR set to: 0
  4941  00079A  4B96               	infsnz	sprintf@sp& (0+255),f,b
  4942  00079C  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  4943  00079E                     l445:
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4947                           
  4948                           ; BSR set to: 0
  4949  00079E  51C5               	movf	sprintf@c& (0+255),w,b
  4950  0007A0  ECC9  F005         	call	_scale
  4951  0007A4  C058  F0A9         	movff	?_scale,_sprintf$1290
  4952  0007A8  C059  F0AA         	movff	?_scale+1,_sprintf$1290+1
  4953  0007AC  C05A  F0AB         	movff	?_scale+2,_sprintf$1290+2
  4954                           
  4955                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4956  0007B0  C0BE  F04C         	movff	sprintf@fval,___ftmul@f2
  4957  0007B4  C0BF  F04D         	movff	sprintf@fval+1,___ftmul@f2+1
  4958  0007B8  C0C0  F04E         	movff	sprintf@fval+2,___ftmul@f2+2
  4959  0007BC  C0A9  F049         	movff	_sprintf$1290,___ftmul@f1
  4960  0007C0  C0AA  F04A         	movff	_sprintf$1290+1,___ftmul@f1+1
  4961  0007C4  C0AB  F04B         	movff	_sprintf$1290+2,___ftmul@f1+2
  4962  0007C8  EC3E  F00E         	call	___ftmul	;wreg free
  4963  0007CC  C049  F084         	movff	?___ftmul,___fttol@f1
  4964  0007D0  C04A  F085         	movff	?___ftmul+1,___fttol@f1+1
  4965  0007D4  C04B  F086         	movff	?___ftmul+2,___fttol@f1+2
  4966  0007D8  ECC2  F00D         	call	___fttol	;wreg free
  4967  0007DC  C084  F0B2         	movff	?___fttol,sprintf@val
  4968  0007E0  C085  F0B3         	movff	?___fttol+1,sprintf@val+1
  4969  0007E4  C086  F0B4         	movff	?___fttol+2,sprintf@val+2
  4970  0007E8  C087  F0B5         	movff	?___fttol+3,sprintf@val+3
  4971                           
  4972                           ;doprnt.c: 1228: while(c--) {
  4973  0007EC  D077               	goto	l446
  4974  0007EE                     
  4975                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4976  0007EE  C0B2  F019         	movff	sprintf@val,___lldiv@dividend
  4977  0007F2  C0B3  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  4978  0007F6  C0B4  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  4979  0007FA  C0B5  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  4980  0007FE  0100               	movlb	0	; () banked
  4981  000800  51C5               	movf	sprintf@c& (0+255),w,b
  4982  000802  0D04               	mullw	4
  4983  000804  0EA3               	movlw	low _dpowers
  4984  000806  24F3               	addwf	prodl,w,c
  4985  000808  6EF6               	movwf	tblptrl,c
  4986  00080A  0EFE               	movlw	high _dpowers
  4987  00080C  20F4               	addwfc	prodh,w,c
  4988  00080E  6EF7               	movwf	tblptrh,c
  4989  000810                     	if	1	;There are 3 active tblptr bytes
  4990  000810  6AF8               	clrf	tblptru,c
  4991  000812  0E00               	movlw	low (__mediumconst shr (0+16))
  4992  000814  22F8               	addwfc	tblptru,f,c
  4993  000816                     	endif
  4994  000816  0009               	tblrd		*+
  4995  000818  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4996  00081C  0009               	tblrd		*+
  4997  00081E  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4998  000822  0009               	tblrd		*+
  4999  000824  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5000  000828  000A               	tblrd		*-
  5001  00082A  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5002  00082E  EC0C  F010         	call	___lldiv	;wreg free
  5003  000832  C019  F0B6         	movff	?___lldiv,sprintf@tmpval
  5004  000836  C01A  F0B7         	movff	?___lldiv+1,sprintf@tmpval+1
  5005  00083A  C01B  F0B8         	movff	?___lldiv+2,sprintf@tmpval+2
  5006  00083E  C01C  F0B9         	movff	?___lldiv+3,sprintf@tmpval+3
  5007                           
  5008                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5009  000842  C0B6  F026         	movff	sprintf@tmpval,___llmod@dividend
  5010  000846  C0B7  F027         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5011  00084A  C0B8  F028         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5012  00084E  C0B9  F029         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5013  000852  0E0A               	movlw	10
  5014  000854  6E2A               	movwf	___llmod@divisor,c
  5015  000856  0E00               	movlw	0
  5016  000858  6E2B               	movwf	___llmod@divisor+1,c
  5017  00085A  0E00               	movlw	0
  5018  00085C  6E2C               	movwf	___llmod@divisor+2,c
  5019  00085E  0E00               	movlw	0
  5020  000860  6E2D               	movwf	___llmod@divisor+3,c
  5021  000862  ECF0  F010         	call	___llmod	;wreg free
  5022  000866  C026  F0B6         	movff	?___llmod,sprintf@tmpval
  5023  00086A  C027  F0B7         	movff	?___llmod+1,sprintf@tmpval+1
  5024  00086E  C028  F0B8         	movff	?___llmod+2,sprintf@tmpval+2
  5025  000872  C029  F0B9         	movff	?___llmod+3,sprintf@tmpval+3
  5026                           
  5027                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  5028  000876  0100               	movlb	0	; () banked
  5029  000878  51B6               	movf	sprintf@tmpval& (0+255),w,b
  5030  00087A  0F30               	addlw	48
  5031  00087C  C096  FFD9         	movff	sprintf@sp,fsr2l
  5032  000880  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  5033  000884  6EDF               	movwf	indf2,c
  5034                           
  5035                           ; BSR set to: 0
  5036  000886  4B96               	infsnz	sprintf@sp& (0+255),f,b
  5037  000888  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;doprnt.c: 1232: val %= dpowers[c];
  5041  00088A  C0B2  F026         	movff	sprintf@val,___llmod@dividend
  5042  00088E  C0B3  F027         	movff	sprintf@val+1,___llmod@dividend+1
  5043  000892  C0B4  F028         	movff	sprintf@val+2,___llmod@dividend+2
  5044  000896  C0B5  F029         	movff	sprintf@val+3,___llmod@dividend+3
  5045  00089A  51C5               	movf	sprintf@c& (0+255),w,b
  5046  00089C  0D04               	mullw	4
  5047  00089E  0EA3               	movlw	low _dpowers
  5048  0008A0  24F3               	addwf	prodl,w,c
  5049  0008A2  6EF6               	movwf	tblptrl,c
  5050  0008A4  0EFE               	movlw	high _dpowers
  5051  0008A6  20F4               	addwfc	prodh,w,c
  5052  0008A8  6EF7               	movwf	tblptrh,c
  5053  0008AA                     	if	1	;There are 3 active tblptr bytes
  5054  0008AA  6AF8               	clrf	tblptru,c
  5055  0008AC  0E00               	movlw	low (__mediumconst shr (0+16))
  5056  0008AE  22F8               	addwfc	tblptru,f,c
  5057  0008B0                     	endif
  5058  0008B0  0009               	tblrd		*+
  5059  0008B2  CFF5 F02A          	movff	tablat,___llmod@divisor
  5060  0008B6  0009               	tblrd		*+
  5061  0008B8  CFF5 F02B          	movff	tablat,___llmod@divisor+1
  5062  0008BC  0009               	tblrd		*+
  5063  0008BE  CFF5 F02C          	movff	tablat,___llmod@divisor+2
  5064  0008C2  000A               	tblrd		*-
  5065  0008C4  CFF5 F02D          	movff	tablat,___llmod@divisor+3
  5066  0008C8  ECF0  F010         	call	___llmod	;wreg free
  5067  0008CC  C026  F0B2         	movff	?___llmod,sprintf@val
  5068  0008D0  C027  F0B3         	movff	?___llmod+1,sprintf@val+1
  5069  0008D4  C028  F0B4         	movff	?___llmod+2,sprintf@val+2
  5070  0008D8  C029  F0B5         	movff	?___llmod+3,sprintf@val+3
  5071  0008DC                     l446:
  5072  0008DC  0100               	movlb	0	; () banked
  5073  0008DE  07C5               	decf	sprintf@c& (0+255),f,b
  5074  0008E0  29C5               	incf	sprintf@c& (0+255),w,b
  5075  0008E2  B4D8               	btfsc	status,2,c
  5076  0008E4  D00C               	goto	l449
  5077  0008E6  D783               	goto	l447
  5078  0008E8                     
  5079                           ; BSR set to: 0
  5080                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  5081                           
  5082                           ; BSR set to: 0
  5083  0008E8  C096  FFD9         	movff	sprintf@sp,fsr2l
  5084  0008EC  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  5085  0008F0  0E30               	movlw	48
  5086  0008F2  6EDF               	movwf	indf2,c
  5087                           
  5088                           ; BSR set to: 0
  5089  0008F4  4B96               	infsnz	sprintf@sp& (0+255),f,b
  5090  0008F6  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;doprnt.c: 1237: prec--;
  5094  0008F8  07C3               	decf	sprintf@prec& (0+255),f,b
  5095  0008FA  A0D8               	btfss	status,0,c
  5096  0008FC  07C4               	decf	(sprintf@prec+1)& (0+255),f,b
  5097  0008FE                     l449:
  5098                           
  5099                           ; BSR set to: 0
  5100                           
  5101                           ; BSR set to: 0
  5102  0008FE  51C3               	movf	sprintf@prec& (0+255),w,b
  5103  000900  11C4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5104  000902  B4D8               	btfsc	status,2,c
  5105  000904  D131               	goto	u6170
  5106  000906  D7F0               	goto	l450
  5107  000908                     l403:
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;doprnt.c: 1246: }
  5111                           ;doprnt.c: 1273: {
  5112                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5113                           
  5114                           ; BSR set to: 0
  5115  000908  C0AE  FFD9         	movff	sprintf@ap,fsr2l
  5116  00090C  C0AF  FFDA         	movff	sprintf@ap+1,fsr2h
  5117  000910  CFDE F0A3          	movff	postinc2,??_sprintf
  5118  000914  CFDD F0A4          	movff	postdec2,??_sprintf+1
  5119  000918  C0A3  F0B2         	movff	??_sprintf,sprintf@val
  5120  00091C  C0A4  F0B3         	movff	??_sprintf+1,sprintf@val+1
  5121  000920  6BB4               	clrf	(sprintf@val+2)& (0+255),b
  5122  000922  6BB5               	clrf	(sprintf@val+3)& (0+255),b
  5123                           
  5124                           ; BSR set to: 0
  5125  000924  0E02               	movlw	2
  5126  000926  27AE               	addwf	sprintf@ap& (0+255),f,b
  5127  000928  0E00               	movlw	0
  5128  00092A  23AF               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;doprnt.c: 1287: }
  5132                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5133  00092C  51C3               	movf	sprintf@prec& (0+255),w,b
  5134  00092E  11C4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5135  000930  A4D8               	btfss	status,2,c
  5136  000932  D008               	goto	l452
  5137                           
  5138                           ; BSR set to: 0
  5139  000934  51B2               	movf	sprintf@val& (0+255),w,b
  5140  000936  11B3               	iorwf	(sprintf@val+1)& (0+255),w,b
  5141  000938  11B4               	iorwf	(sprintf@val+2)& (0+255),w,b
  5142  00093A  11B5               	iorwf	(sprintf@val+3)& (0+255),w,b
  5143  00093C  A4D8               	btfss	status,2,c
  5144  00093E  D002               	goto	l452
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;doprnt.c: 1291: prec++;
  5148  000940  4BC3               	infsnz	sprintf@prec& (0+255),f,b
  5149  000942  2BC4               	incf	(sprintf@prec+1)& (0+255),f,b
  5150  000944                     l452:
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5154                           
  5155                           ; BSR set to: 0
  5156  000944  0E01               	movlw	1
  5157  000946  6FC5               	movwf	sprintf@c& (0+255),b
  5158  000948                     l4922:
  5159                           
  5160                           ; BSR set to: 0
  5161  000948  0E0A               	movlw	10
  5162  00094A  19C5               	xorwf	sprintf@c& (0+255),w,b
  5163  00094C  B4D8               	btfsc	status,2,c
  5164  00094E  D01B               	goto	u6020
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;doprnt.c: 1306: if(val < dpowers[c])
  5168                           
  5169                           ; BSR set to: 0
  5170                           
  5171                           ; BSR set to: 0
  5172  000950  51C5               	movf	sprintf@c& (0+255),w,b
  5173  000952  0D04               	mullw	4
  5174  000954  0EA3               	movlw	low _dpowers
  5175  000956  24F3               	addwf	prodl,w,c
  5176  000958  6EF6               	movwf	tblptrl,c
  5177  00095A  0EFE               	movlw	high _dpowers
  5178  00095C  20F4               	addwfc	prodh,w,c
  5179  00095E  6EF7               	movwf	tblptrh,c
  5180  000960                     	if	1	;There are 3 active tblptr bytes
  5181  000960  6AF8               	clrf	tblptru,c
  5182  000962  0E00               	movlw	low (__mediumconst shr (0+16))
  5183  000964  22F8               	addwfc	tblptru,f,c
  5184  000966                     	endif
  5185  000966  0009               	tblrd		*+
  5186  000968  50F5               	movf	tablat,w,c
  5187  00096A  5DB2               	subwf	sprintf@val& (0+255),w,b
  5188  00096C  0009               	tblrd		*+
  5189  00096E  50F5               	movf	tablat,w,c
  5190  000970  59B3               	subwfb	(sprintf@val+1)& (0+255),w,b
  5191  000972  0009               	tblrd		*+
  5192  000974  50F5               	movf	tablat,w,c
  5193  000976  59B4               	subwfb	(sprintf@val+2)& (0+255),w,b
  5194  000978  0009               	tblrd		*+
  5195  00097A  50F5               	movf	tablat,w,c
  5196  00097C  59B5               	subwfb	(sprintf@val+3)& (0+255),w,b
  5197  00097E  A0D8               	btfss	status,0,c
  5198  000980  D002               	goto	u6020
  5199                           
  5200                           ; BSR set to: 0
  5201                           
  5202                           ; BSR set to: 0
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;doprnt.c: 1307: break;
  5206  000982  2BC5               	incf	sprintf@c& (0+255),f,b
  5207  000984  D7E1               	goto	l4922
  5208  000986                     u6020:
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;doprnt.c: 1339: if(c < prec)
  5212                           
  5213                           ; BSR set to: 0
  5214  000986  0E80               	movlw	128
  5215  000988  BFC5               	btfsc	sprintf@c& (0+255),7,b
  5216  00098A  0E7F               	movlw	127
  5217  00098C  6FA3               	movwf	??_sprintf& (0+255),b
  5218  00098E  51C3               	movf	sprintf@prec& (0+255),w,b
  5219  000990  5DC5               	subwf	sprintf@c& (0+255),w,b
  5220  000992  51C4               	movf	(sprintf@prec+1)& (0+255),w,b
  5221  000994  0A80               	xorlw	128
  5222  000996  59A3               	subwfb	??_sprintf& (0+255),w,b
  5223  000998  B0D8               	btfsc	status,0,c
  5224  00099A  D003               	goto	l456
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;doprnt.c: 1340: c = prec;
  5228  00099C  C0C3  F0C5         	movff	sprintf@prec,sprintf@c
  5229  0009A0  D010               	goto	l458
  5230  0009A2                     l456:
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;doprnt.c: 1341: else if(prec < c)
  5234                           
  5235                           ; BSR set to: 0
  5236  0009A2  51C4               	movf	(sprintf@prec+1)& (0+255),w,b
  5237  0009A4  0A80               	xorlw	128
  5238  0009A6  6FA3               	movwf	??_sprintf& (0+255),b
  5239  0009A8  51C5               	movf	sprintf@c& (0+255),w,b
  5240  0009AA  5DC3               	subwf	sprintf@prec& (0+255),w,b
  5241  0009AC  0E80               	movlw	128
  5242  0009AE  BFC5               	btfsc	sprintf@c& (0+255),7,b
  5243  0009B0  0E7F               	movlw	127
  5244  0009B2  59A3               	subwfb	??_sprintf& (0+255),w,b
  5245  0009B4  B0D8               	btfsc	status,0,c
  5246  0009B6  D005               	goto	l458
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;doprnt.c: 1342: prec = c;
  5250  0009B8  51C5               	movf	sprintf@c& (0+255),w,b
  5251  0009BA  6FC3               	movwf	sprintf@prec& (0+255),b
  5252  0009BC  6BC4               	clrf	(sprintf@prec+1)& (0+255),b
  5253  0009BE  BFC3               	btfsc	sprintf@prec& (0+255),7,b
  5254  0009C0  07C4               	decf	(sprintf@prec+1)& (0+255),f,b
  5255  0009C2                     l458:
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5259                           
  5260                           ; BSR set to: 0
  5261                           
  5262                           ; BSR set to: 0
  5263  0009C2  51C1               	movf	sprintf@width& (0+255),w,b
  5264  0009C4  11C2               	iorwf	(sprintf@width+1)& (0+255),w,b
  5265  0009C6  B4D8               	btfsc	status,2,c
  5266  0009C8  D00D               	goto	l459
  5267                           
  5268                           ; BSR set to: 0
  5269  0009CA  0E03               	movlw	3
  5270  0009CC  15BC               	andwf	sprintf@flag& (0+255),w,b
  5271  0009CE  6FA3               	movwf	??_sprintf& (0+255),b
  5272  0009D0  0E00               	movlw	0
  5273  0009D2  15BD               	andwf	(sprintf@flag+1)& (0+255),w,b
  5274  0009D4  6FA4               	movwf	(??_sprintf+1)& (0+255),b
  5275  0009D6  51A3               	movf	??_sprintf& (0+255),w,b
  5276  0009D8  11A4               	iorwf	(??_sprintf+1)& (0+255),w,b
  5277  0009DA  B4D8               	btfsc	status,2,c
  5278  0009DC  D003               	goto	l459
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;doprnt.c: 1346: width--;
  5282  0009DE  07C1               	decf	sprintf@width& (0+255),f,b
  5283  0009E0  A0D8               	btfss	status,0,c
  5284  0009E2  07C2               	decf	(sprintf@width+1)& (0+255),f,b
  5285  0009E4                     l459:
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5289                           
  5290                           ; BSR set to: 0
  5291  0009E4  ADBD               	btfss	(sprintf@flag+1)& (0+255),6,b
  5292  0009E6  D013               	goto	l462
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;doprnt.c: 1349: if(width > prec)
  5296  0009E8  51C1               	movf	sprintf@width& (0+255),w,b
  5297  0009EA  5DC3               	subwf	sprintf@prec& (0+255),w,b
  5298  0009EC  51C4               	movf	(sprintf@prec+1)& (0+255),w,b
  5299  0009EE  0A80               	xorlw	128
  5300  0009F0  6FA3               	movwf	??_sprintf& (0+255),b
  5301  0009F2  51C2               	movf	(sprintf@width+1)& (0+255),w,b
  5302  0009F4  0A80               	xorlw	128
  5303  0009F6  59A3               	subwfb	??_sprintf& (0+255),w,b
  5304  0009F8  B0D8               	btfsc	status,0,c
  5305  0009FA  D005               	goto	l461
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;doprnt.c: 1350: width -= prec;
  5309  0009FC  51C3               	movf	sprintf@prec& (0+255),w,b
  5310  0009FE  5FC1               	subwf	sprintf@width& (0+255),f,b
  5311  000A00  51C4               	movf	(sprintf@prec+1)& (0+255),w,b
  5312  000A02  5BC2               	subwfb	(sprintf@width+1)& (0+255),f,b
  5313  000A04  D004               	goto	l462
  5314  000A06                     l461:
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;doprnt.c: 1351: else
  5318                           ;doprnt.c: 1352: width = 0;
  5319                           
  5320                           ; BSR set to: 0
  5321  000A06  0E00               	movlw	0
  5322  000A08  6FC2               	movwf	(sprintf@width+1)& (0+255),b
  5323  000A0A  0E00               	movlw	0
  5324  000A0C  6FC1               	movwf	sprintf@width& (0+255),b
  5325  000A0E                     l462:
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;doprnt.c: 1353: }
  5329                           ;doprnt.c: 1381: if(width > c)
  5330                           
  5331                           ; BSR set to: 0
  5332                           
  5333                           ; BSR set to: 0
  5334  000A0E  0E80               	movlw	128
  5335  000A10  BFC5               	btfsc	sprintf@c& (0+255),7,b
  5336  000A12  0E7F               	movlw	127
  5337  000A14  6FA3               	movwf	??_sprintf& (0+255),b
  5338  000A16  51C1               	movf	sprintf@width& (0+255),w,b
  5339  000A18  5DC5               	subwf	sprintf@c& (0+255),w,b
  5340  000A1A  51C2               	movf	(sprintf@width+1)& (0+255),w,b
  5341  000A1C  0A80               	xorlw	128
  5342  000A1E  59A3               	subwfb	??_sprintf& (0+255),w,b
  5343  000A20  B0D8               	btfsc	status,0,c
  5344  000A22  D007               	goto	l463
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;doprnt.c: 1382: width -= c;
  5348  000A24  51C5               	movf	sprintf@c& (0+255),w,b
  5349  000A26  5FC1               	subwf	sprintf@width& (0+255),f,b
  5350  000A28  0E00               	movlw	0
  5351  000A2A  BFC5               	btfsc	sprintf@c& (0+255),7,b
  5352  000A2C  0EFF               	movlw	255
  5353  000A2E  5BC2               	subwfb	(sprintf@width+1)& (0+255),f,b
  5354  000A30  D004               	goto	l464
  5355  000A32                     l463:
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;doprnt.c: 1383: else
  5359                           ;doprnt.c: 1384: width = 0;
  5360                           
  5361                           ; BSR set to: 0
  5362  000A32  0E00               	movlw	0
  5363  000A34  6FC2               	movwf	(sprintf@width+1)& (0+255),b
  5364  000A36  0E00               	movlw	0
  5365  000A38  6FC1               	movwf	sprintf@width& (0+255),b
  5366  000A3A                     l464:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;doprnt.c: 1387: if(flag & 0x04) {
  5370                           
  5371                           ; BSR set to: 0
  5372  000A3A  A5BC               	btfss	sprintf@flag& (0+255),2,b
  5373  000A3C  D022               	goto	l465
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;doprnt.c: 1392: if(flag & 0x03)
  5377  000A3E  0E03               	movlw	3
  5378  000A40  15BC               	andwf	sprintf@flag& (0+255),w,b
  5379  000A42  6FA3               	movwf	??_sprintf& (0+255),b
  5380  000A44  0E00               	movlw	0
  5381  000A46  15BD               	andwf	(sprintf@flag+1)& (0+255),w,b
  5382  000A48  6FA4               	movwf	(??_sprintf+1)& (0+255),b
  5383  000A4A  51A3               	movf	??_sprintf& (0+255),w,b
  5384  000A4C  11A4               	iorwf	(??_sprintf+1)& (0+255),w,b
  5385  000A4E  B4D8               	btfsc	status,2,c
  5386  000A50  D008               	goto	l466
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5390  000A52  C096  FFD9         	movff	sprintf@sp,fsr2l
  5391  000A56  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  5392  000A5A  0E2D               	movlw	45
  5393  000A5C  6EDF               	movwf	indf2,c
  5394                           
  5395                           ; BSR set to: 0
  5396  000A5E  4B96               	infsnz	sprintf@sp& (0+255),f,b
  5397  000A60  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  5398  000A62                     l466:
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;doprnt.c: 1415: if(width)
  5402                           
  5403                           ; BSR set to: 0
  5404  000A62  51C1               	movf	sprintf@width& (0+255),w,b
  5405  000A64  11C2               	iorwf	(sprintf@width+1)& (0+255),w,b
  5406  000A66  B4D8               	btfsc	status,2,c
  5407  000A68  D077               	goto	l475
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5411                           
  5412                           ; BSR set to: 0
  5413                           
  5414                           ;doprnt.c: 1416: do
  5415  000A6A  C096  FFD9         	movff	sprintf@sp,fsr2l
  5416  000A6E  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  5417  000A72  0E30               	movlw	48
  5418  000A74  6EDF               	movwf	indf2,c
  5419                           
  5420                           ; BSR set to: 0
  5421  000A76  4B96               	infsnz	sprintf@sp& (0+255),f,b
  5422  000A78  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;doprnt.c: 1418: while(--width);
  5426  000A7A  07C1               	decf	sprintf@width& (0+255),f,b
  5427  000A7C  A0D8               	btfss	status,0,c
  5428  000A7E  07C2               	decf	(sprintf@width+1)& (0+255),f,b
  5429  000A80  D7F0               	goto	l466
  5430  000A82                     l465:
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;doprnt.c: 1422: {
  5434                           ;doprnt.c: 1424: if(width
  5435                           ;doprnt.c: 1428: )
  5436                           
  5437                           ; BSR set to: 0
  5438  000A82  51C1               	movf	sprintf@width& (0+255),w,b
  5439  000A84  11C2               	iorwf	(sprintf@width+1)& (0+255),w,b
  5440  000A86  B4D8               	btfsc	status,2,c
  5441  000A88  D00F               	goto	u6150
  5442  000A8A                     u6140:
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5446                           
  5447                           ; BSR set to: 0
  5448                           
  5449                           ;doprnt.c: 1429: do
  5450  000A8A  C096  FFD9         	movff	sprintf@sp,fsr2l
  5451  000A8E  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  5452  000A92  0E20               	movlw	32
  5453  000A94  6EDF               	movwf	indf2,c
  5454                           
  5455                           ; BSR set to: 0
  5456  000A96  4B96               	infsnz	sprintf@sp& (0+255),f,b
  5457  000A98  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;doprnt.c: 1431: while(--width);
  5461  000A9A  07C1               	decf	sprintf@width& (0+255),f,b
  5462  000A9C  A0D8               	btfss	status,0,c
  5463  000A9E  07C2               	decf	(sprintf@width+1)& (0+255),f,b
  5464  000AA0  51C1               	movf	sprintf@width& (0+255),w,b
  5465  000AA2  11C2               	iorwf	(sprintf@width+1)& (0+255),w,b
  5466  000AA4  A4D8               	btfss	status,2,c
  5467  000AA6  D7F1               	goto	u6140
  5468  000AA8                     u6150:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;doprnt.c: 1438: if(flag & 0x03)
  5472                           
  5473                           ; BSR set to: 0
  5474                           
  5475                           ; BSR set to: 0
  5476  000AA8  0E03               	movlw	3
  5477  000AAA  15BC               	andwf	sprintf@flag& (0+255),w,b
  5478  000AAC  6FA3               	movwf	??_sprintf& (0+255),b
  5479  000AAE  0E00               	movlw	0
  5480  000AB0  15BD               	andwf	(sprintf@flag+1)& (0+255),w,b
  5481  000AB2  6FA4               	movwf	(??_sprintf+1)& (0+255),b
  5482  000AB4  51A3               	movf	??_sprintf& (0+255),w,b
  5483  000AB6  11A4               	iorwf	(??_sprintf+1)& (0+255),w,b
  5484  000AB8  B4D8               	btfsc	status,2,c
  5485  000ABA  D04E               	goto	l475
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5489  000ABC  C096  FFD9         	movff	sprintf@sp,fsr2l
  5490  000AC0  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  5491  000AC4  0E2D               	movlw	45
  5492  000AC6  6EDF               	movwf	indf2,c
  5493  000AC8  D045               	goto	l4996
  5494  000ACA                     l4992:
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;doprnt.c: 1478: {
  5498                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5499  000ACA  C0C3  F0A3         	movff	sprintf@prec,??_sprintf
  5500  000ACE  C0C4  F0A4         	movff	sprintf@prec+1,??_sprintf+1
  5501  000AD2  90D8               	bcf	status,0,c
  5502  000AD4  37A3               	rlcf	??_sprintf& (0+255),f,b
  5503  000AD6  37A4               	rlcf	(??_sprintf+1)& (0+255),f,b
  5504  000AD8  90D8               	bcf	status,0,c
  5505  000ADA  37A3               	rlcf	??_sprintf& (0+255),f,b
  5506  000ADC  37A4               	rlcf	(??_sprintf+1)& (0+255),f,b
  5507  000ADE  0EA3               	movlw	low _dpowers
  5508  000AE0  25A3               	addwf	??_sprintf& (0+255),w,b
  5509  000AE2  6EF6               	movwf	tblptrl,c
  5510  000AE4  0EFE               	movlw	high _dpowers
  5511  000AE6  21A4               	addwfc	(??_sprintf+1)& (0+255),w,b
  5512  000AE8  6EF7               	movwf	tblptrh,c
  5513  000AEA                     	if	1	;There are 3 active tblptr bytes
  5514  000AEA  6AF8               	clrf	tblptru,c
  5515  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
  5516  000AEE  22F8               	addwfc	tblptru,f,c
  5517  000AF0                     	endif
  5518  000AF0  0009               	tblrd		*+
  5519  000AF2  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5520  000AF6  0009               	tblrd		*+
  5521  000AF8  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5522  000AFC  0009               	tblrd		*+
  5523  000AFE  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5524  000B02  000A               	tblrd		*-
  5525  000B04  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5526  000B08  C0B2  F019         	movff	sprintf@val,___lldiv@dividend
  5527  000B0C  C0B3  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  5528  000B10  C0B4  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  5529  000B14  C0B5  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  5530  000B18  EC0C  F010         	call	___lldiv	;wreg free
  5531  000B1C  C019  F026         	movff	?___lldiv,___llmod@dividend
  5532  000B20  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
  5533  000B24  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
  5534  000B28  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
  5535  000B2C  0E0A               	movlw	10
  5536  000B2E  6E2A               	movwf	___llmod@divisor,c
  5537  000B30  0E00               	movlw	0
  5538  000B32  6E2B               	movwf	___llmod@divisor+1,c
  5539  000B34  0E00               	movlw	0
  5540  000B36  6E2C               	movwf	___llmod@divisor+2,c
  5541  000B38  0E00               	movlw	0
  5542  000B3A  6E2D               	movwf	___llmod@divisor+3,c
  5543  000B3C  ECF0  F010         	call	___llmod	;wreg free
  5544  000B40  5026               	movf	?___llmod,w,c
  5545  000B42  0F30               	addlw	48
  5546  000B44  0100               	movlb	0	; () banked
  5547  000B46  6FC5               	movwf	sprintf@c& (0+255),b
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;doprnt.c: 1523: }
  5551                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5552  000B48  C096  FFD9         	movff	sprintf@sp,fsr2l
  5553  000B4C  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  5554  000B50  C0C5  FFDF         	movff	sprintf@c,indf2
  5555  000B54                     l4996:
  5556                           
  5557                           ; BSR set to: 0
  5558  000B54  4B96               	infsnz	sprintf@sp& (0+255),f,b
  5559  000B56  2B97               	incf	(sprintf@sp+1)& (0+255),f,b
  5560  000B58                     l475:
  5561                           
  5562                           ; BSR set to: 0
  5563                           
  5564                           ; BSR set to: 0
  5565  000B58  07C3               	decf	sprintf@prec& (0+255),f,b
  5566  000B5A  A0D8               	btfss	status,0,c
  5567  000B5C  07C4               	decf	(sprintf@prec+1)& (0+255),f,b
  5568  000B5E  29C3               	incf	sprintf@prec& (0+255),w,b
  5569  000B60  E1B4               	bnz	l4992
  5570  000B62  29C4               	incf	(sprintf@prec+1)& (0+255),w,b
  5571  000B64  A4D8               	btfss	status,2,c
  5572  000B66  D7B1               	goto	l476
  5573  000B68                     u6170:
  5574                           
  5575                           ; BSR set to: 0
  5576                           
  5577                           ; BSR set to: 0
  5578                           
  5579                           ; BSR set to: 0
  5580  000B68  C098  FFF6         	movff	sprintf@f,tblptrl
  5581  000B6C  C099  FFF7         	movff	sprintf@f+1,tblptrh
  5582  000B70  4B98               	infsnz	sprintf@f& (0+255),f,b
  5583  000B72  2B99               	incf	(sprintf@f+1)& (0+255),f,b
  5584  000B74                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5585  000B74  6AF8               	clrf	tblptru,c
  5586  000B76                     	endif
  5587  000B76                     	if	0	;tblptru may be non-zero
  5588  000B76                     	endif
  5589  000B76  0008               	tblrd		*
  5590  000B78  CFF5 F0C5          	movff	tablat,sprintf@c
  5591  000B7C  51C5               	movf	sprintf@c& (0+255),w,b
  5592  000B7E  A4D8               	btfss	status,2,c
  5593  000B80  EF10  F000         	goto	l366
  5594  000B84                     u6180:
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;doprnt.c: 1538: *sp = 0;
  5598                           
  5599                           ; BSR set to: 0
  5600                           
  5601                           ;doprnt.c: 1525: }
  5602                           ;doprnt.c: 1533: }
  5603                           ;doprnt.c: 1535: alldone:
  5604                           
  5605                           ; BSR set to: 0
  5606  000B84  C096  FFD9         	movff	sprintf@sp,fsr2l
  5607  000B88  C097  FFDA         	movff	sprintf@sp+1,fsr2h
  5608  000B8C  0E00               	movlw	0
  5609  000B8E  6EDF               	movwf	indf2,c
  5610  000B90  0012               	return	
  5611  000B92                     __end_of_sprintf:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           intcon	equ	0xFF2
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           postdec1	equ	0xFE5
  5623                           fsr1l	equ	0xFE1
  5624                           indf2	equ	0xFDF
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function _scale *****************
  5632 ;; Defined at:
  5633 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  scl             1    wreg     char 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  scl             1    3[BANK0 ] char 
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  3   87[COMRAM] char 
  5640 ;; Registers used:
  5641 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5647 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;Total ram usage:        7 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    4
  5654 ;; This function calls:
  5655 ;;		___awdiv
  5656 ;;		___awmod
  5657 ;;		___ftmul
  5658 ;;		___wmul
  5659 ;; This function is called by:
  5660 ;;		_sprintf
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text20
  5665  000B92                     __ptext20:
  5666                           	opt stack 0
  5667  000B92                     _scale:
  5668                           	opt stack 24
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;incstack = 0
  5672                           ;scale@scl stored from wreg
  5673  000B92  0100               	movlb	0	; () banked
  5674  000B94  6F83               	movwf	scale@scl& (0+255),b
  5675                           
  5676                           ;doprnt.c: 428: if(scl < 0) {
  5677  000B96  0100               	movlb	0	; () banked
  5678  000B98  AF83               	btfss	scale@scl& (0+255),7,b
  5679  000B9A  D118               	goto	l355
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;doprnt.c: 429: scl = -scl;
  5683  000B9C  6D83               	negf	scale@scl& (0+255),b
  5684                           
  5685                           ;doprnt.c: 430: if(scl>=110)
  5686  000B9E  5183               	movf	scale@scl& (0+255),w,b
  5687  000BA0  0A80               	xorlw	128
  5688  000BA2  0F12               	addlw	-238
  5689  000BA4  A0D8               	btfss	status,0,c
  5690  000BA6  D09C               	goto	l356
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5694  000BA8  0E00               	movlw	0
  5695  000BAA  6E2A               	movwf	___wmul@multiplicand+1,c
  5696  000BAC  0E03               	movlw	3
  5697  000BAE  6E29               	movwf	___wmul@multiplicand,c
  5698  000BB0  0E00               	movlw	0
  5699  000BB2  6E22               	movwf	___awdiv@divisor+1,c
  5700  000BB4  0E0A               	movlw	10
  5701  000BB6  6E21               	movwf	___awdiv@divisor,c
  5702  000BB8  0E00               	movlw	0
  5703  000BBA  6E1C               	movwf	___awmod@divisor+1,c
  5704  000BBC  0E64               	movlw	100
  5705  000BBE  6E1B               	movwf	___awmod@divisor,c
  5706  000BC0  5183               	movf	scale@scl& (0+255),w,b
  5707  000BC2  6E19               	movwf	___awmod@dividend,c
  5708  000BC4  6A1A               	clrf	___awmod@dividend+1,c
  5709  000BC6  BE19               	btfsc	___awmod@dividend,7,c
  5710  000BC8  061A               	decf	___awmod@dividend+1,f,c
  5711  000BCA  EC4D  F010         	call	___awmod	;wreg free
  5712  000BCE  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5713  000BD2  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5714  000BD6  ECCA  F00F         	call	___awdiv	;wreg free
  5715  000BDA  0E09               	movlw	9
  5716  000BDC  241F               	addwf	?___awdiv,w,c
  5717  000BDE  6E27               	movwf	___wmul@multiplier,c
  5718  000BE0  0E00               	movlw	0
  5719  000BE2  2020               	addwfc	?___awdiv+1,w,c
  5720  000BE4  6E28               	movwf	___wmul@multiplier+1,c
  5721  000BE6  EC1C  F013         	call	___wmul	;wreg free
  5722  000BEA  0EF2               	movlw	low __npowers_
  5723  000BEC  2427               	addwf	?___wmul,w,c
  5724  000BEE  6EF6               	movwf	tblptrl,c
  5725  000BF0  0EFE               	movlw	high __npowers_
  5726  000BF2  2028               	addwfc	?___wmul+1,w,c
  5727  000BF4  6EF7               	movwf	tblptrh,c
  5728  000BF6                     	if	1	;There are 3 active tblptr bytes
  5729  000BF6  6AF8               	clrf	tblptru,c
  5730  000BF8  0E00               	movlw	low (__mediumconst shr (0+16))
  5731  000BFA  22F8               	addwfc	tblptru,f,c
  5732  000BFC                     	endif
  5733  000BFC  0009               	tblrd		*+
  5734  000BFE  CFF5 F04C          	movff	tablat,___ftmul@f2
  5735  000C02  0009               	tblrd		*+
  5736  000C04  CFF5 F04D          	movff	tablat,___ftmul@f2+1
  5737  000C08  000A               	tblrd		*-
  5738  000C0A  CFF5 F04E          	movff	tablat,___ftmul@f2+2
  5739  000C0E  0E00               	movlw	0
  5740  000C10  6E22               	movwf	___awdiv@divisor+1,c
  5741  000C12  0E64               	movlw	100
  5742  000C14  6E21               	movwf	___awdiv@divisor,c
  5743  000C16  0100               	movlb	0	; () banked
  5744  000C18  5183               	movf	scale@scl& (0+255),w,b
  5745  000C1A  6E1F               	movwf	___awdiv@dividend,c
  5746  000C1C  6A20               	clrf	___awdiv@dividend+1,c
  5747  000C1E  BE1F               	btfsc	___awdiv@dividend,7,c
  5748  000C20  0620               	decf	___awdiv@dividend+1,f,c
  5749  000C22  ECCA  F00F         	call	___awdiv	;wreg free
  5750  000C26  0E12               	movlw	18
  5751  000C28  241F               	addwf	?___awdiv,w,c
  5752  000C2A  6E27               	movwf	___wmul@multiplier,c
  5753  000C2C  0E00               	movlw	0
  5754  000C2E  2020               	addwfc	?___awdiv+1,w,c
  5755  000C30  6E28               	movwf	___wmul@multiplier+1,c
  5756  000C32  0E00               	movlw	0
  5757  000C34  6E2A               	movwf	___wmul@multiplicand+1,c
  5758  000C36  0E03               	movlw	3
  5759  000C38  6E29               	movwf	___wmul@multiplicand,c
  5760  000C3A  EC1C  F013         	call	___wmul	;wreg free
  5761  000C3E  0EF2               	movlw	low __npowers_
  5762  000C40  2427               	addwf	?___wmul,w,c
  5763  000C42  6EF6               	movwf	tblptrl,c
  5764  000C44  0EFE               	movlw	high __npowers_
  5765  000C46  2028               	addwfc	?___wmul+1,w,c
  5766  000C48  6EF7               	movwf	tblptrh,c
  5767  000C4A                     	if	1	;There are 3 active tblptr bytes
  5768  000C4A  6AF8               	clrf	tblptru,c
  5769  000C4C  0E00               	movlw	low (__mediumconst shr (0+16))
  5770  000C4E  22F8               	addwfc	tblptru,f,c
  5771  000C50                     	endif
  5772  000C50  0009               	tblrd		*+
  5773  000C52  CFF5 F049          	movff	tablat,___ftmul@f1
  5774  000C56  0009               	tblrd		*+
  5775  000C58  CFF5 F04A          	movff	tablat,___ftmul@f1+1
  5776  000C5C  000A               	tblrd		*-
  5777  000C5E  CFF5 F04B          	movff	tablat,___ftmul@f1+2
  5778  000C62  EC3E  F00E         	call	___ftmul	;wreg free
  5779  000C66  C049  F080         	movff	?___ftmul,_scale$1289
  5780  000C6A  C04A  F081         	movff	?___ftmul+1,_scale$1289+1
  5781  000C6E  C04B  F082         	movff	?___ftmul+2,_scale$1289+2
  5782                           
  5783                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5784  000C72  C080  F049         	movff	_scale$1289,___ftmul@f1
  5785  000C76  C081  F04A         	movff	_scale$1289+1,___ftmul@f1+1
  5786  000C7A  C082  F04B         	movff	_scale$1289+2,___ftmul@f1+2
  5787  000C7E  0E00               	movlw	0
  5788  000C80  6E2A               	movwf	___wmul@multiplicand+1,c
  5789  000C82  0E03               	movlw	3
  5790  000C84  6E29               	movwf	___wmul@multiplicand,c
  5791  000C86  0E00               	movlw	0
  5792  000C88  6E1C               	movwf	___awmod@divisor+1,c
  5793  000C8A  0E0A               	movlw	10
  5794  000C8C  6E1B               	movwf	___awmod@divisor,c
  5795  000C8E  0100               	movlb	0	; () banked
  5796  000C90  5183               	movf	scale@scl& (0+255),w,b
  5797  000C92  6E19               	movwf	___awmod@dividend,c
  5798  000C94  6A1A               	clrf	___awmod@dividend+1,c
  5799  000C96  BE19               	btfsc	___awmod@dividend,7,c
  5800  000C98  061A               	decf	___awmod@dividend+1,f,c
  5801  000C9A  EC4D  F010         	call	___awmod	;wreg free
  5802  000C9E  C019  F027         	movff	?___awmod,___wmul@multiplier
  5803  000CA2  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5804  000CA6  EC1C  F013         	call	___wmul	;wreg free
  5805  000CAA  0EF2               	movlw	low __npowers_
  5806  000CAC  2427               	addwf	?___wmul,w,c
  5807  000CAE  6EF6               	movwf	tblptrl,c
  5808  000CB0  0EFE               	movlw	high __npowers_
  5809  000CB2  2028               	addwfc	?___wmul+1,w,c
  5810  000CB4  6EF7               	movwf	tblptrh,c
  5811  000CB6                     	if	1	;There are 3 active tblptr bytes
  5812  000CB6  6AF8               	clrf	tblptru,c
  5813  000CB8  0E00               	movlw	low (__mediumconst shr (0+16))
  5814  000CBA  22F8               	addwfc	tblptru,f,c
  5815  000CBC                     	endif
  5816  000CBC  0009               	tblrd		*+
  5817  000CBE  CFF5 F04C          	movff	tablat,___ftmul@f2
  5818  000CC2  0009               	tblrd		*+
  5819  000CC4  CFF5 F04D          	movff	tablat,___ftmul@f2+1
  5820  000CC8  000A               	tblrd		*-
  5821  000CCA  CFF5 F04E          	movff	tablat,___ftmul@f2+2
  5822  000CCE  EC3E  F00E         	call	___ftmul	;wreg free
  5823  000CD2  C049  F058         	movff	?___ftmul,?_scale
  5824  000CD6  C04A  F059         	movff	?___ftmul+1,?_scale+1
  5825  000CDA  C04B  F05A         	movff	?___ftmul+2,?_scale+2
  5826  000CDE  0012               	return	
  5827  000CE0                     l356:
  5828                           
  5829                           ;doprnt.c: 432: else if(scl > 10)
  5830  000CE0  0100               	movlb	0	; () banked
  5831  000CE2  5183               	movf	scale@scl& (0+255),w,b
  5832  000CE4  0A80               	xorlw	128
  5833  000CE6  0F75               	addlw	-139
  5834  000CE8  A0D8               	btfss	status,0,c
  5835  000CEA  D05A               	goto	l359
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5839  000CEC  0E00               	movlw	0
  5840  000CEE  6E22               	movwf	___awdiv@divisor+1,c
  5841  000CF0  0E0A               	movlw	10
  5842  000CF2  6E21               	movwf	___awdiv@divisor,c
  5843  000CF4  5183               	movf	scale@scl& (0+255),w,b
  5844  000CF6  6E1F               	movwf	___awdiv@dividend,c
  5845  000CF8  6A20               	clrf	___awdiv@dividend+1,c
  5846  000CFA  BE1F               	btfsc	___awdiv@dividend,7,c
  5847  000CFC  0620               	decf	___awdiv@dividend+1,f,c
  5848  000CFE  ECCA  F00F         	call	___awdiv	;wreg free
  5849  000D02  0E09               	movlw	9
  5850  000D04  241F               	addwf	?___awdiv,w,c
  5851  000D06  6E27               	movwf	___wmul@multiplier,c
  5852  000D08  0E00               	movlw	0
  5853  000D0A  2020               	addwfc	?___awdiv+1,w,c
  5854  000D0C  6E28               	movwf	___wmul@multiplier+1,c
  5855  000D0E  0E00               	movlw	0
  5856  000D10  6E2A               	movwf	___wmul@multiplicand+1,c
  5857  000D12  0E03               	movlw	3
  5858  000D14  6E29               	movwf	___wmul@multiplicand,c
  5859  000D16  EC1C  F013         	call	___wmul	;wreg free
  5860  000D1A  0EF2               	movlw	low __npowers_
  5861  000D1C  2427               	addwf	?___wmul,w,c
  5862  000D1E  6EF6               	movwf	tblptrl,c
  5863  000D20  0EFE               	movlw	high __npowers_
  5864  000D22  2028               	addwfc	?___wmul+1,w,c
  5865  000D24  6EF7               	movwf	tblptrh,c
  5866  000D26                     	if	1	;There are 3 active tblptr bytes
  5867  000D26  6AF8               	clrf	tblptru,c
  5868  000D28  0E00               	movlw	low (__mediumconst shr (0+16))
  5869  000D2A  22F8               	addwfc	tblptru,f,c
  5870  000D2C                     	endif
  5871  000D2C  0009               	tblrd		*+
  5872  000D2E  CFF5 F049          	movff	tablat,___ftmul@f1
  5873  000D32  0009               	tblrd		*+
  5874  000D34  CFF5 F04A          	movff	tablat,___ftmul@f1+1
  5875  000D38  000A               	tblrd		*-
  5876  000D3A  CFF5 F04B          	movff	tablat,___ftmul@f1+2
  5877  000D3E  0E00               	movlw	0
  5878  000D40  6E2A               	movwf	___wmul@multiplicand+1,c
  5879  000D42  0E03               	movlw	3
  5880  000D44  6E29               	movwf	___wmul@multiplicand,c
  5881  000D46  0E00               	movlw	0
  5882  000D48  6E1C               	movwf	___awmod@divisor+1,c
  5883  000D4A  0E0A               	movlw	10
  5884  000D4C  6E1B               	movwf	___awmod@divisor,c
  5885  000D4E  0100               	movlb	0	; () banked
  5886  000D50  5183               	movf	scale@scl& (0+255),w,b
  5887  000D52  6E19               	movwf	___awmod@dividend,c
  5888  000D54  6A1A               	clrf	___awmod@dividend+1,c
  5889  000D56  BE19               	btfsc	___awmod@dividend,7,c
  5890  000D58  061A               	decf	___awmod@dividend+1,f,c
  5891  000D5A  EC4D  F010         	call	___awmod	;wreg free
  5892  000D5E  C019  F027         	movff	?___awmod,___wmul@multiplier
  5893  000D62  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5894  000D66  EC1C  F013         	call	___wmul	;wreg free
  5895  000D6A  0EF2               	movlw	low __npowers_
  5896  000D6C  2427               	addwf	?___wmul,w,c
  5897  000D6E  6EF6               	movwf	tblptrl,c
  5898  000D70  0EFE               	movlw	high __npowers_
  5899  000D72  2028               	addwfc	?___wmul+1,w,c
  5900  000D74  6EF7               	movwf	tblptrh,c
  5901  000D76                     	if	1	;There are 3 active tblptr bytes
  5902  000D76  6AF8               	clrf	tblptru,c
  5903  000D78  0E00               	movlw	low (__mediumconst shr (0+16))
  5904  000D7A  22F8               	addwfc	tblptru,f,c
  5905  000D7C                     	endif
  5906  000D7C  0009               	tblrd		*+
  5907  000D7E  CFF5 F04C          	movff	tablat,___ftmul@f2
  5908  000D82  0009               	tblrd		*+
  5909  000D84  CFF5 F04D          	movff	tablat,___ftmul@f2+1
  5910  000D88  000A               	tblrd		*-
  5911  000D8A  CFF5 F04E          	movff	tablat,___ftmul@f2+2
  5912  000D8E  EC3E  F00E         	call	___ftmul	;wreg free
  5913  000D92  C049  F058         	movff	?___ftmul,?_scale
  5914  000D96  C04A  F059         	movff	?___ftmul+1,?_scale+1
  5915  000D9A  C04B  F05A         	movff	?___ftmul+2,?_scale+2
  5916  000D9E  0012               	return	
  5917  000DA0                     l359:
  5918                           
  5919                           ;doprnt.c: 434: return _npowers_[scl];
  5920  000DA0  0100               	movlb	0	; () banked
  5921  000DA2  5183               	movf	scale@scl& (0+255),w,b
  5922  000DA4  0D03               	mullw	3
  5923  000DA6  0EF2               	movlw	low __npowers_
  5924  000DA8  24F3               	addwf	prodl,w,c
  5925  000DAA  6EF6               	movwf	tblptrl,c
  5926  000DAC  0EFE               	movlw	high __npowers_
  5927  000DAE  20F4               	addwfc	prodh,w,c
  5928  000DB0  6EF7               	movwf	tblptrh,c
  5929  000DB2                     	if	1	;There are 3 active tblptr bytes
  5930  000DB2  6AF8               	clrf	tblptru,c
  5931  000DB4  0E00               	movlw	low (__mediumconst shr (0+16))
  5932  000DB6  22F8               	addwfc	tblptru,f,c
  5933  000DB8                     	endif
  5934  000DB8  0009               	tblrd		*+
  5935  000DBA  CFF5 F058          	movff	tablat,?_scale
  5936  000DBE  0009               	tblrd		*+
  5937  000DC0  CFF5 F059          	movff	tablat,?_scale+1
  5938  000DC4  000A               	tblrd		*-
  5939  000DC6  CFF5 F05A          	movff	tablat,?_scale+2
  5940                           
  5941                           ; BSR set to: 0
  5942  000DCA  0012               	return	
  5943  000DCC                     l355:
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;doprnt.c: 435: }
  5947                           ;doprnt.c: 436: if(scl>=110)
  5948                           
  5949                           ; BSR set to: 0
  5950  000DCC  5183               	movf	scale@scl& (0+255),w,b
  5951  000DCE  0A80               	xorlw	128
  5952  000DD0  0F12               	addlw	-238
  5953  000DD2  A0D8               	btfss	status,0,c
  5954  000DD4  D09C               	goto	l360
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5958  000DD6  0E00               	movlw	0
  5959  000DD8  6E2A               	movwf	___wmul@multiplicand+1,c
  5960  000DDA  0E03               	movlw	3
  5961  000DDC  6E29               	movwf	___wmul@multiplicand,c
  5962  000DDE  0E00               	movlw	0
  5963  000DE0  6E22               	movwf	___awdiv@divisor+1,c
  5964  000DE2  0E0A               	movlw	10
  5965  000DE4  6E21               	movwf	___awdiv@divisor,c
  5966  000DE6  0E00               	movlw	0
  5967  000DE8  6E1C               	movwf	___awmod@divisor+1,c
  5968  000DEA  0E64               	movlw	100
  5969  000DEC  6E1B               	movwf	___awmod@divisor,c
  5970  000DEE  5183               	movf	scale@scl& (0+255),w,b
  5971  000DF0  6E19               	movwf	___awmod@dividend,c
  5972  000DF2  6A1A               	clrf	___awmod@dividend+1,c
  5973  000DF4  BE19               	btfsc	___awmod@dividend,7,c
  5974  000DF6  061A               	decf	___awmod@dividend+1,f,c
  5975  000DF8  EC4D  F010         	call	___awmod	;wreg free
  5976  000DFC  C019  F01F         	movff	?___awmod,___awdiv@dividend
  5977  000E00  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  5978  000E04  ECCA  F00F         	call	___awdiv	;wreg free
  5979  000E08  0E09               	movlw	9
  5980  000E0A  241F               	addwf	?___awdiv,w,c
  5981  000E0C  6E27               	movwf	___wmul@multiplier,c
  5982  000E0E  0E00               	movlw	0
  5983  000E10  2020               	addwfc	?___awdiv+1,w,c
  5984  000E12  6E28               	movwf	___wmul@multiplier+1,c
  5985  000E14  EC1C  F013         	call	___wmul	;wreg free
  5986  000E18  0ECB               	movlw	low __powers_
  5987  000E1A  2427               	addwf	?___wmul,w,c
  5988  000E1C  6EF6               	movwf	tblptrl,c
  5989  000E1E  0EFE               	movlw	high __powers_
  5990  000E20  2028               	addwfc	?___wmul+1,w,c
  5991  000E22  6EF7               	movwf	tblptrh,c
  5992  000E24                     	if	1	;There are 3 active tblptr bytes
  5993  000E24  6AF8               	clrf	tblptru,c
  5994  000E26  0E00               	movlw	low (__mediumconst shr (0+16))
  5995  000E28  22F8               	addwfc	tblptru,f,c
  5996  000E2A                     	endif
  5997  000E2A  0009               	tblrd		*+
  5998  000E2C  CFF5 F04C          	movff	tablat,___ftmul@f2
  5999  000E30  0009               	tblrd		*+
  6000  000E32  CFF5 F04D          	movff	tablat,___ftmul@f2+1
  6001  000E36  000A               	tblrd		*-
  6002  000E38  CFF5 F04E          	movff	tablat,___ftmul@f2+2
  6003  000E3C  0E00               	movlw	0
  6004  000E3E  6E22               	movwf	___awdiv@divisor+1,c
  6005  000E40  0E64               	movlw	100
  6006  000E42  6E21               	movwf	___awdiv@divisor,c
  6007  000E44  0100               	movlb	0	; () banked
  6008  000E46  5183               	movf	scale@scl& (0+255),w,b
  6009  000E48  6E1F               	movwf	___awdiv@dividend,c
  6010  000E4A  6A20               	clrf	___awdiv@dividend+1,c
  6011  000E4C  BE1F               	btfsc	___awdiv@dividend,7,c
  6012  000E4E  0620               	decf	___awdiv@dividend+1,f,c
  6013  000E50  ECCA  F00F         	call	___awdiv	;wreg free
  6014  000E54  0E12               	movlw	18
  6015  000E56  241F               	addwf	?___awdiv,w,c
  6016  000E58  6E27               	movwf	___wmul@multiplier,c
  6017  000E5A  0E00               	movlw	0
  6018  000E5C  2020               	addwfc	?___awdiv+1,w,c
  6019  000E5E  6E28               	movwf	___wmul@multiplier+1,c
  6020  000E60  0E00               	movlw	0
  6021  000E62  6E2A               	movwf	___wmul@multiplicand+1,c
  6022  000E64  0E03               	movlw	3
  6023  000E66  6E29               	movwf	___wmul@multiplicand,c
  6024  000E68  EC1C  F013         	call	___wmul	;wreg free
  6025  000E6C  0ECB               	movlw	low __powers_
  6026  000E6E  2427               	addwf	?___wmul,w,c
  6027  000E70  6EF6               	movwf	tblptrl,c
  6028  000E72  0EFE               	movlw	high __powers_
  6029  000E74  2028               	addwfc	?___wmul+1,w,c
  6030  000E76  6EF7               	movwf	tblptrh,c
  6031  000E78                     	if	1	;There are 3 active tblptr bytes
  6032  000E78  6AF8               	clrf	tblptru,c
  6033  000E7A  0E00               	movlw	low (__mediumconst shr (0+16))
  6034  000E7C  22F8               	addwfc	tblptru,f,c
  6035  000E7E                     	endif
  6036  000E7E  0009               	tblrd		*+
  6037  000E80  CFF5 F049          	movff	tablat,___ftmul@f1
  6038  000E84  0009               	tblrd		*+
  6039  000E86  CFF5 F04A          	movff	tablat,___ftmul@f1+1
  6040  000E8A  000A               	tblrd		*-
  6041  000E8C  CFF5 F04B          	movff	tablat,___ftmul@f1+2
  6042  000E90  EC3E  F00E         	call	___ftmul	;wreg free
  6043  000E94  C049  F080         	movff	?___ftmul,_scale$1289
  6044  000E98  C04A  F081         	movff	?___ftmul+1,_scale$1289+1
  6045  000E9C  C04B  F082         	movff	?___ftmul+2,_scale$1289+2
  6046                           
  6047                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6048  000EA0  C080  F049         	movff	_scale$1289,___ftmul@f1
  6049  000EA4  C081  F04A         	movff	_scale$1289+1,___ftmul@f1+1
  6050  000EA8  C082  F04B         	movff	_scale$1289+2,___ftmul@f1+2
  6051  000EAC  0E00               	movlw	0
  6052  000EAE  6E2A               	movwf	___wmul@multiplicand+1,c
  6053  000EB0  0E03               	movlw	3
  6054  000EB2  6E29               	movwf	___wmul@multiplicand,c
  6055  000EB4  0E00               	movlw	0
  6056  000EB6  6E1C               	movwf	___awmod@divisor+1,c
  6057  000EB8  0E0A               	movlw	10
  6058  000EBA  6E1B               	movwf	___awmod@divisor,c
  6059  000EBC  0100               	movlb	0	; () banked
  6060  000EBE  5183               	movf	scale@scl& (0+255),w,b
  6061  000EC0  6E19               	movwf	___awmod@dividend,c
  6062  000EC2  6A1A               	clrf	___awmod@dividend+1,c
  6063  000EC4  BE19               	btfsc	___awmod@dividend,7,c
  6064  000EC6  061A               	decf	___awmod@dividend+1,f,c
  6065  000EC8  EC4D  F010         	call	___awmod	;wreg free
  6066  000ECC  C019  F027         	movff	?___awmod,___wmul@multiplier
  6067  000ED0  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6068  000ED4  EC1C  F013         	call	___wmul	;wreg free
  6069  000ED8  0ECB               	movlw	low __powers_
  6070  000EDA  2427               	addwf	?___wmul,w,c
  6071  000EDC  6EF6               	movwf	tblptrl,c
  6072  000EDE  0EFE               	movlw	high __powers_
  6073  000EE0  2028               	addwfc	?___wmul+1,w,c
  6074  000EE2  6EF7               	movwf	tblptrh,c
  6075  000EE4                     	if	1	;There are 3 active tblptr bytes
  6076  000EE4  6AF8               	clrf	tblptru,c
  6077  000EE6  0E00               	movlw	low (__mediumconst shr (0+16))
  6078  000EE8  22F8               	addwfc	tblptru,f,c
  6079  000EEA                     	endif
  6080  000EEA  0009               	tblrd		*+
  6081  000EEC  CFF5 F04C          	movff	tablat,___ftmul@f2
  6082  000EF0  0009               	tblrd		*+
  6083  000EF2  CFF5 F04D          	movff	tablat,___ftmul@f2+1
  6084  000EF6  000A               	tblrd		*-
  6085  000EF8  CFF5 F04E          	movff	tablat,___ftmul@f2+2
  6086  000EFC  EC3E  F00E         	call	___ftmul	;wreg free
  6087  000F00  C049  F058         	movff	?___ftmul,?_scale
  6088  000F04  C04A  F059         	movff	?___ftmul+1,?_scale+1
  6089  000F08  C04B  F05A         	movff	?___ftmul+2,?_scale+2
  6090  000F0C  0012               	return	
  6091  000F0E                     l360:
  6092                           
  6093                           ;doprnt.c: 438: else if(scl > 10)
  6094  000F0E  0100               	movlb	0	; () banked
  6095  000F10  5183               	movf	scale@scl& (0+255),w,b
  6096  000F12  0A80               	xorlw	128
  6097  000F14  0F75               	addlw	-139
  6098  000F16  A0D8               	btfss	status,0,c
  6099  000F18  D05A               	goto	l362
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6103  000F1A  0E00               	movlw	0
  6104  000F1C  6E22               	movwf	___awdiv@divisor+1,c
  6105  000F1E  0E0A               	movlw	10
  6106  000F20  6E21               	movwf	___awdiv@divisor,c
  6107  000F22  5183               	movf	scale@scl& (0+255),w,b
  6108  000F24  6E1F               	movwf	___awdiv@dividend,c
  6109  000F26  6A20               	clrf	___awdiv@dividend+1,c
  6110  000F28  BE1F               	btfsc	___awdiv@dividend,7,c
  6111  000F2A  0620               	decf	___awdiv@dividend+1,f,c
  6112  000F2C  ECCA  F00F         	call	___awdiv	;wreg free
  6113  000F30  0E09               	movlw	9
  6114  000F32  241F               	addwf	?___awdiv,w,c
  6115  000F34  6E27               	movwf	___wmul@multiplier,c
  6116  000F36  0E00               	movlw	0
  6117  000F38  2020               	addwfc	?___awdiv+1,w,c
  6118  000F3A  6E28               	movwf	___wmul@multiplier+1,c
  6119  000F3C  0E00               	movlw	0
  6120  000F3E  6E2A               	movwf	___wmul@multiplicand+1,c
  6121  000F40  0E03               	movlw	3
  6122  000F42  6E29               	movwf	___wmul@multiplicand,c
  6123  000F44  EC1C  F013         	call	___wmul	;wreg free
  6124  000F48  0ECB               	movlw	low __powers_
  6125  000F4A  2427               	addwf	?___wmul,w,c
  6126  000F4C  6EF6               	movwf	tblptrl,c
  6127  000F4E  0EFE               	movlw	high __powers_
  6128  000F50  2028               	addwfc	?___wmul+1,w,c
  6129  000F52  6EF7               	movwf	tblptrh,c
  6130  000F54                     	if	1	;There are 3 active tblptr bytes
  6131  000F54  6AF8               	clrf	tblptru,c
  6132  000F56  0E00               	movlw	low (__mediumconst shr (0+16))
  6133  000F58  22F8               	addwfc	tblptru,f,c
  6134  000F5A                     	endif
  6135  000F5A  0009               	tblrd		*+
  6136  000F5C  CFF5 F049          	movff	tablat,___ftmul@f1
  6137  000F60  0009               	tblrd		*+
  6138  000F62  CFF5 F04A          	movff	tablat,___ftmul@f1+1
  6139  000F66  000A               	tblrd		*-
  6140  000F68  CFF5 F04B          	movff	tablat,___ftmul@f1+2
  6141  000F6C  0E00               	movlw	0
  6142  000F6E  6E2A               	movwf	___wmul@multiplicand+1,c
  6143  000F70  0E03               	movlw	3
  6144  000F72  6E29               	movwf	___wmul@multiplicand,c
  6145  000F74  0E00               	movlw	0
  6146  000F76  6E1C               	movwf	___awmod@divisor+1,c
  6147  000F78  0E0A               	movlw	10
  6148  000F7A  6E1B               	movwf	___awmod@divisor,c
  6149  000F7C  0100               	movlb	0	; () banked
  6150  000F7E  5183               	movf	scale@scl& (0+255),w,b
  6151  000F80  6E19               	movwf	___awmod@dividend,c
  6152  000F82  6A1A               	clrf	___awmod@dividend+1,c
  6153  000F84  BE19               	btfsc	___awmod@dividend,7,c
  6154  000F86  061A               	decf	___awmod@dividend+1,f,c
  6155  000F88  EC4D  F010         	call	___awmod	;wreg free
  6156  000F8C  C019  F027         	movff	?___awmod,___wmul@multiplier
  6157  000F90  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6158  000F94  EC1C  F013         	call	___wmul	;wreg free
  6159  000F98  0ECB               	movlw	low __powers_
  6160  000F9A  2427               	addwf	?___wmul,w,c
  6161  000F9C  6EF6               	movwf	tblptrl,c
  6162  000F9E  0EFE               	movlw	high __powers_
  6163  000FA0  2028               	addwfc	?___wmul+1,w,c
  6164  000FA2  6EF7               	movwf	tblptrh,c
  6165  000FA4                     	if	1	;There are 3 active tblptr bytes
  6166  000FA4  6AF8               	clrf	tblptru,c
  6167  000FA6  0E00               	movlw	low (__mediumconst shr (0+16))
  6168  000FA8  22F8               	addwfc	tblptru,f,c
  6169  000FAA                     	endif
  6170  000FAA  0009               	tblrd		*+
  6171  000FAC  CFF5 F04C          	movff	tablat,___ftmul@f2
  6172  000FB0  0009               	tblrd		*+
  6173  000FB2  CFF5 F04D          	movff	tablat,___ftmul@f2+1
  6174  000FB6  000A               	tblrd		*-
  6175  000FB8  CFF5 F04E          	movff	tablat,___ftmul@f2+2
  6176  000FBC  EC3E  F00E         	call	___ftmul	;wreg free
  6177  000FC0  C049  F058         	movff	?___ftmul,?_scale
  6178  000FC4  C04A  F059         	movff	?___ftmul+1,?_scale+1
  6179  000FC8  C04B  F05A         	movff	?___ftmul+2,?_scale+2
  6180  000FCC  0012               	return	
  6181  000FCE                     l362:
  6182                           
  6183                           ;doprnt.c: 440: return _powers_[scl];
  6184  000FCE  0100               	movlb	0	; () banked
  6185  000FD0  5183               	movf	scale@scl& (0+255),w,b
  6186  000FD2  0D03               	mullw	3
  6187  000FD4  0ECB               	movlw	low __powers_
  6188  000FD6  24F3               	addwf	prodl,w,c
  6189  000FD8  6EF6               	movwf	tblptrl,c
  6190  000FDA  0EFE               	movlw	high __powers_
  6191  000FDC  20F4               	addwfc	prodh,w,c
  6192  000FDE  6EF7               	movwf	tblptrh,c
  6193  000FE0                     	if	1	;There are 3 active tblptr bytes
  6194  000FE0  6AF8               	clrf	tblptru,c
  6195  000FE2  0E00               	movlw	low (__mediumconst shr (0+16))
  6196  000FE4  22F8               	addwfc	tblptru,f,c
  6197  000FE6                     	endif
  6198  000FE6  0009               	tblrd		*+
  6199  000FE8  CFF5 F058          	movff	tablat,?_scale
  6200  000FEC  0009               	tblrd		*+
  6201  000FEE  CFF5 F059          	movff	tablat,?_scale+1
  6202  000FF2  000A               	tblrd		*-
  6203  000FF4  CFF5 F05A          	movff	tablat,?_scale+2
  6204  000FF8  0012               	return	
  6205  000FFA                     __end_of_scale:
  6206                           	opt stack 0
  6207                           tblptru	equ	0xFF8
  6208                           tblptrh	equ	0xFF7
  6209                           tblptrl	equ	0xFF6
  6210                           tablat	equ	0xFF5
  6211                           prodh	equ	0xFF4
  6212                           prodl	equ	0xFF3
  6213                           intcon	equ	0xFF2
  6214                           postinc0	equ	0xFEE
  6215                           wreg	equ	0xFE8
  6216                           postdec1	equ	0xFE5
  6217                           fsr1l	equ	0xFE1
  6218                           indf2	equ	0xFDF
  6219                           postinc2	equ	0xFDE
  6220                           postdec2	equ	0xFDD
  6221                           fsr2h	equ	0xFDA
  6222                           fsr2l	equ	0xFD9
  6223                           status	equ	0xFD8
  6224                           
  6225 ;; *************** function _isdigit *****************
  6226 ;; Defined at:
  6227 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6228 ;; Parameters:    Size  Location     Type
  6229 ;;  c               1    wreg     unsigned char 
  6230 ;; Auto vars:     Size  Location     Type
  6231 ;;  c               1   26[COMRAM] unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;		None               void
  6234 ;; Registers used:
  6235 ;;		wreg, status,2, status,0
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;Total ram usage:        3 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:    2
  6248 ;; This function calls:
  6249 ;;		Nothing
  6250 ;; This function is called by:
  6251 ;;		_sprintf
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           	psect	text21
  6256  002710                     __ptext21:
  6257                           	opt stack 0
  6258  002710                     _isdigit:
  6259                           	opt stack 26
  6260                           
  6261                           ;incstack = 0
  6262                           ;isdigit@c stored from wreg
  6263  002710  6E1B               	movwf	isdigit@c,c
  6264  002712  0E00               	movlw	0
  6265  002714  6E1A               	movwf	_isdigit$923,c
  6266  002716  0E3A               	movlw	58
  6267  002718  601B               	cpfslt	isdigit@c,c
  6268  00271A  D005               	goto	l843
  6269  00271C  0E2F               	movlw	47
  6270  00271E  641B               	cpfsgt	isdigit@c,c
  6271  002720  D002               	goto	l843
  6272  002722  0E01               	movlw	1
  6273  002724  6E1A               	movwf	_isdigit$923,c
  6274  002726                     l843:
  6275  002726  C01A  F019         	movff	_isdigit$923,??_isdigit
  6276  00272A  3019               	rrcf	??_isdigit,w,c
  6277  00272C  0012               	return	
  6278  00272E                     __end_of_isdigit:
  6279                           	opt stack 0
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           intcon	equ	0xFF2
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _fround *****************
  6299 ;; Defined at:
  6300 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  prec            1    wreg     unsigned char 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  prec            1    6[BANK0 ] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  3   87[COMRAM] unsigned char 
  6307 ;; Registers used:
  6308 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6314 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Totals:         3       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;Total ram usage:       10 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    4
  6321 ;; This function calls:
  6322 ;;		___awdiv
  6323 ;;		___awmod
  6324 ;;		___ftmul
  6325 ;;		___wmul
  6326 ;; This function is called by:
  6327 ;;		_sprintf
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text22
  6332  000FFA                     __ptext22:
  6333                           	opt stack 0
  6334  000FFA                     _fround:
  6335                           	opt stack 24
  6336                           
  6337                           ;incstack = 0
  6338                           ;fround@prec stored from wreg
  6339  000FFA  0100               	movlb	0	; () banked
  6340  000FFC  6F86               	movwf	fround@prec& (0+255),b
  6341                           
  6342                           ;doprnt.c: 413: if(prec>=110)
  6343  000FFE  0E6D               	movlw	109
  6344  001000  0100               	movlb	0	; () banked
  6345  001002  6586               	cpfsgt	fround@prec& (0+255),b
  6346  001004  D0A8               	goto	l349
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6350  001006  0E00               	movlw	0
  6351  001008  6E2A               	movwf	___wmul@multiplicand+1,c
  6352  00100A  0E03               	movlw	3
  6353  00100C  6E29               	movwf	___wmul@multiplicand,c
  6354  00100E  0E00               	movlw	0
  6355  001010  6E22               	movwf	___awdiv@divisor+1,c
  6356  001012  0E0A               	movlw	10
  6357  001014  6E21               	movwf	___awdiv@divisor,c
  6358  001016  0E00               	movlw	0
  6359  001018  6E1C               	movwf	___awmod@divisor+1,c
  6360  00101A  0E64               	movlw	100
  6361  00101C  6E1B               	movwf	___awmod@divisor,c
  6362  00101E  C086  F019         	movff	fround@prec,___awmod@dividend
  6363  001022  6A1A               	clrf	___awmod@dividend+1,c
  6364  001024  EC4D  F010         	call	___awmod	;wreg free
  6365  001028  C019  F01F         	movff	?___awmod,___awdiv@dividend
  6366  00102C  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
  6367  001030  ECCA  F00F         	call	___awdiv	;wreg free
  6368  001034  0E09               	movlw	9
  6369  001036  241F               	addwf	?___awdiv,w,c
  6370  001038  6E27               	movwf	___wmul@multiplier,c
  6371  00103A  0E00               	movlw	0
  6372  00103C  2020               	addwfc	?___awdiv+1,w,c
  6373  00103E  6E28               	movwf	___wmul@multiplier+1,c
  6374  001040  EC1C  F013         	call	___wmul	;wreg free
  6375  001044  0EF2               	movlw	low __npowers_
  6376  001046  2427               	addwf	?___wmul,w,c
  6377  001048  6EF6               	movwf	tblptrl,c
  6378  00104A  0EFE               	movlw	high __npowers_
  6379  00104C  2028               	addwfc	?___wmul+1,w,c
  6380  00104E  6EF7               	movwf	tblptrh,c
  6381  001050                     	if	1	;There are 3 active tblptr bytes
  6382  001050  6AF8               	clrf	tblptru,c
  6383  001052  0E00               	movlw	low (__mediumconst shr (0+16))
  6384  001054  22F8               	addwfc	tblptru,f,c
  6385  001056                     	endif
  6386  001056  0009               	tblrd		*+
  6387  001058  CFF5 F04C          	movff	tablat,___ftmul@f2
  6388  00105C  0009               	tblrd		*+
  6389  00105E  CFF5 F04D          	movff	tablat,___ftmul@f2+1
  6390  001062  000A               	tblrd		*-
  6391  001064  CFF5 F04E          	movff	tablat,___ftmul@f2+2
  6392  001068  0E00               	movlw	0
  6393  00106A  6E22               	movwf	___awdiv@divisor+1,c
  6394  00106C  0E64               	movlw	100
  6395  00106E  6E21               	movwf	___awdiv@divisor,c
  6396  001070  C086  F01F         	movff	fround@prec,___awdiv@dividend
  6397  001074  6A20               	clrf	___awdiv@dividend+1,c
  6398  001076  ECCA  F00F         	call	___awdiv	;wreg free
  6399  00107A  0E12               	movlw	18
  6400  00107C  241F               	addwf	?___awdiv,w,c
  6401  00107E  6E27               	movwf	___wmul@multiplier,c
  6402  001080  0E00               	movlw	0
  6403  001082  2020               	addwfc	?___awdiv+1,w,c
  6404  001084  6E28               	movwf	___wmul@multiplier+1,c
  6405  001086  0E00               	movlw	0
  6406  001088  6E2A               	movwf	___wmul@multiplicand+1,c
  6407  00108A  0E03               	movlw	3
  6408  00108C  6E29               	movwf	___wmul@multiplicand,c
  6409  00108E  EC1C  F013         	call	___wmul	;wreg free
  6410  001092  0EF2               	movlw	low __npowers_
  6411  001094  2427               	addwf	?___wmul,w,c
  6412  001096  6EF6               	movwf	tblptrl,c
  6413  001098  0EFE               	movlw	high __npowers_
  6414  00109A  2028               	addwfc	?___wmul+1,w,c
  6415  00109C  6EF7               	movwf	tblptrh,c
  6416  00109E                     	if	1	;There are 3 active tblptr bytes
  6417  00109E  6AF8               	clrf	tblptru,c
  6418  0010A0  0E00               	movlw	low (__mediumconst shr (0+16))
  6419  0010A2  22F8               	addwfc	tblptru,f,c
  6420  0010A4                     	endif
  6421  0010A4  0009               	tblrd		*+
  6422  0010A6  CFF5 F049          	movff	tablat,___ftmul@f1
  6423  0010AA  0009               	tblrd		*+
  6424  0010AC  CFF5 F04A          	movff	tablat,___ftmul@f1+1
  6425  0010B0  000A               	tblrd		*-
  6426  0010B2  CFF5 F04B          	movff	tablat,___ftmul@f1+2
  6427  0010B6  EC3E  F00E         	call	___ftmul	;wreg free
  6428  0010BA  C049  F083         	movff	?___ftmul,_fround$1287
  6429  0010BE  C04A  F084         	movff	?___ftmul+1,_fround$1287+1
  6430  0010C2  C04B  F085         	movff	?___ftmul+2,_fround$1287+2
  6431                           
  6432                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6433  0010C6  0E00               	movlw	0
  6434  0010C8  6E2A               	movwf	___wmul@multiplicand+1,c
  6435  0010CA  0E03               	movlw	3
  6436  0010CC  6E29               	movwf	___wmul@multiplicand,c
  6437  0010CE  0E00               	movlw	0
  6438  0010D0  6E1C               	movwf	___awmod@divisor+1,c
  6439  0010D2  0E0A               	movlw	10
  6440  0010D4  6E1B               	movwf	___awmod@divisor,c
  6441  0010D6  C086  F019         	movff	fround@prec,___awmod@dividend
  6442  0010DA  6A1A               	clrf	___awmod@dividend+1,c
  6443  0010DC  EC4D  F010         	call	___awmod	;wreg free
  6444  0010E0  C019  F027         	movff	?___awmod,___wmul@multiplier
  6445  0010E4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6446  0010E8  EC1C  F013         	call	___wmul	;wreg free
  6447  0010EC  0EF2               	movlw	low __npowers_
  6448  0010EE  2427               	addwf	?___wmul,w,c
  6449  0010F0  6EF6               	movwf	tblptrl,c
  6450  0010F2  0EFE               	movlw	high __npowers_
  6451  0010F4  2028               	addwfc	?___wmul+1,w,c
  6452  0010F6  6EF7               	movwf	tblptrh,c
  6453  0010F8                     	if	1	;There are 3 active tblptr bytes
  6454  0010F8  6AF8               	clrf	tblptru,c
  6455  0010FA  0E00               	movlw	low (__mediumconst shr (0+16))
  6456  0010FC  22F8               	addwfc	tblptru,f,c
  6457  0010FE                     	endif
  6458  0010FE  0009               	tblrd		*+
  6459  001100  CFF5 F04C          	movff	tablat,___ftmul@f2
  6460  001104  0009               	tblrd		*+
  6461  001106  CFF5 F04D          	movff	tablat,___ftmul@f2+1
  6462  00110A  000A               	tblrd		*-
  6463  00110C  CFF5 F04E          	movff	tablat,___ftmul@f2+2
  6464  001110  C083  F049         	movff	_fround$1287,___ftmul@f1
  6465  001114  C084  F04A         	movff	_fround$1287+1,___ftmul@f1+1
  6466  001118  C085  F04B         	movff	_fround$1287+2,___ftmul@f1+2
  6467  00111C  EC3E  F00E         	call	___ftmul	;wreg free
  6468  001120  C049  F080         	movff	?___ftmul,_fround$1288
  6469  001124  C04A  F081         	movff	?___ftmul+1,_fround$1288+1
  6470  001128  C04B  F082         	movff	?___ftmul+2,_fround$1288+2
  6471                           
  6472                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6473  00112C  C080  F049         	movff	_fround$1288,___ftmul@f1
  6474  001130  C081  F04A         	movff	_fround$1288+1,___ftmul@f1+1
  6475  001134  C082  F04B         	movff	_fround$1288+2,___ftmul@f1+2
  6476  001138  0E00               	movlw	0
  6477  00113A  6E4C               	movwf	___ftmul@f2,c
  6478  00113C  0E00               	movlw	0
  6479  00113E  6E4D               	movwf	___ftmul@f2+1,c
  6480  001140  0E3F               	movlw	63
  6481  001142  6E4E               	movwf	___ftmul@f2+2,c
  6482  001144  EC3E  F00E         	call	___ftmul	;wreg free
  6483  001148  C049  F058         	movff	?___ftmul,?_fround
  6484  00114C  C04A  F059         	movff	?___ftmul+1,?_fround+1
  6485  001150  C04B  F05A         	movff	?___ftmul+2,?_fround+2
  6486  001154  0012               	return	
  6487  001156                     l349:
  6488                           
  6489                           ;doprnt.c: 415: else if(prec > 10)
  6490  001156  0E0A               	movlw	10
  6491  001158  0100               	movlb	0	; () banked
  6492  00115A  6586               	cpfsgt	fround@prec& (0+255),b
  6493  00115C  D069               	goto	l352
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6497  00115E  0E00               	movlw	0
  6498  001160  6E2A               	movwf	___wmul@multiplicand+1,c
  6499  001162  0E03               	movlw	3
  6500  001164  6E29               	movwf	___wmul@multiplicand,c
  6501  001166  0E00               	movlw	0
  6502  001168  6E1C               	movwf	___awmod@divisor+1,c
  6503  00116A  0E0A               	movlw	10
  6504  00116C  6E1B               	movwf	___awmod@divisor,c
  6505  00116E  C086  F019         	movff	fround@prec,___awmod@dividend
  6506  001172  6A1A               	clrf	___awmod@dividend+1,c
  6507  001174  EC4D  F010         	call	___awmod	;wreg free
  6508  001178  C019  F027         	movff	?___awmod,___wmul@multiplier
  6509  00117C  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  6510  001180  EC1C  F013         	call	___wmul	;wreg free
  6511  001184  0EF2               	movlw	low __npowers_
  6512  001186  2427               	addwf	?___wmul,w,c
  6513  001188  6EF6               	movwf	tblptrl,c
  6514  00118A  0EFE               	movlw	high __npowers_
  6515  00118C  2028               	addwfc	?___wmul+1,w,c
  6516  00118E  6EF7               	movwf	tblptrh,c
  6517  001190                     	if	1	;There are 3 active tblptr bytes
  6518  001190  6AF8               	clrf	tblptru,c
  6519  001192  0E00               	movlw	low (__mediumconst shr (0+16))
  6520  001194  22F8               	addwfc	tblptru,f,c
  6521  001196                     	endif
  6522  001196  0009               	tblrd		*+
  6523  001198  CFF5 F04C          	movff	tablat,___ftmul@f2
  6524  00119C  0009               	tblrd		*+
  6525  00119E  CFF5 F04D          	movff	tablat,___ftmul@f2+1
  6526  0011A2  000A               	tblrd		*-
  6527  0011A4  CFF5 F04E          	movff	tablat,___ftmul@f2+2
  6528  0011A8  0E00               	movlw	0
  6529  0011AA  6E22               	movwf	___awdiv@divisor+1,c
  6530  0011AC  0E0A               	movlw	10
  6531  0011AE  6E21               	movwf	___awdiv@divisor,c
  6532  0011B0  C086  F01F         	movff	fround@prec,___awdiv@dividend
  6533  0011B4  6A20               	clrf	___awdiv@dividend+1,c
  6534  0011B6  ECCA  F00F         	call	___awdiv	;wreg free
  6535  0011BA  0E09               	movlw	9
  6536  0011BC  241F               	addwf	?___awdiv,w,c
  6537  0011BE  6E27               	movwf	___wmul@multiplier,c
  6538  0011C0  0E00               	movlw	0
  6539  0011C2  2020               	addwfc	?___awdiv+1,w,c
  6540  0011C4  6E28               	movwf	___wmul@multiplier+1,c
  6541  0011C6  0E00               	movlw	0
  6542  0011C8  6E2A               	movwf	___wmul@multiplicand+1,c
  6543  0011CA  0E03               	movlw	3
  6544  0011CC  6E29               	movwf	___wmul@multiplicand,c
  6545  0011CE  EC1C  F013         	call	___wmul	;wreg free
  6546  0011D2  0EF2               	movlw	low __npowers_
  6547  0011D4  2427               	addwf	?___wmul,w,c
  6548  0011D6  6EF6               	movwf	tblptrl,c
  6549  0011D8  0EFE               	movlw	high __npowers_
  6550  0011DA  2028               	addwfc	?___wmul+1,w,c
  6551  0011DC  6EF7               	movwf	tblptrh,c
  6552  0011DE                     	if	1	;There are 3 active tblptr bytes
  6553  0011DE  6AF8               	clrf	tblptru,c
  6554  0011E0  0E00               	movlw	low (__mediumconst shr (0+16))
  6555  0011E2  22F8               	addwfc	tblptru,f,c
  6556  0011E4                     	endif
  6557  0011E4  0009               	tblrd		*+
  6558  0011E6  CFF5 F049          	movff	tablat,___ftmul@f1
  6559  0011EA  0009               	tblrd		*+
  6560  0011EC  CFF5 F04A          	movff	tablat,___ftmul@f1+1
  6561  0011F0  000A               	tblrd		*-
  6562  0011F2  CFF5 F04B          	movff	tablat,___ftmul@f1+2
  6563  0011F6  EC3E  F00E         	call	___ftmul	;wreg free
  6564  0011FA  C049  F083         	movff	?___ftmul,_fround$1287
  6565  0011FE  C04A  F084         	movff	?___ftmul+1,_fround$1287+1
  6566  001202  C04B  F085         	movff	?___ftmul+2,_fround$1287+2
  6567                           
  6568                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6569  001206  C083  F049         	movff	_fround$1287,___ftmul@f1
  6570  00120A  C084  F04A         	movff	_fround$1287+1,___ftmul@f1+1
  6571  00120E  C085  F04B         	movff	_fround$1287+2,___ftmul@f1+2
  6572  001212  0E00               	movlw	0
  6573  001214  6E4C               	movwf	___ftmul@f2,c
  6574  001216  0E00               	movlw	0
  6575  001218  6E4D               	movwf	___ftmul@f2+1,c
  6576  00121A  0E3F               	movlw	63
  6577  00121C  6E4E               	movwf	___ftmul@f2+2,c
  6578  00121E  EC3E  F00E         	call	___ftmul	;wreg free
  6579  001222  C049  F058         	movff	?___ftmul,?_fround
  6580  001226  C04A  F059         	movff	?___ftmul+1,?_fround+1
  6581  00122A  C04B  F05A         	movff	?___ftmul+2,?_fround+2
  6582  00122E  0012               	return	
  6583  001230                     l352:
  6584                           
  6585                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6586  001230  0100               	movlb	0	; () banked
  6587  001232  5186               	movf	fround@prec& (0+255),w,b
  6588  001234  0D03               	mullw	3
  6589  001236  0EF2               	movlw	low __npowers_
  6590  001238  24F3               	addwf	prodl,w,c
  6591  00123A  6EF6               	movwf	tblptrl,c
  6592  00123C  0EFE               	movlw	high __npowers_
  6593  00123E  20F4               	addwfc	prodh,w,c
  6594  001240  6EF7               	movwf	tblptrh,c
  6595  001242                     	if	1	;There are 3 active tblptr bytes
  6596  001242  6AF8               	clrf	tblptru,c
  6597  001244  0E00               	movlw	low (__mediumconst shr (0+16))
  6598  001246  22F8               	addwfc	tblptru,f,c
  6599  001248                     	endif
  6600  001248  0009               	tblrd		*+
  6601  00124A  CFF5 F049          	movff	tablat,___ftmul@f1
  6602  00124E  0009               	tblrd		*+
  6603  001250  CFF5 F04A          	movff	tablat,___ftmul@f1+1
  6604  001254  000A               	tblrd		*-
  6605  001256  CFF5 F04B          	movff	tablat,___ftmul@f1+2
  6606  00125A  0E00               	movlw	0
  6607  00125C  6E4C               	movwf	___ftmul@f2,c
  6608  00125E  0E00               	movlw	0
  6609  001260  6E4D               	movwf	___ftmul@f2+1,c
  6610  001262  0E3F               	movlw	63
  6611  001264  6E4E               	movwf	___ftmul@f2+2,c
  6612  001266  EC3E  F00E         	call	___ftmul	;wreg free
  6613  00126A  C049  F058         	movff	?___ftmul,?_fround
  6614  00126E  C04A  F059         	movff	?___ftmul+1,?_fround+1
  6615  001272  C04B  F05A         	movff	?___ftmul+2,?_fround+2
  6616  001276  0012               	return	
  6617  001278                     __end_of_fround:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           intcon	equ	0xFF2
  6626                           postinc0	equ	0xFEE
  6627                           wreg	equ	0xFE8
  6628                           postdec1	equ	0xFE5
  6629                           fsr1l	equ	0xFE1
  6630                           indf2	equ	0xFDF
  6631                           postinc2	equ	0xFDE
  6632                           postdec2	equ	0xFDD
  6633                           fsr2h	equ	0xFDA
  6634                           fsr2l	equ	0xFD9
  6635                           status	equ	0xFD8
  6636                           
  6637 ;; *************** function ___wmul *****************
  6638 ;; Defined at:
  6639 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  multiplier      2   38[COMRAM] unsigned int 
  6642 ;;  multiplicand    2   40[COMRAM] unsigned int 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;  product         2   42[COMRAM] unsigned int 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  2   38[COMRAM] unsigned int 
  6647 ;; Registers used:
  6648 ;;		wreg, status,2, status,0, prodl, prodh
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;Total ram usage:        6 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    2
  6661 ;; This function calls:
  6662 ;;		Nothing
  6663 ;; This function is called by:
  6664 ;;		_read_adc_voltage
  6665 ;;		_fround
  6666 ;;		_scale
  6667 ;;		_sprintf
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text23
  6672  002638                     __ptext23:
  6673                           	opt stack 0
  6674  002638                     ___wmul:
  6675                           	opt stack 27
  6676                           
  6677                           ;incstack = 0
  6678  002638  5027               	movf	___wmul@multiplier,w,c
  6679  00263A  0229               	mulwf	___wmul@multiplicand,c
  6680  00263C  CFF3 F02B          	movff	prodl,___wmul@product
  6681  002640  CFF4 F02C          	movff	prodh,___wmul@product+1
  6682  002644  5027               	movf	___wmul@multiplier,w,c
  6683  002646  022A               	mulwf	___wmul@multiplicand+1,c
  6684  002648  50F3               	movf	prodl,w,c
  6685  00264A  262C               	addwf	___wmul@product+1,f,c
  6686  00264C  5028               	movf	___wmul@multiplier+1,w,c
  6687  00264E  0229               	mulwf	___wmul@multiplicand,c
  6688  002650  50F3               	movf	prodl,w,c
  6689  002652  262C               	addwf	___wmul@product+1,f,c
  6690  002654  C02B  F027         	movff	___wmul@product,?___wmul
  6691  002658  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  6692  00265C  0012               	return	
  6693  00265E                     __end_of___wmul:
  6694                           	opt stack 0
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodh	equ	0xFF4
  6700                           prodl	equ	0xFF3
  6701                           intcon	equ	0xFF2
  6702                           postinc0	equ	0xFEE
  6703                           wreg	equ	0xFE8
  6704                           postdec1	equ	0xFE5
  6705                           fsr1l	equ	0xFE1
  6706                           indf2	equ	0xFDF
  6707                           postinc2	equ	0xFDE
  6708                           postdec2	equ	0xFDD
  6709                           fsr2h	equ	0xFDA
  6710                           fsr2l	equ	0xFD9
  6711                           status	equ	0xFD8
  6712                           
  6713 ;; *************** function ___ftmul *****************
  6714 ;; Defined at:
  6715 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  f1              3   72[COMRAM] float 
  6718 ;;  f2              3   75[COMRAM] float 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;  f3_as_produc    3   82[COMRAM] unsigned um
  6721 ;;  sign            1   86[COMRAM] unsigned char 
  6722 ;;  cntr            1   85[COMRAM] unsigned char 
  6723 ;;  exp             1   81[COMRAM] unsigned char 
  6724 ;; Return value:  Size  Location     Type
  6725 ;;                  3   72[COMRAM] float 
  6726 ;; Registers used:
  6727 ;;		wreg, status,2, status,0, cstack
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/0
  6730 ;;		On exit  : 0/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6733 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;Total ram usage:       15 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; Hardware stack levels required when called:    3
  6740 ;; This function calls:
  6741 ;;		___ftpack
  6742 ;; This function is called by:
  6743 ;;		_main
  6744 ;;		_fround
  6745 ;;		_scale
  6746 ;;		_sprintf
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text24
  6751  001C7C                     __ptext24:
  6752                           	opt stack 0
  6753  001C7C                     ___ftmul:
  6754                           	opt stack 24
  6755                           
  6756                           ;incstack = 0
  6757  001C7C  C04B  F04F         	movff	___ftmul@f1+2,??___ftmul
  6758  001C80  6A50               	clrf	(??___ftmul+1)& (0+255),c
  6759  001C82  6A51               	clrf	(??___ftmul+2)& (0+255),c
  6760  001C84  344A               	rlcf	___ftmul@f1+1,w,c
  6761  001C86  364F               	rlcf	??___ftmul& (0+255),f,c
  6762  001C88  E301               	bnc	u4881
  6763  001C8A  8050               	bsf	(??___ftmul+1)& (0+255),0,c
  6764  001C8C                     u4881:
  6765  001C8C  504F               	movf	??___ftmul,w,c
  6766  001C8E  6E52               	movwf	___ftmul@exp,c
  6767  001C90  5052               	movf	___ftmul@exp,w,c
  6768  001C92  A4D8               	btfss	status,2,c
  6769  001C94  D007               	goto	l807
  6770  001C96  0E00               	movlw	0
  6771  001C98  6E49               	movwf	?___ftmul,c
  6772  001C9A  0E00               	movlw	0
  6773  001C9C  6E4A               	movwf	?___ftmul+1,c
  6774  001C9E  0E00               	movlw	0
  6775  001CA0  6E4B               	movwf	?___ftmul+2,c
  6776  001CA2  0012               	return	
  6777  001CA4                     l807:
  6778  001CA4  C04E  F04F         	movff	___ftmul@f2+2,??___ftmul
  6779  001CA8  6A50               	clrf	(??___ftmul+1)& (0+255),c
  6780  001CAA  6A51               	clrf	(??___ftmul+2)& (0+255),c
  6781  001CAC  344D               	rlcf	___ftmul@f2+1,w,c
  6782  001CAE  364F               	rlcf	??___ftmul& (0+255),f,c
  6783  001CB0  E301               	bnc	u4901
  6784  001CB2  8050               	bsf	(??___ftmul+1)& (0+255),0,c
  6785  001CB4                     u4901:
  6786  001CB4  504F               	movf	??___ftmul,w,c
  6787  001CB6  6E57               	movwf	___ftmul@sign,c
  6788  001CB8  5057               	movf	___ftmul@sign,w,c
  6789  001CBA  A4D8               	btfss	status,2,c
  6790  001CBC  D007               	goto	l809
  6791  001CBE  0E00               	movlw	0
  6792  001CC0  6E49               	movwf	?___ftmul,c
  6793  001CC2  0E00               	movlw	0
  6794  001CC4  6E4A               	movwf	?___ftmul+1,c
  6795  001CC6  0E00               	movlw	0
  6796  001CC8  6E4B               	movwf	?___ftmul+2,c
  6797  001CCA  0012               	return	
  6798  001CCC                     l809:
  6799  001CCC  5057               	movf	___ftmul@sign,w,c
  6800  001CCE  0F7B               	addlw	123
  6801  001CD0  2652               	addwf	___ftmul@exp,f,c
  6802  001CD2  C04B  F057         	movff	___ftmul@f1+2,___ftmul@sign
  6803  001CD6  504E               	movf	___ftmul@f2+2,w,c
  6804  001CD8  1A57               	xorwf	___ftmul@sign,f,c
  6805  001CDA  0E80               	movlw	128
  6806  001CDC  1657               	andwf	___ftmul@sign,f,c
  6807  001CDE  8E4A               	bsf	___ftmul@f1+1,7,c
  6808  001CE0  8E4D               	bsf	___ftmul@f2+1,7,c
  6809  001CE2  0EFF               	movlw	255
  6810  001CE4  164C               	andwf	___ftmul@f2,f,c
  6811  001CE6  0EFF               	movlw	255
  6812  001CE8  164D               	andwf	___ftmul@f2+1,f,c
  6813  001CEA  0E00               	movlw	0
  6814  001CEC  164E               	andwf	___ftmul@f2+2,f,c
  6815  001CEE  0E00               	movlw	0
  6816  001CF0  6E53               	movwf	___ftmul@f3_as_product,c
  6817  001CF2  0E00               	movlw	0
  6818  001CF4  6E54               	movwf	___ftmul@f3_as_product+1,c
  6819  001CF6  0E00               	movlw	0
  6820  001CF8  6E55               	movwf	___ftmul@f3_as_product+2,c
  6821  001CFA  0E07               	movlw	7
  6822  001CFC  6E56               	movwf	___ftmul@cntr,c
  6823  001CFE  A049               	btfss	___ftmul@f1,0,c
  6824  001D00  D006               	goto	l811
  6825  001D02  504C               	movf	___ftmul@f2,w,c
  6826  001D04  2653               	addwf	___ftmul@f3_as_product,f,c
  6827  001D06  504D               	movf	___ftmul@f2+1,w,c
  6828  001D08  2254               	addwfc	___ftmul@f3_as_product+1,f,c
  6829  001D0A  504E               	movf	___ftmul@f2+2,w,c
  6830  001D0C  2255               	addwfc	___ftmul@f3_as_product+2,f,c
  6831  001D0E                     l811:
  6832  001D0E  90D8               	bcf	status,0,c
  6833  001D10  324B               	rrcf	___ftmul@f1+2,f,c
  6834  001D12  324A               	rrcf	___ftmul@f1+1,f,c
  6835  001D14  3249               	rrcf	___ftmul@f1,f,c
  6836  001D16  90D8               	bcf	status,0,c
  6837  001D18  364C               	rlcf	___ftmul@f2,f,c
  6838  001D1A  364D               	rlcf	___ftmul@f2+1,f,c
  6839  001D1C  364E               	rlcf	___ftmul@f2+2,f,c
  6840  001D1E  2E56               	decfsz	___ftmul@cntr,f,c
  6841  001D20  D7EE               	goto	l810
  6842  001D22  0E09               	movlw	9
  6843  001D24  6E56               	movwf	___ftmul@cntr,c
  6844  001D26  A049               	btfss	___ftmul@f1,0,c
  6845  001D28  D006               	goto	l814
  6846  001D2A  504C               	movf	___ftmul@f2,w,c
  6847  001D2C  2653               	addwf	___ftmul@f3_as_product,f,c
  6848  001D2E  504D               	movf	___ftmul@f2+1,w,c
  6849  001D30  2254               	addwfc	___ftmul@f3_as_product+1,f,c
  6850  001D32  504E               	movf	___ftmul@f2+2,w,c
  6851  001D34  2255               	addwfc	___ftmul@f3_as_product+2,f,c
  6852  001D36                     l814:
  6853  001D36  90D8               	bcf	status,0,c
  6854  001D38  324B               	rrcf	___ftmul@f1+2,f,c
  6855  001D3A  324A               	rrcf	___ftmul@f1+1,f,c
  6856  001D3C  3249               	rrcf	___ftmul@f1,f,c
  6857  001D3E  90D8               	bcf	status,0,c
  6858  001D40  3255               	rrcf	___ftmul@f3_as_product+2,f,c
  6859  001D42  3254               	rrcf	___ftmul@f3_as_product+1,f,c
  6860  001D44  3253               	rrcf	___ftmul@f3_as_product,f,c
  6861  001D46  2E56               	decfsz	___ftmul@cntr,f,c
  6862  001D48  D7EE               	goto	l813
  6863  001D4A  C053  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  6864  001D4E  C054  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6865  001D52  C055  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6866  001D56  C052  F01C         	movff	___ftmul@exp,___ftpack@exp
  6867  001D5A  C057  F01D         	movff	___ftmul@sign,___ftpack@sign
  6868  001D5E  EC2B  F00F         	call	___ftpack	;wreg free
  6869  001D62  C019  F049         	movff	?___ftpack,?___ftmul
  6870  001D66  C01A  F04A         	movff	?___ftpack+1,?___ftmul+1
  6871  001D6A  C01B  F04B         	movff	?___ftpack+2,?___ftmul+2
  6872  001D6E  0012               	return	
  6873  001D70                     __end_of___ftmul:
  6874                           	opt stack 0
  6875                           tblptru	equ	0xFF8
  6876                           tblptrh	equ	0xFF7
  6877                           tblptrl	equ	0xFF6
  6878                           tablat	equ	0xFF5
  6879                           prodh	equ	0xFF4
  6880                           prodl	equ	0xFF3
  6881                           intcon	equ	0xFF2
  6882                           postinc0	equ	0xFEE
  6883                           wreg	equ	0xFE8
  6884                           postdec1	equ	0xFE5
  6885                           fsr1l	equ	0xFE1
  6886                           indf2	equ	0xFDF
  6887                           postinc2	equ	0xFDE
  6888                           postdec2	equ	0xFDD
  6889                           fsr2h	equ	0xFDA
  6890                           fsr2l	equ	0xFD9
  6891                           status	equ	0xFD8
  6892                           
  6893 ;; *************** function ___awmod *****************
  6894 ;; Defined at:
  6895 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;  dividend        2   24[COMRAM] int 
  6898 ;;  divisor         2   26[COMRAM] int 
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;  sign            1   29[COMRAM] unsigned char 
  6901 ;;  counter         1   28[COMRAM] unsigned char 
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  2   24[COMRAM] int 
  6904 ;; Registers used:
  6905 ;;		wreg, status,2, status,0
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6915 ;;Total ram usage:        6 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    2
  6918 ;; This function calls:
  6919 ;;		Nothing
  6920 ;; This function is called by:
  6921 ;;		_handle_buttons
  6922 ;;		_fround
  6923 ;;		_scale
  6924 ;; This function uses a non-reentrant model
  6925 ;;
  6926                           
  6927                           	psect	text25
  6928  00209A                     __ptext25:
  6929                           	opt stack 0
  6930  00209A                     ___awmod:
  6931                           	opt stack 25
  6932                           
  6933                           ;incstack = 0
  6934  00209A  0E00               	movlw	0
  6935  00209C  6E1E               	movwf	___awmod@sign,c
  6936  00209E  AE1A               	btfss	___awmod@dividend+1,7,c
  6937  0020A0  D006               	goto	l660
  6938  0020A2  6C19               	negf	___awmod@dividend,c
  6939  0020A4  1E1A               	comf	___awmod@dividend+1,f,c
  6940  0020A6  B0D8               	btfsc	status,0,c
  6941  0020A8  2A1A               	incf	___awmod@dividend+1,f,c
  6942  0020AA  0E01               	movlw	1
  6943  0020AC  6E1E               	movwf	___awmod@sign,c
  6944  0020AE                     l660:
  6945  0020AE  AE1C               	btfss	___awmod@divisor+1,7,c
  6946  0020B0  D004               	goto	l661
  6947  0020B2  6C1B               	negf	___awmod@divisor,c
  6948  0020B4  1E1C               	comf	___awmod@divisor+1,f,c
  6949  0020B6  B0D8               	btfsc	status,0,c
  6950  0020B8  2A1C               	incf	___awmod@divisor+1,f,c
  6951  0020BA                     l661:
  6952  0020BA  501B               	movf	___awmod@divisor,w,c
  6953  0020BC  101C               	iorwf	___awmod@divisor+1,w,c
  6954  0020BE  B4D8               	btfsc	status,2,c
  6955  0020C0  D018               	goto	l668
  6956  0020C2  0E01               	movlw	1
  6957  0020C4  6E1D               	movwf	___awmod@counter,c
  6958  0020C6  D004               	goto	l663
  6959  0020C8  90D8               	bcf	status,0,c
  6960  0020CA  361B               	rlcf	___awmod@divisor,f,c
  6961  0020CC  361C               	rlcf	___awmod@divisor+1,f,c
  6962  0020CE  2A1D               	incf	___awmod@counter,f,c
  6963  0020D0                     l663:
  6964  0020D0  AE1C               	btfss	___awmod@divisor+1,7,c
  6965  0020D2  D7FA               	goto	l664
  6966  0020D4                     u5030:
  6967  0020D4  501B               	movf	___awmod@divisor,w,c
  6968  0020D6  5C19               	subwf	___awmod@dividend,w,c
  6969  0020D8  501C               	movf	___awmod@divisor+1,w,c
  6970  0020DA  581A               	subwfb	___awmod@dividend+1,w,c
  6971  0020DC  A0D8               	btfss	status,0,c
  6972  0020DE  D004               	goto	l667
  6973  0020E0  501B               	movf	___awmod@divisor,w,c
  6974  0020E2  5E19               	subwf	___awmod@dividend,f,c
  6975  0020E4  501C               	movf	___awmod@divisor+1,w,c
  6976  0020E6  5A1A               	subwfb	___awmod@dividend+1,f,c
  6977  0020E8                     l667:
  6978  0020E8  90D8               	bcf	status,0,c
  6979  0020EA  321C               	rrcf	___awmod@divisor+1,f,c
  6980  0020EC  321B               	rrcf	___awmod@divisor,f,c
  6981  0020EE  2E1D               	decfsz	___awmod@counter,f,c
  6982  0020F0  D7F1               	goto	u5030
  6983  0020F2                     l668:
  6984  0020F2  501E               	movf	___awmod@sign,w,c
  6985  0020F4  B4D8               	btfsc	status,2,c
  6986  0020F6  D004               	goto	l669
  6987  0020F8  6C19               	negf	___awmod@dividend,c
  6988  0020FA  1E1A               	comf	___awmod@dividend+1,f,c
  6989  0020FC  B0D8               	btfsc	status,0,c
  6990  0020FE  2A1A               	incf	___awmod@dividend+1,f,c
  6991  002100                     l669:
  6992  002100  C019  F019         	movff	___awmod@dividend,?___awmod
  6993  002104  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
  6994  002108  0012               	return	
  6995  00210A                     __end_of___awmod:
  6996                           	opt stack 0
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           postinc0	equ	0xFEE
  7005                           wreg	equ	0xFE8
  7006                           postdec1	equ	0xFE5
  7007                           fsr1l	equ	0xFE1
  7008                           indf2	equ	0xFDF
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function ___awdiv *****************
  7016 ;; Defined at:
  7017 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  dividend        2   30[COMRAM] int 
  7020 ;;  divisor         2   32[COMRAM] int 
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;  quotient        2   36[COMRAM] int 
  7023 ;;  sign            1   35[COMRAM] unsigned char 
  7024 ;;  counter         1   34[COMRAM] unsigned char 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;                  2   30[COMRAM] int 
  7027 ;; Registers used:
  7028 ;;		wreg, status,2, status,0
  7029 ;; Tracked objects:
  7030 ;;		On entry : 0/0
  7031 ;;		On exit  : 0/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7034 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;Total ram usage:        8 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; Hardware stack levels required when called:    2
  7041 ;; This function calls:
  7042 ;;		Nothing
  7043 ;; This function is called by:
  7044 ;;		_fround
  7045 ;;		_scale
  7046 ;;		_sprintf
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text26
  7051  001F94                     __ptext26:
  7052                           	opt stack 0
  7053  001F94                     ___awdiv:
  7054                           	opt stack 25
  7055                           
  7056                           ;incstack = 0
  7057  001F94  0E00               	movlw	0
  7058  001F96  6E24               	movwf	___awdiv@sign,c
  7059  001F98  AE22               	btfss	___awdiv@divisor+1,7,c
  7060  001F9A  D006               	goto	l647
  7061  001F9C  6C21               	negf	___awdiv@divisor,c
  7062  001F9E  1E22               	comf	___awdiv@divisor+1,f,c
  7063  001FA0  B0D8               	btfsc	status,0,c
  7064  001FA2  2A22               	incf	___awdiv@divisor+1,f,c
  7065  001FA4  0E01               	movlw	1
  7066  001FA6  6E24               	movwf	___awdiv@sign,c
  7067  001FA8                     l647:
  7068  001FA8  AE20               	btfss	___awdiv@dividend+1,7,c
  7069  001FAA  D006               	goto	l648
  7070  001FAC  6C1F               	negf	___awdiv@dividend,c
  7071  001FAE  1E20               	comf	___awdiv@dividend+1,f,c
  7072  001FB0  B0D8               	btfsc	status,0,c
  7073  001FB2  2A20               	incf	___awdiv@dividend+1,f,c
  7074  001FB4  0E01               	movlw	1
  7075  001FB6  1A24               	xorwf	___awdiv@sign,f,c
  7076  001FB8                     l648:
  7077  001FB8  0E00               	movlw	0
  7078  001FBA  6E26               	movwf	___awdiv@quotient+1,c
  7079  001FBC  0E00               	movlw	0
  7080  001FBE  6E25               	movwf	___awdiv@quotient,c
  7081  001FC0  5021               	movf	___awdiv@divisor,w,c
  7082  001FC2  1022               	iorwf	___awdiv@divisor+1,w,c
  7083  001FC4  B4D8               	btfsc	status,2,c
  7084  001FC6  D01C               	goto	l655
  7085  001FC8  0E01               	movlw	1
  7086  001FCA  6E23               	movwf	___awdiv@counter,c
  7087  001FCC  D004               	goto	l650
  7088  001FCE  90D8               	bcf	status,0,c
  7089  001FD0  3621               	rlcf	___awdiv@divisor,f,c
  7090  001FD2  3622               	rlcf	___awdiv@divisor+1,f,c
  7091  001FD4  2A23               	incf	___awdiv@counter,f,c
  7092  001FD6                     l650:
  7093  001FD6  AE22               	btfss	___awdiv@divisor+1,7,c
  7094  001FD8  D7FA               	goto	l651
  7095  001FDA                     u4970:
  7096  001FDA  90D8               	bcf	status,0,c
  7097  001FDC  3625               	rlcf	___awdiv@quotient,f,c
  7098  001FDE  3626               	rlcf	___awdiv@quotient+1,f,c
  7099  001FE0  5021               	movf	___awdiv@divisor,w,c
  7100  001FE2  5C1F               	subwf	___awdiv@dividend,w,c
  7101  001FE4  5022               	movf	___awdiv@divisor+1,w,c
  7102  001FE6  5820               	subwfb	___awdiv@dividend+1,w,c
  7103  001FE8  A0D8               	btfss	status,0,c
  7104  001FEA  D005               	goto	l654
  7105  001FEC  5021               	movf	___awdiv@divisor,w,c
  7106  001FEE  5E1F               	subwf	___awdiv@dividend,f,c
  7107  001FF0  5022               	movf	___awdiv@divisor+1,w,c
  7108  001FF2  5A20               	subwfb	___awdiv@dividend+1,f,c
  7109  001FF4  8025               	bsf	___awdiv@quotient,0,c
  7110  001FF6                     l654:
  7111  001FF6  90D8               	bcf	status,0,c
  7112  001FF8  3222               	rrcf	___awdiv@divisor+1,f,c
  7113  001FFA  3221               	rrcf	___awdiv@divisor,f,c
  7114  001FFC  2E23               	decfsz	___awdiv@counter,f,c
  7115  001FFE  D7ED               	goto	u4970
  7116  002000                     l655:
  7117  002000  5024               	movf	___awdiv@sign,w,c
  7118  002002  B4D8               	btfsc	status,2,c
  7119  002004  D004               	goto	l656
  7120  002006  6C25               	negf	___awdiv@quotient,c
  7121  002008  1E26               	comf	___awdiv@quotient+1,f,c
  7122  00200A  B0D8               	btfsc	status,0,c
  7123  00200C  2A26               	incf	___awdiv@quotient+1,f,c
  7124  00200E                     l656:
  7125  00200E  C025  F01F         	movff	___awdiv@quotient,?___awdiv
  7126  002012  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
  7127  002016  0012               	return	
  7128  002018                     __end_of___awdiv:
  7129                           	opt stack 0
  7130                           tblptru	equ	0xFF8
  7131                           tblptrh	equ	0xFF7
  7132                           tblptrl	equ	0xFF6
  7133                           tablat	equ	0xFF5
  7134                           prodh	equ	0xFF4
  7135                           prodl	equ	0xFF3
  7136                           intcon	equ	0xFF2
  7137                           postinc0	equ	0xFEE
  7138                           wreg	equ	0xFE8
  7139                           postdec1	equ	0xFE5
  7140                           fsr1l	equ	0xFE1
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           fsr2h	equ	0xFDA
  7145                           fsr2l	equ	0xFD9
  7146                           status	equ	0xFD8
  7147                           
  7148 ;; *************** function __tdiv_to_l_ *****************
  7149 ;; Defined at:
  7150 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  f1              3   24[COMRAM] float 
  7153 ;;  f2              3   27[COMRAM] float 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  quot            4   33[COMRAM] unsigned long 
  7156 ;;  exp1            1   38[COMRAM] unsigned char 
  7157 ;;  cntr            1   37[COMRAM] unsigned char 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  4   24[COMRAM] unsigned long 
  7160 ;; Registers used:
  7161 ;;		wreg, status,2, status,0
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7167 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;Total ram usage:       15 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    2
  7174 ;; This function calls:
  7175 ;;		Nothing
  7176 ;; This function is called by:
  7177 ;;		_sprintf
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text27
  7182  0015DA                     __ptext27:
  7183                           	opt stack 0
  7184  0015DA                     __tdiv_to_l_:
  7185                           	opt stack 26
  7186                           
  7187                           ;incstack = 0
  7188  0015DA  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7189  0015DE  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7190  0015E0  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7191  0015E2  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
  7192  0015E4  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7193  0015E6  E301               	bnc	u5191
  7194  0015E8  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7195  0015EA                     u5191:
  7196  0015EA  501F               	movf	??__tdiv_to_l_,w,c
  7197  0015EC  6E27               	movwf	__tdiv_to_l_@exp1,c
  7198  0015EE  5027               	movf	__tdiv_to_l_@exp1,w,c
  7199  0015F0  A4D8               	btfss	status,2,c
  7200  0015F2  D009               	goto	l783
  7201  0015F4  0E00               	movlw	0
  7202  0015F6  6E19               	movwf	?__tdiv_to_l_,c
  7203  0015F8  0E00               	movlw	0
  7204  0015FA  6E1A               	movwf	?__tdiv_to_l_+1,c
  7205  0015FC  0E00               	movlw	0
  7206  0015FE  6E1B               	movwf	?__tdiv_to_l_+2,c
  7207  001600  0E00               	movlw	0
  7208  001602  6E1C               	movwf	?__tdiv_to_l_+3,c
  7209  001604  0012               	return	
  7210  001606                     l783:
  7211  001606  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7212  00160A  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7213  00160C  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7214  00160E  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  7215  001610  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7216  001612  E301               	bnc	u5211
  7217  001614  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7218  001616                     u5211:
  7219  001616  501F               	movf	??__tdiv_to_l_,w,c
  7220  001618  6E26               	movwf	__tdiv_to_l_@cntr,c
  7221  00161A  5026               	movf	__tdiv_to_l_@cntr,w,c
  7222  00161C  A4D8               	btfss	status,2,c
  7223  00161E  D009               	goto	l785
  7224  001620  0E00               	movlw	0
  7225  001622  6E19               	movwf	?__tdiv_to_l_,c
  7226  001624  0E00               	movlw	0
  7227  001626  6E1A               	movwf	?__tdiv_to_l_+1,c
  7228  001628  0E00               	movlw	0
  7229  00162A  6E1B               	movwf	?__tdiv_to_l_+2,c
  7230  00162C  0E00               	movlw	0
  7231  00162E  6E1C               	movwf	?__tdiv_to_l_+3,c
  7232  001630  0012               	return	
  7233  001632                     l785:
  7234  001632  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
  7235  001634  0EFF               	movlw	255
  7236  001636  1619               	andwf	__tdiv_to_l_@f1,f,c
  7237  001638  0EFF               	movlw	255
  7238  00163A  161A               	andwf	__tdiv_to_l_@f1+1,f,c
  7239  00163C  0E00               	movlw	0
  7240  00163E  161B               	andwf	__tdiv_to_l_@f1+2,f,c
  7241  001640  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  7242  001642  0EFF               	movlw	255
  7243  001644  161C               	andwf	__tdiv_to_l_@f2,f,c
  7244  001646  0EFF               	movlw	255
  7245  001648  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  7246  00164A  0E00               	movlw	0
  7247  00164C  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  7248  00164E  0E00               	movlw	0
  7249  001650  6E22               	movwf	__tdiv_to_l_@quot,c
  7250  001652  0E00               	movlw	0
  7251  001654  6E23               	movwf	__tdiv_to_l_@quot+1,c
  7252  001656  0E00               	movlw	0
  7253  001658  6E24               	movwf	__tdiv_to_l_@quot+2,c
  7254  00165A  0E00               	movlw	0
  7255  00165C  6E25               	movwf	__tdiv_to_l_@quot+3,c
  7256  00165E  0E7F               	movlw	127
  7257  001660  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7258  001662  5026               	movf	__tdiv_to_l_@cntr,w,c
  7259  001664  0F98               	addlw	152
  7260  001666  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  7261  001668  0E18               	movlw	24
  7262  00166A  6E26               	movwf	__tdiv_to_l_@cntr,c
  7263  00166C                     l786:
  7264  00166C  90D8               	bcf	status,0,c
  7265  00166E  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7266  001670  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7267  001672  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7268  001674  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7269  001676  501C               	movf	__tdiv_to_l_@f2,w,c
  7270  001678  5C19               	subwf	__tdiv_to_l_@f1,w,c
  7271  00167A  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7272  00167C  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
  7273  00167E  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7274  001680  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
  7275  001682  A0D8               	btfss	status,0,c
  7276  001684  D007               	goto	l787
  7277  001686  501C               	movf	__tdiv_to_l_@f2,w,c
  7278  001688  5E19               	subwf	__tdiv_to_l_@f1,f,c
  7279  00168A  501D               	movf	__tdiv_to_l_@f2+1,w,c
  7280  00168C  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
  7281  00168E  501E               	movf	__tdiv_to_l_@f2+2,w,c
  7282  001690  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
  7283  001692  8022               	bsf	__tdiv_to_l_@quot,0,c
  7284  001694                     l787:
  7285  001694  90D8               	bcf	status,0,c
  7286  001696  3619               	rlcf	__tdiv_to_l_@f1,f,c
  7287  001698  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
  7288  00169A  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
  7289  00169C  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  7290  00169E  D7E6               	goto	l786
  7291  0016A0  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  7292  0016A2  D016               	goto	l789
  7293  0016A4  5027               	movf	__tdiv_to_l_@exp1,w,c
  7294  0016A6  0A80               	xorlw	128
  7295  0016A8  0F97               	addlw	151
  7296  0016AA  B0D8               	btfsc	status,0,c
  7297  0016AC  D009               	goto	l790
  7298  0016AE  0E00               	movlw	0
  7299  0016B0  6E19               	movwf	?__tdiv_to_l_,c
  7300  0016B2  0E00               	movlw	0
  7301  0016B4  6E1A               	movwf	?__tdiv_to_l_+1,c
  7302  0016B6  0E00               	movlw	0
  7303  0016B8  6E1B               	movwf	?__tdiv_to_l_+2,c
  7304  0016BA  0E00               	movlw	0
  7305  0016BC  6E1C               	movwf	?__tdiv_to_l_+3,c
  7306  0016BE  0012               	return	
  7307  0016C0                     l790:
  7308  0016C0  90D8               	bcf	status,0,c
  7309  0016C2  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  7310  0016C4  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  7311  0016C6  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  7312  0016C8  3222               	rrcf	__tdiv_to_l_@quot,f,c
  7313  0016CA  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  7314  0016CC  D7F9               	goto	l790
  7315  0016CE  D015               	goto	u5270
  7316  0016D0                     l789:
  7317  0016D0  0E17               	movlw	23
  7318  0016D2  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  7319  0016D4  D00F               	goto	l795
  7320  0016D6  0E00               	movlw	0
  7321  0016D8  6E19               	movwf	?__tdiv_to_l_,c
  7322  0016DA  0E00               	movlw	0
  7323  0016DC  6E1A               	movwf	?__tdiv_to_l_+1,c
  7324  0016DE  0E00               	movlw	0
  7325  0016E0  6E1B               	movwf	?__tdiv_to_l_+2,c
  7326  0016E2  0E00               	movlw	0
  7327  0016E4  6E1C               	movwf	?__tdiv_to_l_+3,c
  7328  0016E6  0012               	return	
  7329  0016E8  90D8               	bcf	status,0,c
  7330  0016EA  3622               	rlcf	__tdiv_to_l_@quot,f,c
  7331  0016EC  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  7332  0016EE  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  7333  0016F0  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  7334  0016F2  0627               	decf	__tdiv_to_l_@exp1,f,c
  7335  0016F4                     l795:
  7336  0016F4  5027               	movf	__tdiv_to_l_@exp1,w,c
  7337  0016F6  A4D8               	btfss	status,2,c
  7338  0016F8  D7F7               	goto	l796
  7339  0016FA                     u5270:
  7340  0016FA  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7341  0016FE  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7342  001702  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7343  001706  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7344  00170A  0012               	return		;funcret
  7345  00170C                     __end_of__tdiv_to_l_:
  7346                           	opt stack 0
  7347                           tblptru	equ	0xFF8
  7348                           tblptrh	equ	0xFF7
  7349                           tblptrl	equ	0xFF6
  7350                           tablat	equ	0xFF5
  7351                           prodh	equ	0xFF4
  7352                           prodl	equ	0xFF3
  7353                           intcon	equ	0xFF2
  7354                           postinc0	equ	0xFEE
  7355                           wreg	equ	0xFE8
  7356                           postdec1	equ	0xFE5
  7357                           fsr1l	equ	0xFE1
  7358                           indf2	equ	0xFDF
  7359                           postinc2	equ	0xFDE
  7360                           postdec2	equ	0xFDD
  7361                           fsr2h	equ	0xFDA
  7362                           fsr2l	equ	0xFD9
  7363                           status	equ	0xFD8
  7364                           
  7365 ;; *************** function __div_to_l_ *****************
  7366 ;; Defined at:
  7367 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  7368 ;; Parameters:    Size  Location     Type
  7369 ;;  f1              3   24[COMRAM] unsigned long 
  7370 ;;  f2              3   27[COMRAM] unsigned long 
  7371 ;; Auto vars:     Size  Location     Type
  7372 ;;  quot            4   30[COMRAM] unsigned long 
  7373 ;;  exp1            1   35[COMRAM] unsigned char 
  7374 ;;  cntr            1   34[COMRAM] unsigned char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  4   24[COMRAM] unsigned long 
  7377 ;; Registers used:
  7378 ;;		wreg, status,2, status,0
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7384 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7388 ;;Total ram usage:       12 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; Hardware stack levels required when called:    2
  7391 ;; This function calls:
  7392 ;;		Nothing
  7393 ;; This function is called by:
  7394 ;;		_sprintf
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text28
  7399  00170C                     __ptext28:
  7400                           	opt stack 0
  7401  00170C                     __div_to_l_:
  7402                           	opt stack 26
  7403                           
  7404                           ;incstack = 0
  7405  00170C  341B               	rlcf	__div_to_l_@f1+2,w,c
  7406  00170E  341C               	rlcf	__div_to_l_@f1+3,w,c
  7407  001710  6E24               	movwf	__div_to_l_@exp1,c
  7408  001712  5024               	movf	__div_to_l_@exp1,w,c
  7409  001714  A4D8               	btfss	status,2,c
  7410  001716  D009               	goto	l679
  7411  001718  0E00               	movlw	0
  7412  00171A  6E19               	movwf	?__div_to_l_,c
  7413  00171C  0E00               	movlw	0
  7414  00171E  6E1A               	movwf	?__div_to_l_+1,c
  7415  001720  0E00               	movlw	0
  7416  001722  6E1B               	movwf	?__div_to_l_+2,c
  7417  001724  0E00               	movlw	0
  7418  001726  6E1C               	movwf	?__div_to_l_+3,c
  7419  001728  0012               	return	
  7420  00172A                     l679:
  7421  00172A  341E               	rlcf	__div_to_l_@f2+2,w,c
  7422  00172C  341F               	rlcf	__div_to_l_@f2+3,w,c
  7423  00172E  6E23               	movwf	__div_to_l_@cntr,c
  7424  001730  5023               	movf	__div_to_l_@cntr,w,c
  7425  001732  A4D8               	btfss	status,2,c
  7426  001734  D009               	goto	l681
  7427  001736  0E00               	movlw	0
  7428  001738  6E19               	movwf	?__div_to_l_,c
  7429  00173A  0E00               	movlw	0
  7430  00173C  6E1A               	movwf	?__div_to_l_+1,c
  7431  00173E  0E00               	movlw	0
  7432  001740  6E1B               	movwf	?__div_to_l_+2,c
  7433  001742  0E00               	movlw	0
  7434  001744  6E1C               	movwf	?__div_to_l_+3,c
  7435  001746  0012               	return	
  7436  001748                     l681:
  7437  001748  8E1B               	bsf	__div_to_l_@f1+2,7,c
  7438  00174A  0EFF               	movlw	255
  7439  00174C  1619               	andwf	__div_to_l_@f1,f,c
  7440  00174E  0EFF               	movlw	255
  7441  001750  161A               	andwf	__div_to_l_@f1+1,f,c
  7442  001752  0EFF               	movlw	255
  7443  001754  161B               	andwf	__div_to_l_@f1+2,f,c
  7444  001756  0E00               	movlw	0
  7445  001758  161C               	andwf	__div_to_l_@f1+3,f,c
  7446  00175A  8E1E               	bsf	__div_to_l_@f2+2,7,c
  7447  00175C  0EFF               	movlw	255
  7448  00175E  161C               	andwf	__div_to_l_@f2,f,c
  7449  001760  0EFF               	movlw	255
  7450  001762  161D               	andwf	__div_to_l_@f2+1,f,c
  7451  001764  0EFF               	movlw	255
  7452  001766  161E               	andwf	__div_to_l_@f2+2,f,c
  7453  001768  0E00               	movlw	0
  7454  00176A  161F               	andwf	__div_to_l_@f2+3,f,c
  7455  00176C  0E00               	movlw	0
  7456  00176E  6E1F               	movwf	__div_to_l_@quot,c
  7457  001770  0E00               	movlw	0
  7458  001772  6E20               	movwf	__div_to_l_@quot+1,c
  7459  001774  0E00               	movlw	0
  7460  001776  6E21               	movwf	__div_to_l_@quot+2,c
  7461  001778  0E00               	movlw	0
  7462  00177A  6E22               	movwf	__div_to_l_@quot+3,c
  7463  00177C  0E7F               	movlw	127
  7464  00177E  5E24               	subwf	__div_to_l_@exp1,f,c
  7465  001780  5023               	movf	__div_to_l_@cntr,w,c
  7466  001782  0FA0               	addlw	160
  7467  001784  5E24               	subwf	__div_to_l_@exp1,f,c
  7468  001786  0E20               	movlw	32
  7469  001788  6E23               	movwf	__div_to_l_@cntr,c
  7470  00178A  90D8               	bcf	status,0,c
  7471  00178C  361F               	rlcf	__div_to_l_@quot,f,c
  7472  00178E  3620               	rlcf	__div_to_l_@quot+1,f,c
  7473  001790  3621               	rlcf	__div_to_l_@quot+2,f,c
  7474  001792  3622               	rlcf	__div_to_l_@quot+3,f,c
  7475  001794  501C               	movf	__div_to_l_@f2,w,c
  7476  001796  5C19               	subwf	__div_to_l_@f1,w,c
  7477  001798  501D               	movf	__div_to_l_@f2+1,w,c
  7478  00179A  581A               	subwfb	__div_to_l_@f1+1,w,c
  7479  00179C  501E               	movf	__div_to_l_@f2+2,w,c
  7480  00179E  581B               	subwfb	__div_to_l_@f1+2,w,c
  7481  0017A0  501F               	movf	__div_to_l_@f2+3,w,c
  7482  0017A2  581C               	subwfb	__div_to_l_@f1+3,w,c
  7483  0017A4  A0D8               	btfss	status,0,c
  7484  0017A6  D009               	goto	l683
  7485  0017A8  501C               	movf	__div_to_l_@f2,w,c
  7486  0017AA  5E19               	subwf	__div_to_l_@f1,f,c
  7487  0017AC  501D               	movf	__div_to_l_@f2+1,w,c
  7488  0017AE  5A1A               	subwfb	__div_to_l_@f1+1,f,c
  7489  0017B0  501E               	movf	__div_to_l_@f2+2,w,c
  7490  0017B2  5A1B               	subwfb	__div_to_l_@f1+2,f,c
  7491  0017B4  501F               	movf	__div_to_l_@f2+3,w,c
  7492  0017B6  5A1C               	subwfb	__div_to_l_@f1+3,f,c
  7493  0017B8  801F               	bsf	__div_to_l_@quot,0,c
  7494  0017BA                     l683:
  7495  0017BA  90D8               	bcf	status,0,c
  7496  0017BC  3619               	rlcf	__div_to_l_@f1,f,c
  7497  0017BE  361A               	rlcf	__div_to_l_@f1+1,f,c
  7498  0017C0  361B               	rlcf	__div_to_l_@f1+2,f,c
  7499  0017C2  361C               	rlcf	__div_to_l_@f1+3,f,c
  7500  0017C4  2E23               	decfsz	__div_to_l_@cntr,f,c
  7501  0017C6  D7E1               	goto	l682
  7502  0017C8  AE24               	btfss	__div_to_l_@exp1,7,c
  7503  0017CA  D016               	goto	l685
  7504  0017CC  5024               	movf	__div_to_l_@exp1,w,c
  7505  0017CE  0A80               	xorlw	128
  7506  0017D0  0F9F               	addlw	159
  7507  0017D2  B0D8               	btfsc	status,0,c
  7508  0017D4  D009               	goto	l686
  7509  0017D6  0E00               	movlw	0
  7510  0017D8  6E19               	movwf	?__div_to_l_,c
  7511  0017DA  0E00               	movlw	0
  7512  0017DC  6E1A               	movwf	?__div_to_l_+1,c
  7513  0017DE  0E00               	movlw	0
  7514  0017E0  6E1B               	movwf	?__div_to_l_+2,c
  7515  0017E2  0E00               	movlw	0
  7516  0017E4  6E1C               	movwf	?__div_to_l_+3,c
  7517  0017E6  0012               	return	
  7518  0017E8                     l686:
  7519  0017E8  90D8               	bcf	status,0,c
  7520  0017EA  3222               	rrcf	__div_to_l_@quot+3,f,c
  7521  0017EC  3221               	rrcf	__div_to_l_@quot+2,f,c
  7522  0017EE  3220               	rrcf	__div_to_l_@quot+1,f,c
  7523  0017F0  321F               	rrcf	__div_to_l_@quot,f,c
  7524  0017F2  3E24               	incfsz	__div_to_l_@exp1,f,c
  7525  0017F4  D7F9               	goto	l686
  7526  0017F6  D015               	goto	u5340
  7527  0017F8                     l685:
  7528  0017F8  0E1F               	movlw	31
  7529  0017FA  6424               	cpfsgt	__div_to_l_@exp1,c
  7530  0017FC  D00F               	goto	l691
  7531  0017FE  0E00               	movlw	0
  7532  001800  6E19               	movwf	?__div_to_l_,c
  7533  001802  0E00               	movlw	0
  7534  001804  6E1A               	movwf	?__div_to_l_+1,c
  7535  001806  0E00               	movlw	0
  7536  001808  6E1B               	movwf	?__div_to_l_+2,c
  7537  00180A  0E00               	movlw	0
  7538  00180C  6E1C               	movwf	?__div_to_l_+3,c
  7539  00180E  0012               	return	
  7540  001810  90D8               	bcf	status,0,c
  7541  001812  361F               	rlcf	__div_to_l_@quot,f,c
  7542  001814  3620               	rlcf	__div_to_l_@quot+1,f,c
  7543  001816  3621               	rlcf	__div_to_l_@quot+2,f,c
  7544  001818  3622               	rlcf	__div_to_l_@quot+3,f,c
  7545  00181A  0624               	decf	__div_to_l_@exp1,f,c
  7546  00181C                     l691:
  7547  00181C  5024               	movf	__div_to_l_@exp1,w,c
  7548  00181E  A4D8               	btfss	status,2,c
  7549  001820  D7F7               	goto	l692
  7550  001822                     u5340:
  7551  001822  C01F  F019         	movff	__div_to_l_@quot,?__div_to_l_
  7552  001826  C020  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7553  00182A  C021  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7554  00182E  C022  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7555  001832  0012               	return		;funcret
  7556  001834                     __end_of__div_to_l_:
  7557                           	opt stack 0
  7558                           tblptru	equ	0xFF8
  7559                           tblptrh	equ	0xFF7
  7560                           tblptrl	equ	0xFF6
  7561                           tablat	equ	0xFF5
  7562                           prodh	equ	0xFF4
  7563                           prodl	equ	0xFF3
  7564                           intcon	equ	0xFF2
  7565                           postinc0	equ	0xFEE
  7566                           wreg	equ	0xFE8
  7567                           postdec1	equ	0xFE5
  7568                           fsr1l	equ	0xFE1
  7569                           indf2	equ	0xFDF
  7570                           postinc2	equ	0xFDE
  7571                           postdec2	equ	0xFDD
  7572                           fsr2h	equ	0xFDA
  7573                           fsr2l	equ	0xFD9
  7574                           status	equ	0xFD8
  7575                           
  7576 ;; *************** function ___lltoft *****************
  7577 ;; Defined at:
  7578 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;  c               4   32[COMRAM] unsigned long 
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;  exp             1   40[COMRAM] unsigned char 
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  3   32[COMRAM] float 
  7585 ;; Registers used:
  7586 ;;		wreg, status,2, status,0, cstack
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7594 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7595 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7596 ;;Total ram usage:        9 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; Hardware stack levels required when called:    3
  7599 ;; This function calls:
  7600 ;;		___ftpack
  7601 ;; This function is called by:
  7602 ;;		_sprintf
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text29
  7607  0022A8                     __ptext29:
  7608                           	opt stack 0
  7609  0022A8                     ___lltoft:
  7610                           	opt stack 25
  7611                           
  7612                           ;incstack = 0
  7613  0022A8  0E8E               	movlw	142
  7614  0022AA  6E29               	movwf	___lltoft@exp,c
  7615  0022AC  D006               	goto	l890
  7616  0022AE  90D8               	bcf	status,0,c
  7617  0022B0  3224               	rrcf	___lltoft@c+3,f,c
  7618  0022B2  3223               	rrcf	___lltoft@c+2,f,c
  7619  0022B4  3222               	rrcf	___lltoft@c+1,f,c
  7620  0022B6  3221               	rrcf	___lltoft@c,f,c
  7621  0022B8  2A29               	incf	___lltoft@exp,f,c
  7622  0022BA                     l890:
  7623  0022BA  0E00               	movlw	0
  7624  0022BC  1421               	andwf	___lltoft@c,w,c
  7625  0022BE  6E25               	movwf	??___lltoft& (0+255),c
  7626  0022C0  0E00               	movlw	0
  7627  0022C2  1422               	andwf	___lltoft@c+1,w,c
  7628  0022C4  6E26               	movwf	(??___lltoft+1)& (0+255),c
  7629  0022C6  0E00               	movlw	0
  7630  0022C8  1423               	andwf	___lltoft@c+2,w,c
  7631  0022CA  6E27               	movwf	(??___lltoft+2)& (0+255),c
  7632  0022CC  0EFF               	movlw	255
  7633  0022CE  1424               	andwf	___lltoft@c+3,w,c
  7634  0022D0  6E28               	movwf	(??___lltoft+3)& (0+255),c
  7635  0022D2  5025               	movf	??___lltoft,w,c
  7636  0022D4  1026               	iorwf	??___lltoft+1,w,c
  7637  0022D6  1027               	iorwf	??___lltoft+2,w,c
  7638  0022D8  1028               	iorwf	??___lltoft+3,w,c
  7639  0022DA  A4D8               	btfss	status,2,c
  7640  0022DC  D7E8               	goto	l891
  7641  0022DE  C021  F019         	movff	___lltoft@c,___ftpack@arg
  7642  0022E2  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  7643  0022E6  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  7644  0022EA  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  7645  0022EE  0E00               	movlw	0
  7646  0022F0  6E1D               	movwf	___ftpack@sign,c
  7647  0022F2  EC2B  F00F         	call	___ftpack	;wreg free
  7648  0022F6  C019  F021         	movff	?___ftpack,?___lltoft
  7649  0022FA  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  7650  0022FE  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  7651  002302  0012               	return	
  7652  002304                     __end_of___lltoft:
  7653                           	opt stack 0
  7654                           tblptru	equ	0xFF8
  7655                           tblptrh	equ	0xFF7
  7656                           tblptrl	equ	0xFF6
  7657                           tablat	equ	0xFF5
  7658                           prodh	equ	0xFF4
  7659                           prodl	equ	0xFF3
  7660                           intcon	equ	0xFF2
  7661                           postinc0	equ	0xFEE
  7662                           wreg	equ	0xFE8
  7663                           postdec1	equ	0xFE5
  7664                           fsr1l	equ	0xFE1
  7665                           indf2	equ	0xFDF
  7666                           postinc2	equ	0xFDE
  7667                           postdec2	equ	0xFDD
  7668                           fsr2h	equ	0xFDA
  7669                           fsr2l	equ	0xFD9
  7670                           status	equ	0xFD8
  7671                           
  7672 ;; *************** function ___llmod *****************
  7673 ;; Defined at:
  7674 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;  dividend        4   37[COMRAM] unsigned long 
  7677 ;;  divisor         4   41[COMRAM] unsigned long 
  7678 ;; Auto vars:     Size  Location     Type
  7679 ;;  counter         1   45[COMRAM] unsigned char 
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  4   37[COMRAM] unsigned long 
  7682 ;; Registers used:
  7683 ;;		wreg, status,2, status,0
  7684 ;; Tracked objects:
  7685 ;;		On entry : 0/0
  7686 ;;		On exit  : 0/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7689 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7690 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7692 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;Total ram usage:        9 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    2
  7696 ;; This function calls:
  7697 ;;		Nothing
  7698 ;; This function is called by:
  7699 ;;		_sprintf
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           	psect	text30
  7704  0021E0                     __ptext30:
  7705                           	opt stack 0
  7706  0021E0                     ___llmod:
  7707                           	opt stack 26
  7708                           
  7709                           ;incstack = 0
  7710  0021E0  502A               	movf	___llmod@divisor,w,c
  7711  0021E2  102B               	iorwf	___llmod@divisor+1,w,c
  7712  0021E4  102C               	iorwf	___llmod@divisor+2,w,c
  7713  0021E6  102D               	iorwf	___llmod@divisor+3,w,c
  7714  0021E8  B4D8               	btfsc	status,2,c
  7715  0021EA  D024               	goto	l884
  7716  0021EC  0E01               	movlw	1
  7717  0021EE  6E2E               	movwf	___llmod@counter,c
  7718  0021F0  D006               	goto	l879
  7719  0021F2  90D8               	bcf	status,0,c
  7720  0021F4  362A               	rlcf	___llmod@divisor,f,c
  7721  0021F6  362B               	rlcf	___llmod@divisor+1,f,c
  7722  0021F8  362C               	rlcf	___llmod@divisor+2,f,c
  7723  0021FA  362D               	rlcf	___llmod@divisor+3,f,c
  7724  0021FC  2A2E               	incf	___llmod@counter,f,c
  7725  0021FE                     l879:
  7726  0021FE  AE2D               	btfss	___llmod@divisor+3,7,c
  7727  002200  D7F8               	goto	l880
  7728  002202                     u5520:
  7729  002202  502A               	movf	___llmod@divisor,w,c
  7730  002204  5C26               	subwf	___llmod@dividend,w,c
  7731  002206  502B               	movf	___llmod@divisor+1,w,c
  7732  002208  5827               	subwfb	___llmod@dividend+1,w,c
  7733  00220A  502C               	movf	___llmod@divisor+2,w,c
  7734  00220C  5828               	subwfb	___llmod@dividend+2,w,c
  7735  00220E  502D               	movf	___llmod@divisor+3,w,c
  7736  002210  5829               	subwfb	___llmod@dividend+3,w,c
  7737  002212  A0D8               	btfss	status,0,c
  7738  002214  D008               	goto	l883
  7739  002216  502A               	movf	___llmod@divisor,w,c
  7740  002218  5E26               	subwf	___llmod@dividend,f,c
  7741  00221A  502B               	movf	___llmod@divisor+1,w,c
  7742  00221C  5A27               	subwfb	___llmod@dividend+1,f,c
  7743  00221E  502C               	movf	___llmod@divisor+2,w,c
  7744  002220  5A28               	subwfb	___llmod@dividend+2,f,c
  7745  002222  502D               	movf	___llmod@divisor+3,w,c
  7746  002224  5A29               	subwfb	___llmod@dividend+3,f,c
  7747  002226                     l883:
  7748  002226  90D8               	bcf	status,0,c
  7749  002228  322D               	rrcf	___llmod@divisor+3,f,c
  7750  00222A  322C               	rrcf	___llmod@divisor+2,f,c
  7751  00222C  322B               	rrcf	___llmod@divisor+1,f,c
  7752  00222E  322A               	rrcf	___llmod@divisor,f,c
  7753  002230  2E2E               	decfsz	___llmod@counter,f,c
  7754  002232  D7E7               	goto	u5520
  7755  002234                     l884:
  7756  002234  C026  F026         	movff	___llmod@dividend,?___llmod
  7757  002238  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
  7758  00223C  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
  7759  002240  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
  7760  002244  0012               	return		;funcret
  7761  002246                     __end_of___llmod:
  7762                           	opt stack 0
  7763                           tblptru	equ	0xFF8
  7764                           tblptrh	equ	0xFF7
  7765                           tblptrl	equ	0xFF6
  7766                           tablat	equ	0xFF5
  7767                           prodh	equ	0xFF4
  7768                           prodl	equ	0xFF3
  7769                           intcon	equ	0xFF2
  7770                           postinc0	equ	0xFEE
  7771                           wreg	equ	0xFE8
  7772                           postdec1	equ	0xFE5
  7773                           fsr1l	equ	0xFE1
  7774                           indf2	equ	0xFDF
  7775                           postinc2	equ	0xFDE
  7776                           postdec2	equ	0xFDD
  7777                           fsr2h	equ	0xFDA
  7778                           fsr2l	equ	0xFD9
  7779                           status	equ	0xFD8
  7780                           
  7781 ;; *************** function ___lldiv *****************
  7782 ;; Defined at:
  7783 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  7784 ;; Parameters:    Size  Location     Type
  7785 ;;  dividend        4   24[COMRAM] unsigned long 
  7786 ;;  divisor         4   28[COMRAM] unsigned long 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;  quotient        4   32[COMRAM] unsigned long 
  7789 ;;  counter         1   36[COMRAM] unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  4   24[COMRAM] unsigned long 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7799 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;Total ram usage:       13 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    2
  7806 ;; This function calls:
  7807 ;;		Nothing
  7808 ;; This function is called by:
  7809 ;;		_sprintf
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text31
  7814  002018                     __ptext31:
  7815                           	opt stack 0
  7816  002018                     ___lldiv:
  7817                           	opt stack 26
  7818                           
  7819                           ;incstack = 0
  7820  002018  0E00               	movlw	0
  7821  00201A  6E21               	movwf	___lldiv@quotient,c
  7822  00201C  0E00               	movlw	0
  7823  00201E  6E22               	movwf	___lldiv@quotient+1,c
  7824  002020  0E00               	movlw	0
  7825  002022  6E23               	movwf	___lldiv@quotient+2,c
  7826  002024  0E00               	movlw	0
  7827  002026  6E24               	movwf	___lldiv@quotient+3,c
  7828  002028  501D               	movf	___lldiv@divisor,w,c
  7829  00202A  101E               	iorwf	___lldiv@divisor+1,w,c
  7830  00202C  101F               	iorwf	___lldiv@divisor+2,w,c
  7831  00202E  1020               	iorwf	___lldiv@divisor+3,w,c
  7832  002030  B4D8               	btfsc	status,2,c
  7833  002032  D02A               	goto	l874
  7834  002034  0E01               	movlw	1
  7835  002036  6E25               	movwf	___lldiv@counter,c
  7836  002038  D006               	goto	l869
  7837  00203A  90D8               	bcf	status,0,c
  7838  00203C  361D               	rlcf	___lldiv@divisor,f,c
  7839  00203E  361E               	rlcf	___lldiv@divisor+1,f,c
  7840  002040  361F               	rlcf	___lldiv@divisor+2,f,c
  7841  002042  3620               	rlcf	___lldiv@divisor+3,f,c
  7842  002044  2A25               	incf	___lldiv@counter,f,c
  7843  002046                     l869:
  7844  002046  AE20               	btfss	___lldiv@divisor+3,7,c
  7845  002048  D7F8               	goto	l870
  7846  00204A                     u5490:
  7847  00204A  90D8               	bcf	status,0,c
  7848  00204C  3621               	rlcf	___lldiv@quotient,f,c
  7849  00204E  3622               	rlcf	___lldiv@quotient+1,f,c
  7850  002050  3623               	rlcf	___lldiv@quotient+2,f,c
  7851  002052  3624               	rlcf	___lldiv@quotient+3,f,c
  7852  002054  501D               	movf	___lldiv@divisor,w,c
  7853  002056  5C19               	subwf	___lldiv@dividend,w,c
  7854  002058  501E               	movf	___lldiv@divisor+1,w,c
  7855  00205A  581A               	subwfb	___lldiv@dividend+1,w,c
  7856  00205C  501F               	movf	___lldiv@divisor+2,w,c
  7857  00205E  581B               	subwfb	___lldiv@dividend+2,w,c
  7858  002060  5020               	movf	___lldiv@divisor+3,w,c
  7859  002062  581C               	subwfb	___lldiv@dividend+3,w,c
  7860  002064  A0D8               	btfss	status,0,c
  7861  002066  D009               	goto	l873
  7862  002068  501D               	movf	___lldiv@divisor,w,c
  7863  00206A  5E19               	subwf	___lldiv@dividend,f,c
  7864  00206C  501E               	movf	___lldiv@divisor+1,w,c
  7865  00206E  5A1A               	subwfb	___lldiv@dividend+1,f,c
  7866  002070  501F               	movf	___lldiv@divisor+2,w,c
  7867  002072  5A1B               	subwfb	___lldiv@dividend+2,f,c
  7868  002074  5020               	movf	___lldiv@divisor+3,w,c
  7869  002076  5A1C               	subwfb	___lldiv@dividend+3,f,c
  7870  002078  8021               	bsf	___lldiv@quotient,0,c
  7871  00207A                     l873:
  7872  00207A  90D8               	bcf	status,0,c
  7873  00207C  3220               	rrcf	___lldiv@divisor+3,f,c
  7874  00207E  321F               	rrcf	___lldiv@divisor+2,f,c
  7875  002080  321E               	rrcf	___lldiv@divisor+1,f,c
  7876  002082  321D               	rrcf	___lldiv@divisor,f,c
  7877  002084  2E25               	decfsz	___lldiv@counter,f,c
  7878  002086  D7E1               	goto	u5490
  7879  002088                     l874:
  7880  002088  C021  F019         	movff	___lldiv@quotient,?___lldiv
  7881  00208C  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  7882  002090  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  7883  002094  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  7884  002098  0012               	return		;funcret
  7885  00209A                     __end_of___lldiv:
  7886                           	opt stack 0
  7887                           tblptru	equ	0xFF8
  7888                           tblptrh	equ	0xFF7
  7889                           tblptrl	equ	0xFF6
  7890                           tablat	equ	0xFF5
  7891                           prodh	equ	0xFF4
  7892                           prodl	equ	0xFF3
  7893                           intcon	equ	0xFF2
  7894                           postinc0	equ	0xFEE
  7895                           wreg	equ	0xFE8
  7896                           postdec1	equ	0xFE5
  7897                           fsr1l	equ	0xFE1
  7898                           indf2	equ	0xFDF
  7899                           postinc2	equ	0xFDE
  7900                           postdec2	equ	0xFDD
  7901                           fsr2h	equ	0xFDA
  7902                           fsr2l	equ	0xFD9
  7903                           status	equ	0xFD8
  7904                           
  7905 ;; *************** function ___fttol *****************
  7906 ;; Defined at:
  7907 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  7908 ;; Parameters:    Size  Location     Type
  7909 ;;  f1              3    4[BANK0 ] float 
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;  lval            4   14[BANK0 ] unsigned long 
  7912 ;;  exp1            1   18[BANK0 ] unsigned char 
  7913 ;;  sign1           1   13[BANK0 ] unsigned char 
  7914 ;; Return value:  Size  Location     Type
  7915 ;;                  4    4[BANK0 ] long 
  7916 ;; Registers used:
  7917 ;;		wreg, status,2, status,0
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7923 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;Total ram usage:       15 bytes
  7928 ;; Hardware stack levels used:    1
  7929 ;; Hardware stack levels required when called:    2
  7930 ;; This function calls:
  7931 ;;		Nothing
  7932 ;; This function is called by:
  7933 ;;		_sprintf
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           	psect	text32
  7938  001B84                     __ptext32:
  7939                           	opt stack 0
  7940  001B84                     ___fttol:
  7941                           	opt stack 26
  7942                           
  7943                           ;incstack = 0
  7944  001B84  C086  F088         	movff	___fttol@f1+2,??___fttol
  7945  001B88  0100               	movlb	0	; () banked
  7946  001B8A  6B89               	clrf	(??___fttol+1)& (0+255),b
  7947  001B8C  6B8A               	clrf	(??___fttol+2)& (0+255),b
  7948  001B8E  3585               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7949  001B90  3788               	rlcf	??___fttol& (0+255),f,b
  7950  001B92  E301               	bnc	u5401
  7951  001B94  8189               	bsf	(??___fttol+1)& (0+255),0,b
  7952  001B96                     u5401:
  7953  001B96  5188               	movf	??___fttol& (0+255),w,b
  7954  001B98  6F92               	movwf	___fttol@exp1& (0+255),b
  7955  001B9A  5192               	movf	___fttol@exp1& (0+255),w,b
  7956  001B9C  A4D8               	btfss	status,2,c
  7957  001B9E  D009               	goto	l828
  7958                           
  7959                           ; BSR set to: 0
  7960  001BA0  0E00               	movlw	0
  7961  001BA2  6F84               	movwf	?___fttol& (0+255),b
  7962  001BA4  0E00               	movlw	0
  7963  001BA6  6F85               	movwf	(?___fttol+1)& (0+255),b
  7964  001BA8  0E00               	movlw	0
  7965  001BAA  6F86               	movwf	(?___fttol+2)& (0+255),b
  7966  001BAC  0E00               	movlw	0
  7967  001BAE  6F87               	movwf	(?___fttol+3)& (0+255),b
  7968                           
  7969                           ; BSR set to: 0
  7970  001BB0  0012               	return	
  7971  001BB2                     l828:
  7972                           
  7973                           ; BSR set to: 0
  7974                           
  7975                           ; BSR set to: 0
  7976  001BB2  0E17               	movlw	23
  7977  001BB4  6F88               	movwf	??___fttol& (0+255),b
  7978  001BB6  C084  F089         	movff	___fttol@f1,??___fttol+1
  7979  001BBA  C085  F08A         	movff	___fttol@f1+1,??___fttol+2
  7980  001BBE  C086  F08B         	movff	___fttol@f1+2,??___fttol+3
  7981  001BC2  2988               	incf	??___fttol& (0+255),w,b
  7982  001BC4  6F8C               	movwf	(??___fttol+4)& (0+255),b
  7983  001BC6  D004               	goto	u5420
  7984  001BC8                     u5425:
  7985  001BC8  90D8               	bcf	status,0,c
  7986  001BCA  338B               	rrcf	(??___fttol+3)& (0+255),f,b
  7987  001BCC  338A               	rrcf	(??___fttol+2)& (0+255),f,b
  7988  001BCE  3389               	rrcf	(??___fttol+1)& (0+255),f,b
  7989  001BD0                     u5420:
  7990  001BD0  2F8C               	decfsz	(??___fttol+4)& (0+255),f,b
  7991  001BD2  D7FA               	goto	u5425
  7992  001BD4  0100               	movlb	0	; () banked
  7993  001BD6  5189               	movf	(??___fttol+1)& (0+255),w,b
  7994  001BD8  6F8D               	movwf	___fttol@sign1& (0+255),b
  7995                           
  7996                           ; BSR set to: 0
  7997  001BDA  8F85               	bsf	(___fttol@f1+1)& (0+255),7,b
  7998                           
  7999                           ; BSR set to: 0
  8000  001BDC  0EFF               	movlw	255
  8001  001BDE  1784               	andwf	___fttol@f1& (0+255),f,b
  8002  001BE0  0EFF               	movlw	255
  8003  001BE2  1785               	andwf	(___fttol@f1+1)& (0+255),f,b
  8004  001BE4  0E00               	movlw	0
  8005  001BE6  1786               	andwf	(___fttol@f1+2)& (0+255),f,b
  8006                           
  8007                           ; BSR set to: 0
  8008  001BE8  5184               	movf	___fttol@f1& (0+255),w,b
  8009  001BEA  6F8E               	movwf	___fttol@lval& (0+255),b
  8010  001BEC  5185               	movf	(___fttol@f1+1)& (0+255),w,b
  8011  001BEE  6F8F               	movwf	(___fttol@lval+1)& (0+255),b
  8012  001BF0  5186               	movf	(___fttol@f1+2)& (0+255),w,b
  8013  001BF2  6F90               	movwf	(___fttol@lval+2)& (0+255),b
  8014  001BF4  6B91               	clrf	(___fttol@lval+3)& (0+255),b
  8015                           
  8016                           ; BSR set to: 0
  8017  001BF6  0E8E               	movlw	142
  8018  001BF8  5F92               	subwf	___fttol@exp1& (0+255),f,b
  8019                           
  8020                           ; BSR set to: 0
  8021  001BFA  AF92               	btfss	___fttol@exp1& (0+255),7,b
  8022  001BFC  D016               	goto	l830
  8023                           
  8024                           ; BSR set to: 0
  8025  001BFE  5192               	movf	___fttol@exp1& (0+255),w,b
  8026  001C00  0A80               	xorlw	128
  8027  001C02  0F8F               	addlw	143
  8028  001C04  B0D8               	btfsc	status,0,c
  8029  001C06  D009               	goto	l831
  8030                           
  8031                           ; BSR set to: 0
  8032  001C08  0E00               	movlw	0
  8033  001C0A  6F84               	movwf	?___fttol& (0+255),b
  8034  001C0C  0E00               	movlw	0
  8035  001C0E  6F85               	movwf	(?___fttol+1)& (0+255),b
  8036  001C10  0E00               	movlw	0
  8037  001C12  6F86               	movwf	(?___fttol+2)& (0+255),b
  8038  001C14  0E00               	movlw	0
  8039  001C16  6F87               	movwf	(?___fttol+3)& (0+255),b
  8040                           
  8041                           ; BSR set to: 0
  8042  001C18  0012               	return	
  8043  001C1A                     l831:
  8044                           
  8045                           ; BSR set to: 0
  8046                           
  8047                           ; BSR set to: 0
  8048                           
  8049                           ; BSR set to: 0
  8050  001C1A  90D8               	bcf	status,0,c
  8051  001C1C  3391               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8052  001C1E  3390               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8053  001C20  338F               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8054  001C22  338E               	rrcf	___fttol@lval& (0+255),f,b
  8055                           
  8056                           ; BSR set to: 0
  8057  001C24  3F92               	incfsz	___fttol@exp1& (0+255),f,b
  8058  001C26  D7F9               	goto	l831
  8059                           
  8060                           ; BSR set to: 0
  8061  001C28  D015               	goto	u5460
  8062  001C2A                     l830:
  8063                           
  8064                           ; BSR set to: 0
  8065                           
  8066                           ; BSR set to: 0
  8067  001C2A  0E17               	movlw	23
  8068  001C2C  6592               	cpfsgt	___fttol@exp1& (0+255),b
  8069  001C2E  D00F               	goto	l836
  8070                           
  8071                           ; BSR set to: 0
  8072  001C30  0E00               	movlw	0
  8073  001C32  6F84               	movwf	?___fttol& (0+255),b
  8074  001C34  0E00               	movlw	0
  8075  001C36  6F85               	movwf	(?___fttol+1)& (0+255),b
  8076  001C38  0E00               	movlw	0
  8077  001C3A  6F86               	movwf	(?___fttol+2)& (0+255),b
  8078  001C3C  0E00               	movlw	0
  8079  001C3E  6F87               	movwf	(?___fttol+3)& (0+255),b
  8080                           
  8081                           ; BSR set to: 0
  8082  001C40  0012               	return	
  8083  001C42                     
  8084                           ; BSR set to: 0
  8085                           
  8086                           ; BSR set to: 0
  8087  001C42  90D8               	bcf	status,0,c
  8088  001C44  378E               	rlcf	___fttol@lval& (0+255),f,b
  8089  001C46  378F               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8090  001C48  3790               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8091  001C4A  3791               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8092  001C4C  0792               	decf	___fttol@exp1& (0+255),f,b
  8093  001C4E                     l836:
  8094                           
  8095                           ; BSR set to: 0
  8096                           
  8097                           ; BSR set to: 0
  8098  001C4E  5192               	movf	___fttol@exp1& (0+255),w,b
  8099  001C50  A4D8               	btfss	status,2,c
  8100  001C52  D7F7               	goto	l837
  8101  001C54                     u5460:
  8102                           
  8103                           ; BSR set to: 0
  8104                           
  8105                           ; BSR set to: 0
  8106                           
  8107                           ; BSR set to: 0
  8108  001C54  518D               	movf	___fttol@sign1& (0+255),w,b
  8109  001C56  B4D8               	btfsc	status,2,c
  8110  001C58  D008               	goto	l839
  8111                           
  8112                           ; BSR set to: 0
  8113  001C5A  1F91               	comf	(___fttol@lval+3)& (0+255),f,b
  8114  001C5C  1F90               	comf	(___fttol@lval+2)& (0+255),f,b
  8115  001C5E  1F8F               	comf	(___fttol@lval+1)& (0+255),f,b
  8116  001C60  6D8E               	negf	___fttol@lval& (0+255),b
  8117  001C62  0E00               	movlw	0
  8118  001C64  238F               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8119  001C66  2390               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8120  001C68  2391               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8121  001C6A                     l839:
  8122                           
  8123                           ; BSR set to: 0
  8124                           
  8125                           ; BSR set to: 0
  8126  001C6A  C08E  F084         	movff	___fttol@lval,?___fttol
  8127  001C6E  C08F  F085         	movff	___fttol@lval+1,?___fttol+1
  8128  001C72  C090  F086         	movff	___fttol@lval+2,?___fttol+2
  8129  001C76  C091  F087         	movff	___fttol@lval+3,?___fttol+3
  8130  001C7A  0012               	return	
  8131  001C7C                     __end_of___fttol:
  8132                           	opt stack 0
  8133                           tblptru	equ	0xFF8
  8134                           tblptrh	equ	0xFF7
  8135                           tblptrl	equ	0xFF6
  8136                           tablat	equ	0xFF5
  8137                           prodh	equ	0xFF4
  8138                           prodl	equ	0xFF3
  8139                           intcon	equ	0xFF2
  8140                           postinc0	equ	0xFEE
  8141                           wreg	equ	0xFE8
  8142                           postdec1	equ	0xFE5
  8143                           fsr1l	equ	0xFE1
  8144                           indf2	equ	0xFDF
  8145                           postinc2	equ	0xFDE
  8146                           postdec2	equ	0xFDD
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function ___ftsub *****************
  8152 ;; Defined at:
  8153 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  f1              3   16[BANK0 ] float 
  8156 ;;  f2              3   19[BANK0 ] float 
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;		None
  8159 ;; Return value:  Size  Location     Type
  8160 ;;                  3   16[BANK0 ] float 
  8161 ;; Registers used:
  8162 ;;		wreg, status,2, status,0, cstack
  8163 ;; Tracked objects:
  8164 ;;		On entry : 0/0
  8165 ;;		On exit  : 0/0
  8166 ;;		Unchanged: 0/0
  8167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8168 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8172 ;;Total ram usage:        6 bytes
  8173 ;; Hardware stack levels used:    1
  8174 ;; Hardware stack levels required when called:    4
  8175 ;; This function calls:
  8176 ;;		___ftadd
  8177 ;; This function is called by:
  8178 ;;		_sprintf
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           	psect	text33
  8183  0024A2                     __ptext33:
  8184                           	opt stack 0
  8185  0024A2                     ___ftsub:
  8186                           	opt stack 24
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;incstack = 0
  8190  0024A2  0100               	movlb	0	; () banked
  8191  0024A4  5193               	movf	___ftsub@f2& (0+255),w,b
  8192  0024A6  1194               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8193  0024A8  1195               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8194  0024AA  B4D8               	btfsc	status,2,c
  8195  0024AC  D006               	goto	l824
  8196                           
  8197                           ; BSR set to: 0
  8198  0024AE  0E00               	movlw	0
  8199  0024B0  1B93               	xorwf	___ftsub@f2& (0+255),f,b
  8200  0024B2  0E00               	movlw	0
  8201  0024B4  1B94               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8202  0024B6  0E80               	movlw	128
  8203  0024B8  1B95               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8204  0024BA                     l824:
  8205                           
  8206                           ; BSR set to: 0
  8207                           
  8208                           ; BSR set to: 0
  8209  0024BA  C090  F087         	movff	___ftsub@f1,___ftadd@f1
  8210  0024BE  C091  F088         	movff	___ftsub@f1+1,___ftadd@f1+1
  8211  0024C2  C092  F089         	movff	___ftsub@f1+2,___ftadd@f1+2
  8212  0024C6  C093  F08A         	movff	___ftsub@f2,___ftadd@f2
  8213  0024CA  C094  F08B         	movff	___ftsub@f2+1,___ftadd@f2+1
  8214  0024CE  C095  F08C         	movff	___ftsub@f2+2,___ftadd@f2+2
  8215  0024D2  EC16  F00A         	call	___ftadd	;wreg free
  8216  0024D6  C087  F090         	movff	?___ftadd,?___ftsub
  8217  0024DA  C088  F091         	movff	?___ftadd+1,?___ftsub+1
  8218  0024DE  C089  F092         	movff	?___ftadd+2,?___ftsub+2
  8219  0024E2  0012               	return	
  8220  0024E4                     __end_of___ftsub:
  8221                           	opt stack 0
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           postinc0	equ	0xFEE
  8230                           wreg	equ	0xFE8
  8231                           postdec1	equ	0xFE5
  8232                           fsr1l	equ	0xFE1
  8233                           indf2	equ	0xFDF
  8234                           postinc2	equ	0xFDE
  8235                           postdec2	equ	0xFDD
  8236                           fsr2h	equ	0xFDA
  8237                           fsr2l	equ	0xFD9
  8238                           status	equ	0xFD8
  8239                           
  8240 ;; *************** function ___ftadd *****************
  8241 ;; Defined at:
  8242 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;  f1              3    7[BANK0 ] float 
  8245 ;;  f2              3   10[BANK0 ] float 
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  exp1            1   15[BANK0 ] unsigned char 
  8248 ;;  exp2            1   14[BANK0 ] unsigned char 
  8249 ;;  sign            1   13[BANK0 ] unsigned char 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  3    7[BANK0 ] float 
  8252 ;; Registers used:
  8253 ;;		wreg, status,2, status,0, cstack
  8254 ;; Tracked objects:
  8255 ;;		On entry : 0/0
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8259 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Totals:         3       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;Total ram usage:       12 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    3
  8266 ;; This function calls:
  8267 ;;		___ftpack
  8268 ;; This function is called by:
  8269 ;;		_sprintf
  8270 ;;		___ftsub
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text34
  8275  00142C                     __ptext34:
  8276                           	opt stack 0
  8277  00142C                     ___ftadd:
  8278                           	opt stack 24
  8279                           
  8280                           ;incstack = 0
  8281  00142C  C089  F05B         	movff	___ftadd@f1+2,??___ftadd
  8282  001430  6A5C               	clrf	(??___ftadd+1)& (0+255),c
  8283  001432  6A5D               	clrf	(??___ftadd+2)& (0+255),c
  8284  001434  0100               	movlb	0	; () banked
  8285  001436  3588               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8286  001438  365B               	rlcf	??___ftadd& (0+255),f,c
  8287  00143A  E301               	bnc	u4671
  8288  00143C  805C               	bsf	(??___ftadd+1)& (0+255),0,c
  8289  00143E                     u4671:
  8290  00143E  505B               	movf	??___ftadd,w,c
  8291  001440  6F8F               	movwf	___ftadd@exp1& (0+255),b
  8292  001442  C08C  F05B         	movff	___ftadd@f2+2,??___ftadd
  8293  001446  6A5C               	clrf	(??___ftadd+1)& (0+255),c
  8294  001448  6A5D               	clrf	(??___ftadd+2)& (0+255),c
  8295  00144A  358B               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8296  00144C  365B               	rlcf	??___ftadd& (0+255),f,c
  8297  00144E  E301               	bnc	u4681
  8298  001450  805C               	bsf	(??___ftadd+1)& (0+255),0,c
  8299  001452                     u4681:
  8300  001452  505B               	movf	??___ftadd,w,c
  8301  001454  6F8E               	movwf	___ftadd@exp2& (0+255),b
  8302                           
  8303                           ; BSR set to: 0
  8304  001456  518F               	movf	___ftadd@exp1& (0+255),w,b
  8305  001458  B4D8               	btfsc	status,2,c
  8306  00145A  D00B               	goto	u4710
  8307                           
  8308                           ; BSR set to: 0
  8309  00145C  518E               	movf	___ftadd@exp2& (0+255),w,b
  8310  00145E  5D8F               	subwf	___ftadd@exp1& (0+255),w,b
  8311  001460  B0D8               	btfsc	status,0,c
  8312  001462  D00E               	goto	l742
  8313                           
  8314                           ; BSR set to: 0
  8315  001464  518F               	movf	___ftadd@exp1& (0+255),w,b
  8316  001466  0800               	sublw	0
  8317  001468  258E               	addwf	___ftadd@exp2& (0+255),w,b
  8318  00146A  6E5B               	movwf	??___ftadd& (0+255),c
  8319  00146C  0E18               	movlw	24
  8320  00146E  645B               	cpfsgt	??___ftadd,c
  8321  001470  D007               	goto	l742
  8322  001472                     u4710:
  8323                           
  8324                           ; BSR set to: 0
  8325  001472  C08A  F087         	movff	___ftadd@f2,?___ftadd
  8326  001476  C08B  F088         	movff	___ftadd@f2+1,?___ftadd+1
  8327  00147A  C08C  F089         	movff	___ftadd@f2+2,?___ftadd+2
  8328  00147E  0012               	return	
  8329  001480                     l742:
  8330                           
  8331                           ; BSR set to: 0
  8332                           
  8333                           ; BSR set to: 0
  8334  001480  518E               	movf	___ftadd@exp2& (0+255),w,b
  8335  001482  B4D8               	btfsc	status,2,c
  8336  001484  D00B               	goto	u4740
  8337                           
  8338                           ; BSR set to: 0
  8339  001486  518F               	movf	___ftadd@exp1& (0+255),w,b
  8340  001488  5D8E               	subwf	___ftadd@exp2& (0+255),w,b
  8341  00148A  B0D8               	btfsc	status,0,c
  8342  00148C  D00E               	goto	l746
  8343                           
  8344                           ; BSR set to: 0
  8345  00148E  518E               	movf	___ftadd@exp2& (0+255),w,b
  8346  001490  0800               	sublw	0
  8347  001492  258F               	addwf	___ftadd@exp1& (0+255),w,b
  8348  001494  6E5B               	movwf	??___ftadd& (0+255),c
  8349  001496  0E18               	movlw	24
  8350  001498  645B               	cpfsgt	??___ftadd,c
  8351  00149A  D007               	goto	l746
  8352  00149C                     u4740:
  8353                           
  8354                           ; BSR set to: 0
  8355  00149C  C087  F087         	movff	___ftadd@f1,?___ftadd
  8356  0014A0  C088  F088         	movff	___ftadd@f1+1,?___ftadd+1
  8357  0014A4  C089  F089         	movff	___ftadd@f1+2,?___ftadd+2
  8358  0014A8  0012               	return	
  8359  0014AA                     l746:
  8360                           
  8361                           ; BSR set to: 0
  8362                           
  8363                           ; BSR set to: 0
  8364  0014AA  0E06               	movlw	6
  8365  0014AC  6F8D               	movwf	___ftadd@sign& (0+255),b
  8366                           
  8367                           ; BSR set to: 0
  8368  0014AE  BF89               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  8369                           
  8370                           ; BSR set to: 0
  8371  0014B0  8F8D               	bsf	___ftadd@sign& (0+255),7,b
  8372                           
  8373                           ; BSR set to: 0
  8374                           
  8375                           ; BSR set to: 0
  8376  0014B2  BF8C               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  8377                           
  8378                           ; BSR set to: 0
  8379  0014B4  8D8D               	bsf	___ftadd@sign& (0+255),6,b
  8380                           
  8381                           ; BSR set to: 0
  8382  0014B6  8F88               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8383                           
  8384                           ; BSR set to: 0
  8385  0014B8  0EFF               	movlw	255
  8386  0014BA  1787               	andwf	___ftadd@f1& (0+255),f,b
  8387  0014BC  0EFF               	movlw	255
  8388  0014BE  1788               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8389  0014C0  0E00               	movlw	0
  8390  0014C2  1789               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8391  0014C4  8F8B               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8392                           
  8393                           ; BSR set to: 0
  8394  0014C6  0EFF               	movlw	255
  8395  0014C8  178A               	andwf	___ftadd@f2& (0+255),f,b
  8396  0014CA  0EFF               	movlw	255
  8397  0014CC  178B               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8398  0014CE  0E00               	movlw	0
  8399  0014D0  178C               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8400                           
  8401                           ; BSR set to: 0
  8402  0014D2  518E               	movf	___ftadd@exp2& (0+255),w,b
  8403  0014D4  5D8F               	subwf	___ftadd@exp1& (0+255),w,b
  8404  0014D6  B0D8               	btfsc	status,0,c
  8405  0014D8  D01B               	goto	l751
  8406  0014DA                     u4770:
  8407                           
  8408                           ; BSR set to: 0
  8409                           
  8410                           ; BSR set to: 0
  8411  0014DA  90D8               	bcf	status,0,c
  8412  0014DC  378A               	rlcf	___ftadd@f2& (0+255),f,b
  8413  0014DE  378B               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8414  0014E0  378C               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8415  0014E2  078E               	decf	___ftadd@exp2& (0+255),f,b
  8416                           
  8417                           ; BSR set to: 0
  8418  0014E4  518F               	movf	___ftadd@exp1& (0+255),w,b
  8419  0014E6  198E               	xorwf	___ftadd@exp2& (0+255),w,b
  8420  0014E8  B4D8               	btfsc	status,2,c
  8421  0014EA  D00D               	goto	l756
  8422                           
  8423                           ; BSR set to: 0
  8424  0014EC  078D               	decf	___ftadd@sign& (0+255),f,b
  8425  0014EE  C08D  F05B         	movff	___ftadd@sign,??___ftadd
  8426  0014F2  0E07               	movlw	7
  8427  0014F4  165B               	andwf	??___ftadd,f,c
  8428  0014F6  B4D8               	btfsc	status,2,c
  8429  0014F8  D006               	goto	l756
  8430  0014FA  D7EF               	goto	u4770
  8431  0014FC                     
  8432                           ; BSR set to: 0
  8433                           
  8434                           ; BSR set to: 0
  8435  0014FC  90D8               	bcf	status,0,c
  8436  0014FE  3389               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8437  001500  3388               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8438  001502  3387               	rrcf	___ftadd@f1& (0+255),f,b
  8439  001504  2B8F               	incf	___ftadd@exp1& (0+255),f,b
  8440  001506                     l756:
  8441                           
  8442                           ; BSR set to: 0
  8443                           
  8444                           ; BSR set to: 0
  8445  001506  518E               	movf	___ftadd@exp2& (0+255),w,b
  8446  001508  198F               	xorwf	___ftadd@exp1& (0+255),w,b
  8447  00150A  B4D8               	btfsc	status,2,c
  8448  00150C  D01F               	goto	u4840
  8449  00150E  D7F6               	goto	l757
  8450  001510                     l751:
  8451                           
  8452                           ; BSR set to: 0
  8453                           
  8454                           ; BSR set to: 0
  8455  001510  518F               	movf	___ftadd@exp1& (0+255),w,b
  8456  001512  5D8E               	subwf	___ftadd@exp2& (0+255),w,b
  8457  001514  B0D8               	btfsc	status,0,c
  8458  001516  D01A               	goto	u4840
  8459  001518                     u4810:
  8460                           
  8461                           ; BSR set to: 0
  8462                           
  8463                           ; BSR set to: 0
  8464  001518  90D8               	bcf	status,0,c
  8465  00151A  3787               	rlcf	___ftadd@f1& (0+255),f,b
  8466  00151C  3788               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8467  00151E  3789               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8468  001520  078F               	decf	___ftadd@exp1& (0+255),f,b
  8469                           
  8470                           ; BSR set to: 0
  8471  001522  518F               	movf	___ftadd@exp1& (0+255),w,b
  8472  001524  198E               	xorwf	___ftadd@exp2& (0+255),w,b
  8473  001526  B4D8               	btfsc	status,2,c
  8474  001528  D00D               	goto	l765
  8475                           
  8476                           ; BSR set to: 0
  8477  00152A  078D               	decf	___ftadd@sign& (0+255),f,b
  8478  00152C  C08D  F05B         	movff	___ftadd@sign,??___ftadd
  8479  001530  0E07               	movlw	7
  8480  001532  165B               	andwf	??___ftadd,f,c
  8481  001534  B4D8               	btfsc	status,2,c
  8482  001536  D006               	goto	l765
  8483  001538  D7EF               	goto	u4810
  8484  00153A                     
  8485                           ; BSR set to: 0
  8486                           
  8487                           ; BSR set to: 0
  8488  00153A  90D8               	bcf	status,0,c
  8489  00153C  338C               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8490  00153E  338B               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8491  001540  338A               	rrcf	___ftadd@f2& (0+255),f,b
  8492  001542  2B8E               	incf	___ftadd@exp2& (0+255),f,b
  8493  001544                     l765:
  8494                           
  8495                           ; BSR set to: 0
  8496                           
  8497                           ; BSR set to: 0
  8498  001544  518E               	movf	___ftadd@exp2& (0+255),w,b
  8499  001546  198F               	xorwf	___ftadd@exp1& (0+255),w,b
  8500  001548  A4D8               	btfss	status,2,c
  8501  00154A  D7F7               	goto	l766
  8502  00154C                     u4840:
  8503                           
  8504                           ; BSR set to: 0
  8505                           
  8506                           ; BSR set to: 0
  8507                           
  8508                           ; BSR set to: 0
  8509  00154C  AF8D               	btfss	___ftadd@sign& (0+255),7,b
  8510  00154E  D00C               	goto	l768
  8511                           
  8512                           ; BSR set to: 0
  8513  001550  0EFF               	movlw	255
  8514  001552  1B87               	xorwf	___ftadd@f1& (0+255),f,b
  8515  001554  0EFF               	movlw	255
  8516  001556  1B88               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8517  001558  0EFF               	movlw	255
  8518  00155A  1B89               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8519  00155C  0E01               	movlw	1
  8520  00155E  2787               	addwf	___ftadd@f1& (0+255),f,b
  8521  001560  0E00               	movlw	0
  8522  001562  2388               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8523  001564  0E00               	movlw	0
  8524  001566  2389               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8525  001568                     l768:
  8526                           
  8527                           ; BSR set to: 0
  8528  001568  AD8D               	btfss	___ftadd@sign& (0+255),6,b
  8529  00156A  D00C               	goto	l769
  8530                           
  8531                           ; BSR set to: 0
  8532  00156C  0EFF               	movlw	255
  8533  00156E  1B8A               	xorwf	___ftadd@f2& (0+255),f,b
  8534  001570  0EFF               	movlw	255
  8535  001572  1B8B               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8536  001574  0EFF               	movlw	255
  8537  001576  1B8C               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8538  001578  0E01               	movlw	1
  8539  00157A  278A               	addwf	___ftadd@f2& (0+255),f,b
  8540  00157C  0E00               	movlw	0
  8541  00157E  238B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8542  001580  0E00               	movlw	0
  8543  001582  238C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8544  001584                     l769:
  8545                           
  8546                           ; BSR set to: 0
  8547                           
  8548                           ; BSR set to: 0
  8549  001584  0E00               	movlw	0
  8550  001586  6F8D               	movwf	___ftadd@sign& (0+255),b
  8551                           
  8552                           ; BSR set to: 0
  8553  001588  5187               	movf	___ftadd@f1& (0+255),w,b
  8554  00158A  278A               	addwf	___ftadd@f2& (0+255),f,b
  8555  00158C  5188               	movf	(___ftadd@f1+1)& (0+255),w,b
  8556  00158E  238B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8557  001590  5189               	movf	(___ftadd@f1+2)& (0+255),w,b
  8558  001592  238C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8559                           
  8560                           ; BSR set to: 0
  8561  001594  AF8C               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8562  001596  D00E               	goto	l770
  8563                           
  8564                           ; BSR set to: 0
  8565  001598  0EFF               	movlw	255
  8566  00159A  1B8A               	xorwf	___ftadd@f2& (0+255),f,b
  8567  00159C  0EFF               	movlw	255
  8568  00159E  1B8B               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8569  0015A0  0EFF               	movlw	255
  8570  0015A2  1B8C               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8571  0015A4  0E01               	movlw	1
  8572  0015A6  278A               	addwf	___ftadd@f2& (0+255),f,b
  8573  0015A8  0E00               	movlw	0
  8574  0015AA  238B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8575  0015AC  0E00               	movlw	0
  8576  0015AE  238C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8577                           
  8578                           ; BSR set to: 0
  8579  0015B0  0E01               	movlw	1
  8580  0015B2  6F8D               	movwf	___ftadd@sign& (0+255),b
  8581  0015B4                     l770:
  8582                           
  8583                           ; BSR set to: 0
  8584                           
  8585                           ; BSR set to: 0
  8586  0015B4  C08A  F019         	movff	___ftadd@f2,___ftpack@arg
  8587  0015B8  C08B  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  8588  0015BC  C08C  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  8589  0015C0  C08F  F01C         	movff	___ftadd@exp1,___ftpack@exp
  8590  0015C4  C08D  F01D         	movff	___ftadd@sign,___ftpack@sign
  8591  0015C8  EC2B  F00F         	call	___ftpack	;wreg free
  8592  0015CC  C019  F087         	movff	?___ftpack,?___ftadd
  8593  0015D0  C01A  F088         	movff	?___ftpack+1,?___ftadd+1
  8594  0015D4  C01B  F089         	movff	?___ftpack+2,?___ftadd+2
  8595  0015D8  0012               	return	
  8596  0015DA                     __end_of___ftadd:
  8597                           	opt stack 0
  8598                           tblptru	equ	0xFF8
  8599                           tblptrh	equ	0xFF7
  8600                           tblptrl	equ	0xFF6
  8601                           tablat	equ	0xFF5
  8602                           prodh	equ	0xFF4
  8603                           prodl	equ	0xFF3
  8604                           intcon	equ	0xFF2
  8605                           postinc0	equ	0xFEE
  8606                           wreg	equ	0xFE8
  8607                           postdec1	equ	0xFE5
  8608                           fsr1l	equ	0xFE1
  8609                           indf2	equ	0xFDF
  8610                           postinc2	equ	0xFDE
  8611                           postdec2	equ	0xFDD
  8612                           fsr2h	equ	0xFDA
  8613                           fsr2l	equ	0xFD9
  8614                           status	equ	0xFD8
  8615                           
  8616 ;; *************** function ___ftpack *****************
  8617 ;; Defined at:
  8618 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;  arg             3   24[COMRAM] unsigned um
  8621 ;;  exp             1   27[COMRAM] unsigned char 
  8622 ;;  sign            1   28[COMRAM] unsigned char 
  8623 ;; Auto vars:     Size  Location     Type
  8624 ;;		None
  8625 ;; Return value:  Size  Location     Type
  8626 ;;                  3   24[COMRAM] float 
  8627 ;; Registers used:
  8628 ;;		wreg, status,2, status,0
  8629 ;; Tracked objects:
  8630 ;;		On entry : 0/0
  8631 ;;		On exit  : 0/0
  8632 ;;		Unchanged: 0/0
  8633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8634 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8636 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8637 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8638 ;;Total ram usage:        8 bytes
  8639 ;; Hardware stack levels used:    1
  8640 ;; Hardware stack levels required when called:    2
  8641 ;; This function calls:
  8642 ;;		Nothing
  8643 ;; This function is called by:
  8644 ;;		___awtoft
  8645 ;;		___ftadd
  8646 ;;		___ftdiv
  8647 ;;		___ftmul
  8648 ;;		___lltoft
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           	psect	text35
  8653  001E56                     __ptext35:
  8654                           	opt stack 0
  8655  001E56                     ___ftpack:
  8656                           	opt stack 26
  8657                           
  8658                           ;incstack = 0
  8659  001E56  501C               	movf	___ftpack@exp,w,c
  8660  001E58  B4D8               	btfsc	status,2,c
  8661  001E5A  D005               	goto	u4600
  8662  001E5C  5019               	movf	___ftpack@arg,w,c
  8663  001E5E  101A               	iorwf	___ftpack@arg+1,w,c
  8664  001E60  101B               	iorwf	___ftpack@arg+2,w,c
  8665  001E62  A4D8               	btfss	status,2,c
  8666  001E64  D00C               	goto	l711
  8667  001E66                     u4600:
  8668  001E66  0E00               	movlw	0
  8669  001E68  6E19               	movwf	?___ftpack,c
  8670  001E6A  0E00               	movlw	0
  8671  001E6C  6E1A               	movwf	?___ftpack+1,c
  8672  001E6E  0E00               	movlw	0
  8673  001E70  6E1B               	movwf	?___ftpack+2,c
  8674  001E72  0012               	return	
  8675  001E74  2A1C               	incf	___ftpack@exp,f,c
  8676  001E76  90D8               	bcf	status,0,c
  8677  001E78  321B               	rrcf	___ftpack@arg+2,f,c
  8678  001E7A  321A               	rrcf	___ftpack@arg+1,f,c
  8679  001E7C  3219               	rrcf	___ftpack@arg,f,c
  8680  001E7E                     l711:
  8681  001E7E  0E00               	movlw	0
  8682  001E80  1419               	andwf	___ftpack@arg,w,c
  8683  001E82  6E1E               	movwf	??___ftpack& (0+255),c
  8684  001E84  0E00               	movlw	0
  8685  001E86  141A               	andwf	___ftpack@arg+1,w,c
  8686  001E88  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8687  001E8A  0EFE               	movlw	254
  8688  001E8C  141B               	andwf	___ftpack@arg+2,w,c
  8689  001E8E  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8690  001E90  501E               	movf	??___ftpack,w,c
  8691  001E92  101F               	iorwf	??___ftpack+1,w,c
  8692  001E94  1020               	iorwf	??___ftpack+2,w,c
  8693  001E96  B4D8               	btfsc	status,2,c
  8694  001E98  D00C               	goto	l714
  8695  001E9A  D7EC               	goto	l712
  8696  001E9C  2A1C               	incf	___ftpack@exp,f,c
  8697  001E9E  0E01               	movlw	1
  8698  001EA0  2619               	addwf	___ftpack@arg,f,c
  8699  001EA2  0E00               	movlw	0
  8700  001EA4  221A               	addwfc	___ftpack@arg+1,f,c
  8701  001EA6  0E00               	movlw	0
  8702  001EA8  221B               	addwfc	___ftpack@arg+2,f,c
  8703  001EAA  90D8               	bcf	status,0,c
  8704  001EAC  321B               	rrcf	___ftpack@arg+2,f,c
  8705  001EAE  321A               	rrcf	___ftpack@arg+1,f,c
  8706  001EB0  3219               	rrcf	___ftpack@arg,f,c
  8707  001EB2                     l714:
  8708  001EB2  0E00               	movlw	0
  8709  001EB4  1419               	andwf	___ftpack@arg,w,c
  8710  001EB6  6E1E               	movwf	??___ftpack& (0+255),c
  8711  001EB8  0E00               	movlw	0
  8712  001EBA  141A               	andwf	___ftpack@arg+1,w,c
  8713  001EBC  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  8714  001EBE  0EFF               	movlw	255
  8715  001EC0  141B               	andwf	___ftpack@arg+2,w,c
  8716  001EC2  6E20               	movwf	(??___ftpack+2)& (0+255),c
  8717  001EC4  501E               	movf	??___ftpack,w,c
  8718  001EC6  101F               	iorwf	??___ftpack+1,w,c
  8719  001EC8  1020               	iorwf	??___ftpack+2,w,c
  8720  001ECA  B4D8               	btfsc	status,2,c
  8721  001ECC  D006               	goto	l717
  8722  001ECE  D7E6               	goto	l715
  8723  001ED0  061C               	decf	___ftpack@exp,f,c
  8724  001ED2  90D8               	bcf	status,0,c
  8725  001ED4  3619               	rlcf	___ftpack@arg,f,c
  8726  001ED6  361A               	rlcf	___ftpack@arg+1,f,c
  8727  001ED8  361B               	rlcf	___ftpack@arg+2,f,c
  8728  001EDA                     l717:
  8729  001EDA  BE1A               	btfsc	___ftpack@arg+1,7,c
  8730  001EDC  D003               	goto	u4640
  8731  001EDE  0E02               	movlw	2
  8732  001EE0  601C               	cpfslt	___ftpack@exp,c
  8733  001EE2  D7F6               	goto	l718
  8734  001EE4                     u4640:
  8735  001EE4  A01C               	btfss	___ftpack@exp,0,c
  8736  001EE6  9E1A               	bcf	___ftpack@arg+1,7,c
  8737  001EE8  90D8               	bcf	status,0,c
  8738  001EEA  321C               	rrcf	___ftpack@exp,f,c
  8739  001EEC  501C               	movf	___ftpack@exp,w,c
  8740  001EEE  121B               	iorwf	___ftpack@arg+2,f,c
  8741  001EF0  501D               	movf	___ftpack@sign,w,c
  8742  001EF2  A4D8               	btfss	status,2,c
  8743  001EF4  8E1B               	bsf	___ftpack@arg+2,7,c
  8744  001EF6  C019  F019         	movff	___ftpack@arg,?___ftpack
  8745  001EFA  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  8746  001EFE  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  8747  001F02  0012               	return	
  8748  001F04                     __end_of___ftpack:
  8749                           	opt stack 0
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodh	equ	0xFF4
  8755                           prodl	equ	0xFF3
  8756                           intcon	equ	0xFF2
  8757                           postinc0	equ	0xFEE
  8758                           wreg	equ	0xFE8
  8759                           postdec1	equ	0xFE5
  8760                           fsr1l	equ	0xFE1
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function ___ftneg *****************
  8769 ;; Defined at:
  8770 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  f1              3   24[COMRAM] float 
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;		None
  8775 ;; Return value:  Size  Location     Type
  8776 ;;                  3   24[COMRAM] float 
  8777 ;; Registers used:
  8778 ;;		wreg, status,2, status,0
  8779 ;; Tracked objects:
  8780 ;;		On entry : 0/0
  8781 ;;		On exit  : 0/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8784 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;Total ram usage:        3 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; Hardware stack levels required when called:    2
  8791 ;; This function calls:
  8792 ;;		Nothing
  8793 ;; This function is called by:
  8794 ;;		_sprintf
  8795 ;; This function uses a non-reentrant model
  8796 ;;
  8797                           
  8798                           	psect	text36
  8799  0026A8                     __ptext36:
  8800                           	opt stack 0
  8801  0026A8                     ___ftneg:
  8802                           	opt stack 26
  8803                           
  8804                           ;incstack = 0
  8805  0026A8  5019               	movf	___ftneg@f1,w,c
  8806  0026AA  101A               	iorwf	___ftneg@f1+1,w,c
  8807  0026AC  101B               	iorwf	___ftneg@f1+2,w,c
  8808  0026AE  B4D8               	btfsc	status,2,c
  8809  0026B0  D006               	goto	l818
  8810  0026B2  0E00               	movlw	0
  8811  0026B4  1A19               	xorwf	___ftneg@f1,f,c
  8812  0026B6  0E00               	movlw	0
  8813  0026B8  1A1A               	xorwf	___ftneg@f1+1,f,c
  8814  0026BA  0E80               	movlw	128
  8815  0026BC  1A1B               	xorwf	___ftneg@f1+2,f,c
  8816  0026BE                     l818:
  8817  0026BE  C019  F019         	movff	___ftneg@f1,?___ftneg
  8818  0026C2  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  8819  0026C6  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  8820  0026CA  0012               	return		;funcret
  8821  0026CC                     __end_of___ftneg:
  8822                           	opt stack 0
  8823                           tblptru	equ	0xFF8
  8824                           tblptrh	equ	0xFF7
  8825                           tblptrl	equ	0xFF6
  8826                           tablat	equ	0xFF5
  8827                           prodh	equ	0xFF4
  8828                           prodl	equ	0xFF3
  8829                           intcon	equ	0xFF2
  8830                           postinc0	equ	0xFEE
  8831                           wreg	equ	0xFE8
  8832                           postdec1	equ	0xFE5
  8833                           fsr1l	equ	0xFE1
  8834                           indf2	equ	0xFDF
  8835                           postinc2	equ	0xFDE
  8836                           postdec2	equ	0xFDD
  8837                           fsr2h	equ	0xFDA
  8838                           fsr2l	equ	0xFD9
  8839                           status	equ	0xFD8
  8840                           
  8841 ;; *************** function ___ftge *****************
  8842 ;; Defined at:
  8843 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  ff1             3   24[COMRAM] float 
  8846 ;;  ff2             3   27[COMRAM] float 
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;		None
  8849 ;; Return value:  Size  Location     Type
  8850 ;;		None               void
  8851 ;; Registers used:
  8852 ;;		wreg, status,2, status,0
  8853 ;; Tracked objects:
  8854 ;;		On entry : 0/0
  8855 ;;		On exit  : 0/0
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8858 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;Total ram usage:        9 bytes
  8863 ;; Hardware stack levels used:    1
  8864 ;; Hardware stack levels required when called:    2
  8865 ;; This function calls:
  8866 ;;		Nothing
  8867 ;; This function is called by:
  8868 ;;		_sprintf
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           	psect	text37
  8873  001F04                     __ptext37:
  8874                           	opt stack 0
  8875  001F04                     ___ftge:
  8876                           	opt stack 26
  8877                           
  8878                           ;incstack = 0
  8879  001F04  AE1B               	btfss	___ftge@ff1+2,7,c
  8880  001F06  D016               	goto	l800
  8881  001F08  C019  F01F         	movff	___ftge@ff1,??___ftge
  8882  001F0C  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  8883  001F10  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  8884  001F14  1E1F               	comf	??___ftge,f,c
  8885  001F16  1E20               	comf	??___ftge+1,f,c
  8886  001F18  1E21               	comf	??___ftge+2,f,c
  8887  001F1A  2A1F               	incf	??___ftge,f,c
  8888  001F1C  0E00               	movlw	0
  8889  001F1E  2220               	addwfc	??___ftge+1,f,c
  8890  001F20  2221               	addwfc	??___ftge+2,f,c
  8891  001F22  0E00               	movlw	0
  8892  001F24  241F               	addwf	??___ftge,w,c
  8893  001F26  6E19               	movwf	___ftge@ff1,c
  8894  001F28  0E00               	movlw	0
  8895  001F2A  2020               	addwfc	??___ftge+1,w,c
  8896  001F2C  6E1A               	movwf	___ftge@ff1+1,c
  8897  001F2E  0E80               	movlw	128
  8898  001F30  2021               	addwfc	??___ftge+2,w,c
  8899  001F32  6E1B               	movwf	___ftge@ff1+2,c
  8900  001F34                     l800:
  8901  001F34  AE1E               	btfss	___ftge@ff2+2,7,c
  8902  001F36  D016               	goto	l801
  8903  001F38  C01C  F01F         	movff	___ftge@ff2,??___ftge
  8904  001F3C  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  8905  001F40  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  8906  001F44  1E1F               	comf	??___ftge,f,c
  8907  001F46  1E20               	comf	??___ftge+1,f,c
  8908  001F48  1E21               	comf	??___ftge+2,f,c
  8909  001F4A  2A1F               	incf	??___ftge,f,c
  8910  001F4C  0E00               	movlw	0
  8911  001F4E  2220               	addwfc	??___ftge+1,f,c
  8912  001F50  2221               	addwfc	??___ftge+2,f,c
  8913  001F52  0E00               	movlw	0
  8914  001F54  241F               	addwf	??___ftge,w,c
  8915  001F56  6E1C               	movwf	___ftge@ff2,c
  8916  001F58  0E00               	movlw	0
  8917  001F5A  2020               	addwfc	??___ftge+1,w,c
  8918  001F5C  6E1D               	movwf	___ftge@ff2+1,c
  8919  001F5E  0E80               	movlw	128
  8920  001F60  2021               	addwfc	??___ftge+2,w,c
  8921  001F62  6E1E               	movwf	___ftge@ff2+2,c
  8922  001F64                     l801:
  8923  001F64  0E00               	movlw	0
  8924  001F66  1A19               	xorwf	___ftge@ff1,f,c
  8925  001F68  0E00               	movlw	0
  8926  001F6A  1A1A               	xorwf	___ftge@ff1+1,f,c
  8927  001F6C  0E80               	movlw	128
  8928  001F6E  1A1B               	xorwf	___ftge@ff1+2,f,c
  8929  001F70  0E00               	movlw	0
  8930  001F72  1A1C               	xorwf	___ftge@ff2,f,c
  8931  001F74  0E00               	movlw	0
  8932  001F76  1A1D               	xorwf	___ftge@ff2+1,f,c
  8933  001F78  0E80               	movlw	128
  8934  001F7A  1A1E               	xorwf	___ftge@ff2+2,f,c
  8935  001F7C  501C               	movf	___ftge@ff2,w,c
  8936  001F7E  5C19               	subwf	___ftge@ff1,w,c
  8937  001F80  501D               	movf	___ftge@ff2+1,w,c
  8938  001F82  581A               	subwfb	___ftge@ff1+1,w,c
  8939  001F84  501E               	movf	___ftge@ff2+2,w,c
  8940  001F86  581B               	subwfb	___ftge@ff1+2,w,c
  8941  001F88  B0D8               	btfsc	status,0,c
  8942  001F8A  D002               	goto	l4050
  8943  001F8C  90D8               	bcf	status,0,c
  8944  001F8E  0012               	return	
  8945  001F90                     l4050:
  8946  001F90  80D8               	bsf	status,0,c
  8947  001F92  0012               	return	
  8948  001F94                     __end_of___ftge:
  8949                           	opt stack 0
  8950                           tblptru	equ	0xFF8
  8951                           tblptrh	equ	0xFF7
  8952                           tblptrl	equ	0xFF6
  8953                           tablat	equ	0xFF5
  8954                           prodh	equ	0xFF4
  8955                           prodl	equ	0xFF3
  8956                           intcon	equ	0xFF2
  8957                           postinc0	equ	0xFEE
  8958                           wreg	equ	0xFE8
  8959                           postdec1	equ	0xFE5
  8960                           fsr1l	equ	0xFE1
  8961                           indf2	equ	0xFDF
  8962                           postinc2	equ	0xFDE
  8963                           postdec2	equ	0xFDD
  8964                           fsr2h	equ	0xFDA
  8965                           fsr2l	equ	0xFD9
  8966                           status	equ	0xFD8
  8967                           
  8968 ;; *************** function _lcd_puts *****************
  8969 ;; Defined at:
  8970 ;;		line 120 in file "lcd_x8.c"
  8971 ;; Parameters:    Size  Location     Type
  8972 ;;  s               2   38[COMRAM] PTR unsigned char 
  8973 ;;		 -> STR_20(17), STR_19(15), STR_18(15), STR_17(15), 
  8974 ;;		 -> STR_16(15), Buffer(32), 
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;		None
  8977 ;; Return value:  Size  Location     Type
  8978 ;;                  1    wreg      void 
  8979 ;; Registers used:
  8980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8981 ;; Tracked objects:
  8982 ;;		On entry : 0/0
  8983 ;;		On exit  : 0/0
  8984 ;;		Unchanged: 0/0
  8985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8990 ;;Total ram usage:        2 bytes
  8991 ;; Hardware stack levels used:    1
  8992 ;; Hardware stack levels required when called:    7
  8993 ;; This function calls:
  8994 ;;		_lcd_putc
  8995 ;; This function is called by:
  8996 ;;		_display_lcd
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           	psect	text38
  9001  00235A                     __ptext38:
  9002                           	opt stack 0
  9003  00235A                     _lcd_puts:
  9004                           	opt stack 22
  9005                           
  9006                           ;lcd_x8.c: 121: while (*s) {
  9007                           
  9008                           ;incstack = 0
  9009  00235A  D015               	goto	l299
  9010  00235C                     
  9011                           ;lcd_x8.c: 122: lcd_putc(*s);
  9012  00235C  C027  FFF6         	movff	lcd_puts@s,tblptrl
  9013  002360  C028  FFF7         	movff	lcd_puts@s+1,tblptrh
  9014  002364  0E00               	movlw	low (__mediumconst shr (0+16))
  9015  002366  6EF8               	movwf	tblptru,c
  9016  002368  0E0F               	movlw	(high __ramtop+-1)
  9017  00236A  64F7               	cpfsgt	tblptrh,c
  9018  00236C  D003               	bra	u3997
  9019  00236E  0008               	tblrd		*
  9020  002370  50F5               	movf	tablat,w,c
  9021  002372  D005               	bra	u3990
  9022  002374                     u3997:
  9023  002374  CFF6 FFD9          	movff	tblptrl,fsr2l
  9024  002378  CFF7 FFDA          	movff	tblptrh,fsr2h
  9025  00237C  50DF               	movf	indf2,w,c
  9026  00237E                     u3990:
  9027  00237E  ECD8  F011         	call	_lcd_putc
  9028                           
  9029                           ;lcd_x8.c: 123: s++;
  9030  002382  4A27               	infsnz	lcd_puts@s,f,c
  9031  002384  2A28               	incf	lcd_puts@s+1,f,c
  9032  002386                     l299:
  9033  002386  C027  FFF6         	movff	lcd_puts@s,tblptrl
  9034  00238A  C028  FFF7         	movff	lcd_puts@s+1,tblptrh
  9035  00238E  0E00               	movlw	low (__mediumconst shr (0+16))
  9036  002390  6EF8               	movwf	tblptru,c
  9037  002392  0E0F               	movlw	(high __ramtop+-1)
  9038  002394  64F7               	cpfsgt	tblptrh,c
  9039  002396  D003               	bra	u4007
  9040  002398  0008               	tblrd		*
  9041  00239A  50F5               	movf	tablat,w,c
  9042  00239C  D005               	bra	u4000
  9043  00239E                     u4007:
  9044  00239E  CFF6 FFD9          	movff	tblptrl,fsr2l
  9045  0023A2  CFF7 FFDA          	movff	tblptrh,fsr2h
  9046  0023A6  50DF               	movf	indf2,w,c
  9047  0023A8                     u4000:
  9048  0023A8  0900               	iorlw	0
  9049  0023AA  B4D8               	btfsc	status,2,c
  9050  0023AC  0012               	return	
  9051  0023AE  D7D6               	goto	l300
  9052  0023B0                     __end_of_lcd_puts:
  9053                           	opt stack 0
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           intcon	equ	0xFF2
  9061                           postinc0	equ	0xFEE
  9062                           wreg	equ	0xFE8
  9063                           postdec1	equ	0xFE5
  9064                           fsr1l	equ	0xFE1
  9065                           indf2	equ	0xFDF
  9066                           postinc2	equ	0xFDE
  9067                           postdec2	equ	0xFDD
  9068                           fsr2h	equ	0xFDA
  9069                           fsr2l	equ	0xFD9
  9070                           status	equ	0xFD8
  9071                           
  9072 ;; *************** function _lcd_putc *****************
  9073 ;; Defined at:
  9074 ;;		line 106 in file "lcd_x8.c"
  9075 ;; Parameters:    Size  Location     Type
  9076 ;;  c               1    wreg     unsigned char 
  9077 ;; Auto vars:     Size  Location     Type
  9078 ;;  c               1   37[COMRAM] unsigned char 
  9079 ;; Return value:  Size  Location     Type
  9080 ;;                  1    wreg      void 
  9081 ;; Registers used:
  9082 ;;		wreg, status,2, status,0, cstack
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;Total ram usage:        1 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; Hardware stack levels required when called:    6
  9095 ;; This function calls:
  9096 ;;		_delay_ms
  9097 ;;		_lcd_gotoxy
  9098 ;;		_lcd_send_byte
  9099 ;; This function is called by:
  9100 ;;		_lcd_puts
  9101 ;; This function uses a non-reentrant model
  9102 ;;
  9103                           
  9104                           	psect	text39
  9105  0023B0                     __ptext39:
  9106                           	opt stack 0
  9107  0023B0                     _lcd_putc:
  9108                           	opt stack 22
  9109                           
  9110                           ;incstack = 0
  9111                           ;lcd_putc@c stored from wreg
  9112  0023B0  6E26               	movwf	lcd_putc@c,c
  9113                           
  9114                           ;lcd_x8.c: 107: switch (c) {
  9115  0023B2  D01E               	goto	l290
  9116  0023B4  0E01               	movlw	1
  9117  0023B6  6E21               	movwf	lcd_send_byte@n,c
  9118  0023B8  0E00               	movlw	0
  9119  0023BA  EC2D  F012         	call	_lcd_send_byte
  9120                           
  9121                           ;lcd_x8.c: 109: delay_ms(2);
  9122  0023BE  0E00               	movlw	0
  9123  0023C0  6E1A               	movwf	delay_ms@n+1,c
  9124  0023C2  0E02               	movlw	2
  9125  0023C4  6E19               	movwf	delay_ms@n,c
  9126  0023C6  EC2F  F013         	call	_delay_ms	;wreg free
  9127                           
  9128                           ;lcd_x8.c: 110: break;
  9129  0023CA  0012               	return	
  9130  0023CC  0E02               	movlw	2
  9131  0023CE  6E23               	movwf	lcd_gotoxy@y,c
  9132  0023D0  0E01               	movlw	1
  9133  0023D2  EC72  F012         	call	_lcd_gotoxy
  9134                           
  9135                           ;lcd_x8.c: 112: break;
  9136  0023D6  0012               	return	
  9137  0023D8  0E10               	movlw	16
  9138  0023DA  6E21               	movwf	lcd_send_byte@n,c
  9139  0023DC  0E00               	movlw	0
  9140  0023DE  EC2D  F012         	call	_lcd_send_byte
  9141                           
  9142                           ;lcd_x8.c: 114: break;
  9143  0023E2  0012               	return	
  9144  0023E4  C026  F021         	movff	lcd_putc@c,lcd_send_byte@n
  9145  0023E8  0E01               	movlw	1
  9146  0023EA  EC2D  F012         	call	_lcd_send_byte
  9147                           
  9148                           ;lcd_x8.c: 117: }
  9149                           
  9150                           ;lcd_x8.c: 116: break;
  9151  0023EE  0012               	return	
  9152  0023F0                     l290:
  9153  0023F0  5026               	movf	lcd_putc@c,w,c
  9154                           
  9155                           ; Switch size 1, requested type "space"
  9156                           ; Number of cases is 3, Range of values is 8 to 12
  9157                           ; switch strategies available:
  9158                           ; Name         Instructions Cycles
  9159                           ; simple_byte           10     6 (average)
  9160                           ;	Chosen strategy is simple_byte
  9161  0023F2  0A08               	xorlw	8	; case 8
  9162  0023F4  B4D8               	btfsc	status,2,c
  9163  0023F6  D7F0               	goto	l294
  9164  0023F8  0A02               	xorlw	2	; case 10
  9165  0023FA  B4D8               	btfsc	status,2,c
  9166  0023FC  D7E7               	goto	l293
  9167  0023FE  0A06               	xorlw	6	; case 12
  9168  002400  B4D8               	btfsc	status,2,c
  9169  002402  D7D8               	goto	l291
  9170  002404  D7EF               	goto	l295
  9171  002406                     __end_of_lcd_putc:
  9172                           	opt stack 0
  9173                           tblptru	equ	0xFF8
  9174                           tblptrh	equ	0xFF7
  9175                           tblptrl	equ	0xFF6
  9176                           tablat	equ	0xFF5
  9177                           prodh	equ	0xFF4
  9178                           prodl	equ	0xFF3
  9179                           intcon	equ	0xFF2
  9180                           postinc0	equ	0xFEE
  9181                           wreg	equ	0xFE8
  9182                           postdec1	equ	0xFE5
  9183                           fsr1l	equ	0xFE1
  9184                           indf2	equ	0xFDF
  9185                           postinc2	equ	0xFDE
  9186                           postdec2	equ	0xFDD
  9187                           fsr2h	equ	0xFDA
  9188                           fsr2l	equ	0xFD9
  9189                           status	equ	0xFD8
  9190                           
  9191 ;; *************** function _lcd_gotoxy *****************
  9192 ;; Defined at:
  9193 ;;		line 89 in file "lcd_x8.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;  x               1    wreg     unsigned char 
  9196 ;;  y               1   34[COMRAM] unsigned char 
  9197 ;; Auto vars:     Size  Location     Type
  9198 ;;  x               1   35[COMRAM] unsigned char 
  9199 ;;  address         1   36[COMRAM] unsigned char 
  9200 ;; Return value:  Size  Location     Type
  9201 ;;                  1    wreg      void 
  9202 ;; Registers used:
  9203 ;;		wreg, status,2, status,0, cstack
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9209 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9212 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;Total ram usage:        3 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:    5
  9216 ;; This function calls:
  9217 ;;		_lcd_send_byte
  9218 ;; This function is called by:
  9219 ;;		_display_lcd
  9220 ;;		_lcd_putc
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           	psect	text40
  9225  0024E4                     __ptext40:
  9226                           	opt stack 0
  9227  0024E4                     _lcd_gotoxy:
  9228                           	opt stack 22
  9229                           
  9230                           ;incstack = 0
  9231                           ;lcd_gotoxy@x stored from wreg
  9232  0024E4  6E24               	movwf	lcd_gotoxy@x,c
  9233                           
  9234                           ;lcd_x8.c: 90: unsigned char address;
  9235                           ;lcd_x8.c: 92: switch (y) {
  9236  0024E6  D009               	goto	l281
  9237  0024E8  0E80               	movlw	128
  9238  0024EA  D005               	goto	L9
  9239  0024EC  0EC0               	movlw	192
  9240  0024EE  D003               	goto	L9
  9241  0024F0  0E90               	movlw	144
  9242  0024F2  D001               	goto	L9
  9243  0024F4  0ED0               	movlw	208
  9244  0024F6                     L9:
  9245  0024F6  6E25               	movwf	lcd_gotoxy@address,c
  9246                           
  9247                           ;lcd_x8.c: 101: }
  9248                           
  9249                           ;lcd_x8.c: 100: break;
  9250  0024F8  D00D               	goto	l283
  9251  0024FA                     l281:
  9252  0024FA  5023               	movf	lcd_gotoxy@y,w,c
  9253                           
  9254                           ; Switch size 1, requested type "space"
  9255                           ; Number of cases is 4, Range of values is 1 to 4
  9256                           ; switch strategies available:
  9257                           ; Name         Instructions Cycles
  9258                           ; simple_byte           13     7 (average)
  9259                           ;	Chosen strategy is simple_byte
  9260  0024FC  0A01               	xorlw	1	; case 1
  9261  0024FE  B4D8               	btfsc	status,2,c
  9262  002500  D7F3               	goto	l282
  9263  002502  0A03               	xorlw	3	; case 2
  9264  002504  B4D8               	btfsc	status,2,c
  9265  002506  D7F2               	goto	l284
  9266  002508  0A01               	xorlw	1	; case 3
  9267  00250A  B4D8               	btfsc	status,2,c
  9268  00250C  D7F1               	goto	l285
  9269  00250E  0A07               	xorlw	7	; case 4
  9270  002510  B4D8               	btfsc	status,2,c
  9271  002512  D7F0               	goto	l286
  9272  002514                     l283:
  9273                           
  9274                           ;lcd_x8.c: 102: address += x - 1;
  9275  002514  0424               	decf	lcd_gotoxy@x,w,c
  9276  002516  2625               	addwf	lcd_gotoxy@address,f,c
  9277                           
  9278                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  9279  002518  5025               	movf	lcd_gotoxy@address,w,c
  9280  00251A  0980               	iorlw	128
  9281  00251C  6E21               	movwf	lcd_send_byte@n,c
  9282  00251E  0E00               	movlw	0
  9283  002520  EC2D  F012         	call	_lcd_send_byte
  9284  002524  0012               	return		;funcret
  9285  002526                     __end_of_lcd_gotoxy:
  9286                           	opt stack 0
  9287                           tblptru	equ	0xFF8
  9288                           tblptrh	equ	0xFF7
  9289                           tblptrl	equ	0xFF6
  9290                           tablat	equ	0xFF5
  9291                           prodh	equ	0xFF4
  9292                           prodl	equ	0xFF3
  9293                           intcon	equ	0xFF2
  9294                           postinc0	equ	0xFEE
  9295                           wreg	equ	0xFE8
  9296                           postdec1	equ	0xFE5
  9297                           fsr1l	equ	0xFE1
  9298                           indf2	equ	0xFDF
  9299                           postinc2	equ	0xFDE
  9300                           postdec2	equ	0xFDD
  9301                           fsr2h	equ	0xFDA
  9302                           fsr2l	equ	0xFD9
  9303                           status	equ	0xFD8
  9304                           
  9305 ;; *************** function _lcd_send_byte *****************
  9306 ;; Defined at:
  9307 ;;		line 39 in file "lcd_x8.c"
  9308 ;; Parameters:    Size  Location     Type
  9309 ;;  cm_data         1    wreg     unsigned char 
  9310 ;;  n               1   32[COMRAM] unsigned char 
  9311 ;; Auto vars:     Size  Location     Type
  9312 ;;  cm_data         1   33[COMRAM] unsigned char 
  9313 ;; Return value:  Size  Location     Type
  9314 ;;                  1    wreg      void 
  9315 ;; Registers used:
  9316 ;;		wreg, status,2, status,0, cstack
  9317 ;; Tracked objects:
  9318 ;;		On entry : 0/0
  9319 ;;		On exit  : 0/0
  9320 ;;		Unchanged: 0/0
  9321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9322 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;Total ram usage:        2 bytes
  9327 ;; Hardware stack levels used:    1
  9328 ;; Hardware stack levels required when called:    4
  9329 ;; This function calls:
  9330 ;;		_delay_cycles
  9331 ;;		_delay_ms
  9332 ;;		_lcd_send_nibble
  9333 ;; This function is called by:
  9334 ;;		_lcd_init
  9335 ;;		_lcd_gotoxy
  9336 ;;		_lcd_putc
  9337 ;;		_Lcd_Shift_Right
  9338 ;;		_Lcd_Shift_Left
  9339 ;; This function uses a non-reentrant model
  9340 ;;
  9341                           
  9342                           	psect	text41
  9343  00245A                     __ptext41:
  9344                           	opt stack 0
  9345  00245A                     _lcd_send_byte:
  9346                           	opt stack 25
  9347                           
  9348                           ;incstack = 0
  9349                           ;lcd_send_byte@cm_data stored from wreg
  9350  00245A  6E22               	movwf	lcd_send_byte@cm_data,c
  9351                           
  9352                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  9353  00245C  B022               	btfsc	lcd_send_byte@cm_data,0,c
  9354  00245E  D002               	bra	u2345
  9355  002460  9484               	bcf	3972,2,c	;volatile
  9356  002462  D001               	bra	u2346
  9357  002464                     u2345:
  9358  002464  8484               	bsf	3972,2,c	;volatile
  9359  002466                     u2346:
  9360                           
  9361                           ;lcd_x8.c: 44: delay_cycles(1);
  9362  002466  0E01               	movlw	1
  9363  002468  EC05  F013         	call	_delay_cycles
  9364                           
  9365                           ;lcd_x8.c: 46: delay_cycles(1);
  9366  00246C  0E01               	movlw	1
  9367  00246E  EC05  F013         	call	_delay_cycles
  9368                           
  9369                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  9370  002472  9284               	bcf	3972,1,c	;volatile
  9371                           
  9372                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  9373  002474  3821               	swapf	lcd_send_byte@n,w,c
  9374  002476  0B0F               	andlw	15
  9375  002478  EC77  F013         	call	_lcd_send_nibble
  9376                           
  9377                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  9378  00247C  5021               	movf	lcd_send_byte@n,w,c
  9379  00247E  0B0F               	andlw	15
  9380  002480  EC77  F013         	call	_lcd_send_nibble
  9381                           
  9382                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  9383  002484  5022               	movf	lcd_send_byte@cm_data,w,c
  9384  002486  B4D8               	btfsc	status,2,c
  9385  002488  D005               	goto	l269
  9386  00248A  0E32               	movlw	50
  9387  00248C                     u6557:
  9388  00248C  0004               	clrwdt	
  9389  00248E  2EE8               	decfsz	wreg,f,c
  9390  002490  D7FD               	bra	u6557
  9391  002492  0012               	return	
  9392  002494                     l269:
  9393                           
  9394                           ;lcd_x8.c: 51: else
  9395                           ;lcd_x8.c: 52: delay_ms(2);
  9396  002494  0E00               	movlw	0
  9397  002496  6E1A               	movwf	delay_ms@n+1,c
  9398  002498  0E02               	movlw	2
  9399  00249A  6E19               	movwf	delay_ms@n,c
  9400  00249C  EC2F  F013         	call	_delay_ms	;wreg free
  9401  0024A0  0012               	return	
  9402  0024A2                     __end_of_lcd_send_byte:
  9403                           	opt stack 0
  9404                           tblptru	equ	0xFF8
  9405                           tblptrh	equ	0xFF7
  9406                           tblptrl	equ	0xFF6
  9407                           tablat	equ	0xFF5
  9408                           prodh	equ	0xFF4
  9409                           prodl	equ	0xFF3
  9410                           intcon	equ	0xFF2
  9411                           postinc0	equ	0xFEE
  9412                           wreg	equ	0xFE8
  9413                           postdec1	equ	0xFE5
  9414                           fsr1l	equ	0xFE1
  9415                           indf2	equ	0xFDF
  9416                           postinc2	equ	0xFDE
  9417                           postdec2	equ	0xFDD
  9418                           fsr2h	equ	0xFDA
  9419                           fsr2l	equ	0xFD9
  9420                           status	equ	0xFD8
  9421                           
  9422 ;; *************** function _lcd_send_nibble *****************
  9423 ;; Defined at:
  9424 ;;		line 29 in file "lcd_x8.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;  n               1    wreg     unsigned char 
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;  n               1   31[COMRAM] unsigned char 
  9429 ;; Return value:  Size  Location     Type
  9430 ;;                  1    wreg      void 
  9431 ;; Registers used:
  9432 ;;		wreg, status,2, status,0, cstack
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9442 ;;Total ram usage:        2 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    3
  9445 ;; This function calls:
  9446 ;;		_delay_cycles
  9447 ;; This function is called by:
  9448 ;;		_lcd_send_byte
  9449 ;;		_lcd_init
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           	psect	text42
  9454  0026EE                     __ptext42:
  9455                           	opt stack 0
  9456  0026EE                     _lcd_send_nibble:
  9457                           	opt stack 26
  9458                           
  9459                           ;incstack = 0
  9460                           ;lcd_send_nibble@n stored from wreg
  9461  0026EE  6E20               	movwf	lcd_send_nibble@n,c
  9462                           
  9463                           ;lcd_x8.c: 31: lcd.data = n;
  9464  0026F0  C020  F01F         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  9465  0026F4  3A1F               	swapf	??_lcd_send_nibble,f,c
  9466  0026F6  5083               	movf	3971,w,c
  9467  0026F8  181F               	xorwf	??_lcd_send_nibble,w,c
  9468  0026FA  0B0F               	andlw	-241
  9469  0026FC  181F               	xorwf	??_lcd_send_nibble,w,c
  9470  0026FE  6E83               	movwf	3971,c
  9471                           
  9472                           ;lcd_x8.c: 33: delay_cycles(1);
  9473  002700  0E01               	movlw	1
  9474  002702  EC05  F013         	call	_delay_cycles
  9475                           
  9476                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
  9477  002706  8284               	bsf	3972,1,c	;volatile
  9478                           
  9479                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  9480  002708  0004               	clrwdt	
  9481  00270A  F000               	nop		;2 cycle nop
  9482                           
  9483                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
  9484  00270C  9284               	bcf	3972,1,c	;volatile
  9485  00270E  0012               	return		;funcret
  9486  002710                     __end_of_lcd_send_nibble:
  9487                           	opt stack 0
  9488                           tblptru	equ	0xFF8
  9489                           tblptrh	equ	0xFF7
  9490                           tblptrl	equ	0xFF6
  9491                           tablat	equ	0xFF5
  9492                           prodh	equ	0xFF4
  9493                           prodl	equ	0xFF3
  9494                           intcon	equ	0xFF2
  9495                           postinc0	equ	0xFEE
  9496                           wreg	equ	0xFE8
  9497                           postdec1	equ	0xFE5
  9498                           fsr1l	equ	0xFE1
  9499                           indf2	equ	0xFDF
  9500                           postinc2	equ	0xFDE
  9501                           postdec2	equ	0xFDD
  9502                           fsr2h	equ	0xFDA
  9503                           fsr2l	equ	0xFD9
  9504                           status	equ	0xFD8
  9505                           
  9506 ;; *************** function _delay_cycles *****************
  9507 ;; Defined at:
  9508 ;;		line 20 in file "lcd_x8.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;  n               1    wreg     unsigned char 
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;  n               1   27[COMRAM] unsigned char 
  9513 ;;  x               2   28[COMRAM] int 
  9514 ;; Return value:  Size  Location     Type
  9515 ;;                  1    wreg      void 
  9516 ;; Registers used:
  9517 ;;		wreg, status,2, status,0
  9518 ;; Tracked objects:
  9519 ;;		On entry : 0/0
  9520 ;;		On exit  : 0/0
  9521 ;;		Unchanged: 0/0
  9522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9525 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9526 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9527 ;;Total ram usage:        6 bytes
  9528 ;; Hardware stack levels used:    1
  9529 ;; Hardware stack levels required when called:    2
  9530 ;; This function calls:
  9531 ;;		Nothing
  9532 ;; This function is called by:
  9533 ;;		_lcd_send_nibble
  9534 ;;		_lcd_send_byte
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           	psect	text43
  9539  00260A                     __ptext43:
  9540                           	opt stack 0
  9541  00260A                     _delay_cycles:
  9542                           	opt stack 26
  9543                           
  9544                           ;incstack = 0
  9545                           ;delay_cycles@n stored from wreg
  9546  00260A  6E1C               	movwf	delay_cycles@n,c
  9547                           
  9548                           ;lcd_x8.c: 21: int x;
  9549                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  9550  00260C  0E00               	movlw	0
  9551  00260E  6E1E               	movwf	delay_cycles@x+1,c
  9552  002610  0E00               	movlw	0
  9553  002612  6E1D               	movwf	delay_cycles@x,c
  9554  002614  D003               	goto	l260
  9555  002616                     l261:
  9556  002616  0004               	clrwdt		;# 
  9557  002618  4A1D               	infsnz	delay_cycles@x,f,c
  9558  00261A  2A1E               	incf	delay_cycles@x+1,f,c
  9559  00261C                     l260:
  9560  00261C  501C               	movf	delay_cycles@n,w,c
  9561  00261E  6E19               	movwf	??_delay_cycles& (0+255),c
  9562  002620  6A1A               	clrf	(??_delay_cycles+1)& (0+255),c
  9563  002622  501D               	movf	delay_cycles@x,w,c
  9564  002624  5C19               	subwf	??_delay_cycles,w,c
  9565  002626  501A               	movf	??_delay_cycles+1,w,c
  9566  002628  0A80               	xorlw	128
  9567  00262A  6E1B               	movwf	(??_delay_cycles+2)& (0+255),c
  9568  00262C  501E               	movf	delay_cycles@x+1,w,c
  9569  00262E  0A80               	xorlw	128
  9570  002630  581B               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  9571  002632  A0D8               	btfss	status,0,c
  9572  002634  0012               	return	
  9573  002636  D7EF               	goto	l261
  9574  002638                     __end_of_delay_cycles:
  9575                           	opt stack 0
  9576                           tblptru	equ	0xFF8
  9577                           tblptrh	equ	0xFF7
  9578                           tblptrl	equ	0xFF6
  9579                           tablat	equ	0xFF5
  9580                           prodh	equ	0xFF4
  9581                           prodl	equ	0xFF3
  9582                           intcon	equ	0xFF2
  9583                           postinc0	equ	0xFEE
  9584                           wreg	equ	0xFE8
  9585                           postdec1	equ	0xFE5
  9586                           fsr1l	equ	0xFE1
  9587                           indf2	equ	0xFDF
  9588                           postinc2	equ	0xFDE
  9589                           postdec2	equ	0xFDD
  9590                           fsr2h	equ	0xFDA
  9591                           fsr2l	equ	0xFD9
  9592                           status	equ	0xFD8
  9593                           
  9594 ;; *************** function _delay_ms *****************
  9595 ;; Defined at:
  9596 ;;		line 12 in file "lcd_x8.c"
  9597 ;; Parameters:    Size  Location     Type
  9598 ;;  n               2   24[COMRAM] unsigned int 
  9599 ;; Auto vars:     Size  Location     Type
  9600 ;;  x               2   26[COMRAM] int 
  9601 ;; Return value:  Size  Location     Type
  9602 ;;                  1    wreg      void 
  9603 ;; Registers used:
  9604 ;;		wreg, status,2, status,0
  9605 ;; Tracked objects:
  9606 ;;		On entry : 0/0
  9607 ;;		On exit  : 0/0
  9608 ;;		Unchanged: 0/0
  9609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9610 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;Total ram usage:        4 bytes
  9615 ;; Hardware stack levels used:    1
  9616 ;; Hardware stack levels required when called:    2
  9617 ;; This function calls:
  9618 ;;		Nothing
  9619 ;; This function is called by:
  9620 ;;		_lcd_send_byte
  9621 ;;		_lcd_init
  9622 ;;		_lcd_putc
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           	psect	text44
  9627  00265E                     __ptext44:
  9628                           	opt stack 0
  9629  00265E                     _delay_ms:
  9630                           	opt stack 26
  9631                           
  9632                           ;lcd_x8.c: 13: int x;
  9633                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
  9634                           
  9635                           ;incstack = 0
  9636  00265E  0E00               	movlw	0
  9637  002660  6E1C               	movwf	delay_ms@x+1,c
  9638  002662  0E00               	movlw	0
  9639  002664  6E1B               	movwf	delay_ms@x,c
  9640  002666  D007               	goto	l254
  9641  002668                     
  9642                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  9643  002668  0EC8               	movlw	200
  9644  00266A                     u6567:
  9645  00266A  0004               	clrwdt	
  9646  00266C  0004               	clrwdt	
  9647  00266E  2EE8               	decfsz	wreg,f,c
  9648  002670  D7FC               	bra	u6567
  9649  002672  4A1B               	infsnz	delay_ms@x,f,c
  9650  002674  2A1C               	incf	delay_ms@x+1,f,c
  9651  002676                     l254:
  9652  002676  501B               	movf	delay_ms@x,w,c
  9653  002678  5C19               	subwf	delay_ms@n,w,c
  9654  00267A  501C               	movf	delay_ms@x+1,w,c
  9655  00267C  581A               	subwfb	delay_ms@n+1,w,c
  9656  00267E  A0D8               	btfss	status,0,c
  9657  002680  0012               	return	
  9658  002682  D7F2               	goto	l255
  9659  002684                     __end_of_delay_ms:
  9660                           	opt stack 0
  9661                           tblptru	equ	0xFF8
  9662                           tblptrh	equ	0xFF7
  9663                           tblptrl	equ	0xFF6
  9664                           tablat	equ	0xFF5
  9665                           prodh	equ	0xFF4
  9666                           prodl	equ	0xFF3
  9667                           intcon	equ	0xFF2
  9668                           postinc0	equ	0xFEE
  9669                           wreg	equ	0xFE8
  9670                           postdec1	equ	0xFE5
  9671                           fsr1l	equ	0xFE1
  9672                           indf2	equ	0xFDF
  9673                           postinc2	equ	0xFDE
  9674                           postdec2	equ	0xFDD
  9675                           fsr2h	equ	0xFDA
  9676                           fsr2l	equ	0xFD9
  9677                           status	equ	0xFD8
  9678                           
  9679 ;; *************** function _ISR *****************
  9680 ;; Defined at:
  9681 ;;		line 98 in file "HM1.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;		None
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;		None
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      void 
  9688 ;; Registers used:
  9689 ;;		wreg, status,2, status,0, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9697 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9698 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;Total ram usage:       18 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    1
  9702 ;; This function calls:
  9703 ;;		_toggle_cooler
  9704 ;;		i2___awmod
  9705 ;; This function is called by:
  9706 ;;		Interrupt level 2
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           	psect	intcode
  9711  000008                     __pintcode:
  9712                           	opt stack 0
  9713  000008                     _ISR:
  9714                           	opt stack 22
  9715                           
  9716                           ;incstack = 0
  9717  000008  8267               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9718  00000A  ED3B  F00D         	call	int_func,f	;refresh shadow registers
  9719                           tblptru	equ	0xFF8
  9720                           tblptrh	equ	0xFF7
  9721                           tblptrl	equ	0xFF6
  9722                           tablat	equ	0xFF5
  9723                           prodh	equ	0xFF4
  9724                           prodl	equ	0xFF3
  9725                           intcon	equ	0xFF2
  9726                           postinc0	equ	0xFEE
  9727                           wreg	equ	0xFE8
  9728                           postdec1	equ	0xFE5
  9729                           fsr1l	equ	0xFE1
  9730                           indf2	equ	0xFDF
  9731                           postinc2	equ	0xFDE
  9732                           postdec2	equ	0xFDD
  9733                           fsr2h	equ	0xFDA
  9734                           fsr2l	equ	0xFD9
  9735                           status	equ	0xFD8
  9736                           
  9737                           	psect	intcode_body
  9738  001A76                     __pintcode_body:
  9739                           	opt stack 22
  9740  001A76                     int_func:
  9741                           	opt stack 22
  9742  001A76  0006               	pop		; remove dummy address from shadow register refresh
  9743  001A78  CFFA F007          	movff	pclath,??_ISR
  9744  001A7C  CFFB F008          	movff	pclatu,??_ISR+1
  9745  001A80  CFE9 F009          	movff	fsr0l,??_ISR+2
  9746  001A84  CFEA F00A          	movff	fsr0h,??_ISR+3
  9747  001A88  CFE1 F00B          	movff	fsr1l,??_ISR+4
  9748  001A8C  CFE2 F00C          	movff	fsr1h,??_ISR+5
  9749  001A90  CFD9 F00D          	movff	fsr2l,??_ISR+6
  9750  001A94  CFDA F00E          	movff	fsr2h,??_ISR+7
  9751  001A98  CFF3 F00F          	movff	prodl,??_ISR+8
  9752  001A9C  CFF4 F010          	movff	prodh,??_ISR+9
  9753  001AA0  CFF6 F011          	movff	tblptrl,??_ISR+10
  9754  001AA4  CFF7 F012          	movff	tblptrh,??_ISR+11
  9755  001AA8  CFF8 F013          	movff	tblptru,??_ISR+12
  9756  001AAC  CFF5 F014          	movff	tablat,??_ISR+13
  9757  001AB0  C067  F015         	movff	btemp,??_ISR+14
  9758  001AB4  C068  F016         	movff	btemp+1,??_ISR+15
  9759  001AB8  C069  F017         	movff	btemp+2,??_ISR+16
  9760  001ABC  C06A  F018         	movff	btemp+3,??_ISR+17
  9761                           
  9762                           ;HM1.c: 99: if (TMR0IF) {
  9763  001AC0  A4F2               	btfss	intcon,2,c	;volatile
  9764  001AC2  D01B               	goto	i2l95
  9765                           
  9766                           ;HM1.c: 101: T0CON = 0x85;
  9767  001AC4  0E85               	movlw	133
  9768  001AC6  6ED5               	movwf	4053,c	;volatile
  9769                           
  9770                           ;HM1.c: 102: TMR0 = 45536;
  9771  001AC8  0EB1               	movlw	177
  9772  001ACA  6ED7               	movwf	4055,c	;volatile
  9773  001ACC  0EE0               	movlw	224
  9774  001ACE  6ED6               	movwf	4054,c	;volatile
  9775                           
  9776                           ;HM1.c: 104: if (!clockMode) {
  9777  001AD0  B466               	btfsc	_clockMode/(0+8),_clockMode& (0+7),c	;volatile
  9778  001AD2  D012               	goto	i2l99
  9779                           
  9780                           ;HM1.c: 105: seconds++;
  9781  001AD4  2A61               	incf	_seconds,f,c	;volatile
  9782                           
  9783                           ;HM1.c: 106: if (seconds >= 60) {
  9784  001AD6  0E3B               	movlw	59
  9785  001AD8  6461               	cpfsgt	_seconds,c	;volatile
  9786  001ADA  D00E               	goto	i2l99
  9787                           
  9788                           ;HM1.c: 107: seconds = 0;
  9789  001ADC  0E00               	movlw	0
  9790  001ADE  6E61               	movwf	_seconds,c	;volatile
  9791                           
  9792                           ;HM1.c: 108: minutes++;
  9793  001AE0  2A60               	incf	_minutes,f,c	;volatile
  9794                           
  9795                           ;HM1.c: 109: if (minutes >= 60) {
  9796  001AE2  0E3B               	movlw	59
  9797  001AE4  6460               	cpfsgt	_minutes,c	;volatile
  9798  001AE6  D008               	goto	i2l99
  9799                           
  9800                           ;HM1.c: 110: minutes = 0;
  9801  001AE8  0E00               	movlw	0
  9802  001AEA  6E60               	movwf	_minutes,c	;volatile
  9803                           
  9804                           ;HM1.c: 111: hours++;
  9805  001AEC  2A5F               	incf	_hours,f,c	;volatile
  9806                           
  9807                           ;HM1.c: 112: if (hours >= 24) {
  9808  001AEE  0E17               	movlw	23
  9809  001AF0  645F               	cpfsgt	_hours,c	;volatile
  9810  001AF2  D002               	goto	i2l99
  9811                           
  9812                           ;HM1.c: 113: hours = 0;
  9813  001AF4  0E00               	movlw	0
  9814  001AF6  6E5F               	movwf	_hours,c	;volatile
  9815  001AF8                     i2l99:
  9816                           
  9817                           ;HM1.c: 114: }
  9818                           ;HM1.c: 115: }
  9819                           ;HM1.c: 116: }
  9820                           ;HM1.c: 117: }
  9821                           ;HM1.c: 118: TMR0IF = 0;
  9822  001AF8  94F2               	bcf	intcon,2,c	;volatile
  9823  001AFA                     i2l95:
  9824                           
  9825                           ;HM1.c: 119: }
  9826                           ;HM1.c: 122: if (INT1IF) {
  9827  001AFA  A0F0               	btfss	intcon3,0,c	;volatile
  9828  001AFC  D006               	goto	i2l100
  9829                           
  9830                           ;HM1.c: 123: clockMode = !clockMode;
  9831  001AFE  B466               	btfsc	_clockMode/(0+8),_clockMode& (0+7),c	;volatile
  9832  001B00  D002               	goto	i2u454_40
  9833  001B02  8466               	bsf	_clockMode/(0+8),_clockMode& (0+7),c	;volatile
  9834  001B04  D001               	goto	i2u455_45
  9835  001B06                     i2u454_40:
  9836  001B06  9466               	bcf	_clockMode/(0+8),_clockMode& (0+7),c	;volatile
  9837  001B08                     i2u455_45:
  9838                           
  9839                           ;HM1.c: 124: INT1IF = 0;
  9840  001B08  90F0               	bcf	intcon3,0,c	;volatile
  9841  001B0A                     i2l100:
  9842                           
  9843                           ;HM1.c: 125: }
  9844                           ;HM1.c: 128: if (INT2IF && clockMode) {
  9845  001B0A  B2F0               	btfsc	intcon3,1,c	;volatile
  9846  001B0C  A466               	btfss	_clockMode/(0+8),_clockMode& (0+7),c	;volatile
  9847  001B0E  D00F               	goto	i2l101
  9848                           
  9849                           ;HM1.c: 129: setupSelect = (setupSelect + 1) % 3;
  9850  001B10  0E01               	movlw	1
  9851  001B12  245E               	addwf	_setupSelect,w,c	;volatile
  9852  001B14  6E01               	movwf	i2___awmod@dividend,c
  9853  001B16  6A02               	clrf	i2___awmod@dividend+1,c
  9854  001B18  0E00               	movlw	0
  9855  001B1A  2202               	addwfc	i2___awmod@dividend+1,f,c
  9856  001B1C  0E00               	movlw	0
  9857  001B1E  6E04               	movwf	i2___awmod@divisor+1,c
  9858  001B20  0E03               	movlw	3
  9859  001B22  6E03               	movwf	i2___awmod@divisor,c
  9860  001B24  EC85  F010         	call	i2___awmod	;wreg free
  9861  001B28  5001               	movf	?i2___awmod,w,c
  9862  001B2A  6E5E               	movwf	_setupSelect,c	;volatile
  9863                           
  9864                           ;HM1.c: 130: INT2IF = 0;
  9865  001B2C  92F0               	bcf	intcon3,1,c	;volatile
  9866  001B2E                     i2l101:
  9867                           
  9868                           ;HM1.c: 131: }
  9869                           ;HM1.c: 134: if (INT0IF) {
  9870  001B2E  A2F2               	btfss	intcon,1,c	;volatile
  9871  001B30  D003               	goto	i2l102
  9872                           
  9873                           ;HM1.c: 135: toggle_cooler();
  9874  001B32  ECAF  F013         	call	_toggle_cooler	;wreg free
  9875                           
  9876                           ;HM1.c: 136: INT0IF = 0;
  9877  001B36  92F2               	bcf	intcon,1,c	;volatile
  9878  001B38                     i2l102:
  9879  001B38  C018  F06A         	movff	??_ISR+17,btemp+3
  9880  001B3C  C017  F069         	movff	??_ISR+16,btemp+2
  9881  001B40  C016  F068         	movff	??_ISR+15,btemp+1
  9882  001B44  C015  F067         	movff	??_ISR+14,btemp
  9883  001B48  C014  FFF5         	movff	??_ISR+13,tablat
  9884  001B4C  C013  FFF8         	movff	??_ISR+12,tblptru
  9885  001B50  C012  FFF7         	movff	??_ISR+11,tblptrh
  9886  001B54  C011  FFF6         	movff	??_ISR+10,tblptrl
  9887  001B58  C010  FFF4         	movff	??_ISR+9,prodh
  9888  001B5C  C00F  FFF3         	movff	??_ISR+8,prodl
  9889  001B60  C00E  FFDA         	movff	??_ISR+7,fsr2h
  9890  001B64  C00D  FFD9         	movff	??_ISR+6,fsr2l
  9891  001B68  C00C  FFE2         	movff	??_ISR+5,fsr1h
  9892  001B6C  C00B  FFE1         	movff	??_ISR+4,fsr1l
  9893  001B70  C00A  FFEA         	movff	??_ISR+3,fsr0h
  9894  001B74  C009  FFE9         	movff	??_ISR+2,fsr0l
  9895  001B78  C008  FFFB         	movff	??_ISR+1,pclatu
  9896  001B7C  C007  FFFA         	movff	??_ISR,pclath
  9897  001B80  9267               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9898  001B82  0011               	retfie		f
  9899  001B84                     __end_of_ISR:
  9900                           	opt stack 0
  9901                           pclatu	equ	0xFFB
  9902                           pclath	equ	0xFFA
  9903                           tblptru	equ	0xFF8
  9904                           tblptrh	equ	0xFF7
  9905                           tblptrl	equ	0xFF6
  9906                           tablat	equ	0xFF5
  9907                           prodh	equ	0xFF4
  9908                           prodl	equ	0xFF3
  9909                           intcon	equ	0xFF2
  9910                           intcon3	equ	0xFF0
  9911                           postinc0	equ	0xFEE
  9912                           fsr0h	equ	0xFEA
  9913                           fsr0l	equ	0xFE9
  9914                           wreg	equ	0xFE8
  9915                           postdec1	equ	0xFE5
  9916                           fsr1h	equ	0xFE2
  9917                           fsr1l	equ	0xFE1
  9918                           indf2	equ	0xFDF
  9919                           postinc2	equ	0xFDE
  9920                           postdec2	equ	0xFDD
  9921                           fsr2h	equ	0xFDA
  9922                           fsr2l	equ	0xFD9
  9923                           status	equ	0xFD8
  9924                           
  9925 ;; *************** function i2___awmod *****************
  9926 ;; Defined at:
  9927 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  9928 ;; Parameters:    Size  Location     Type
  9929 ;;  dividend        2    0[COMRAM] int 
  9930 ;;  divisor         2    2[COMRAM] int 
  9931 ;; Auto vars:     Size  Location     Type
  9932 ;;  __awmod         1    5[COMRAM] unsigned char 
  9933 ;;  __awmod         1    4[COMRAM] unsigned char 
  9934 ;; Return value:  Size  Location     Type
  9935 ;;                  2    0[COMRAM] int 
  9936 ;; Registers used:
  9937 ;;		wreg, status,2, status,0
  9938 ;; Tracked objects:
  9939 ;;		On entry : 0/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9947 ;;Total ram usage:        6 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; This function calls:
  9950 ;;		Nothing
  9951 ;; This function is called by:
  9952 ;;		_ISR
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           	psect	text46
  9957  00210A                     __ptext46:
  9958                           	opt stack 0
  9959  00210A                     i2___awmod:
  9960                           	opt stack 22
  9961                           
  9962                           ;incstack = 0
  9963  00210A  0E00               	movlw	0
  9964  00210C  6E06               	movwf	i2___awmod@sign,c
  9965  00210E  AE02               	btfss	i2___awmod@dividend+1,7,c
  9966  002110  D006               	goto	i2l660
  9967  002112  6C01               	negf	i2___awmod@dividend,c
  9968  002114  1E02               	comf	i2___awmod@dividend+1,f,c
  9969  002116  B0D8               	btfsc	status,0,c
  9970  002118  2A02               	incf	i2___awmod@dividend+1,f,c
  9971  00211A  0E01               	movlw	1
  9972  00211C  6E06               	movwf	i2___awmod@sign,c
  9973  00211E                     i2l660:
  9974  00211E  AE04               	btfss	i2___awmod@divisor+1,7,c
  9975  002120  D004               	goto	i2l661
  9976  002122  6C03               	negf	i2___awmod@divisor,c
  9977  002124  1E04               	comf	i2___awmod@divisor+1,f,c
  9978  002126  B0D8               	btfsc	status,0,c
  9979  002128  2A04               	incf	i2___awmod@divisor+1,f,c
  9980  00212A                     i2l661:
  9981  00212A  5003               	movf	i2___awmod@divisor,w,c
  9982  00212C  1004               	iorwf	i2___awmod@divisor+1,w,c
  9983  00212E  B4D8               	btfsc	status,2,c
  9984  002130  D018               	goto	i2l668
  9985  002132  0E01               	movlw	1
  9986  002134  6E05               	movwf	i2___awmod@counter,c
  9987  002136  D004               	goto	i2l663
  9988  002138  90D8               	bcf	status,0,c
  9989  00213A  3603               	rlcf	i2___awmod@divisor,f,c
  9990  00213C  3604               	rlcf	i2___awmod@divisor+1,f,c
  9991  00213E  2A05               	incf	i2___awmod@counter,f,c
  9992  002140                     i2l663:
  9993  002140  AE04               	btfss	i2___awmod@divisor+1,7,c
  9994  002142  D7FA               	goto	i2l664
  9995  002144                     i2u445_40:
  9996  002144  5003               	movf	i2___awmod@divisor,w,c
  9997  002146  5C01               	subwf	i2___awmod@dividend,w,c
  9998  002148  5004               	movf	i2___awmod@divisor+1,w,c
  9999  00214A  5802               	subwfb	i2___awmod@dividend+1,w,c
 10000  00214C  A0D8               	btfss	status,0,c
 10001  00214E  D004               	goto	i2l667
 10002  002150  5003               	movf	i2___awmod@divisor,w,c
 10003  002152  5E01               	subwf	i2___awmod@dividend,f,c
 10004  002154  5004               	movf	i2___awmod@divisor+1,w,c
 10005  002156  5A02               	subwfb	i2___awmod@dividend+1,f,c
 10006  002158                     i2l667:
 10007  002158  90D8               	bcf	status,0,c
 10008  00215A  3204               	rrcf	i2___awmod@divisor+1,f,c
 10009  00215C  3203               	rrcf	i2___awmod@divisor,f,c
 10010  00215E  2E05               	decfsz	i2___awmod@counter,f,c
 10011  002160  D7F1               	goto	i2u445_40
 10012  002162                     i2l668:
 10013  002162  5006               	movf	i2___awmod@sign,w,c
 10014  002164  B4D8               	btfsc	status,2,c
 10015  002166  D004               	goto	i2l669
 10016  002168  6C01               	negf	i2___awmod@dividend,c
 10017  00216A  1E02               	comf	i2___awmod@dividend+1,f,c
 10018  00216C  B0D8               	btfsc	status,0,c
 10019  00216E  2A02               	incf	i2___awmod@dividend+1,f,c
 10020  002170                     i2l669:
 10021  002170  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 10022  002174  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 10023  002178  0012               	return	
 10024  00217A                     __end_ofi2___awmod:
 10025                           	opt stack 0
 10026                           pclatu	equ	0xFFB
 10027                           pclath	equ	0xFFA
 10028                           tblptru	equ	0xFF8
 10029                           tblptrh	equ	0xFF7
 10030                           tblptrl	equ	0xFF6
 10031                           tablat	equ	0xFF5
 10032                           prodh	equ	0xFF4
 10033                           prodl	equ	0xFF3
 10034                           intcon	equ	0xFF2
 10035                           intcon3	equ	0xFF0
 10036                           postinc0	equ	0xFEE
 10037                           fsr0h	equ	0xFEA
 10038                           fsr0l	equ	0xFE9
 10039                           wreg	equ	0xFE8
 10040                           postdec1	equ	0xFE5
 10041                           fsr1h	equ	0xFE2
 10042                           fsr1l	equ	0xFE1
 10043                           indf2	equ	0xFDF
 10044                           postinc2	equ	0xFDE
 10045                           postdec2	equ	0xFDD
 10046                           fsr2h	equ	0xFDA
 10047                           fsr2l	equ	0xFD9
 10048                           status	equ	0xFD8
 10049                           
 10050 ;; *************** function _toggle_cooler *****************
 10051 ;; Defined at:
 10052 ;;		line 285 in file "HM1.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;		None
 10055 ;; Auto vars:     Size  Location     Type
 10056 ;;		None
 10057 ;; Return value:  Size  Location     Type
 10058 ;;                  1    wreg      void 
 10059 ;; Registers used:
 10060 ;;		None
 10061 ;; Tracked objects:
 10062 ;;		On entry : 0/0
 10063 ;;		On exit  : 0/0
 10064 ;;		Unchanged: 0/0
 10065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10070 ;;Total ram usage:        0 bytes
 10071 ;; Hardware stack levels used:    1
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_ISR
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           	psect	text47
 10080  00275E                     __ptext47:
 10081                           	opt stack 0
 10082  00275E                     _toggle_cooler:
 10083                           	opt stack 22
 10084                           
 10085                           ;HM1.c: 286: cooler_status = !cooler_status;
 10086                           
 10087                           ;incstack = 0
 10088  00275E  B066               	btfsc	_cooler_status/(0+8),_cooler_status& (0+7),c
 10089  002760  D002               	goto	i2u178_40
 10090  002762  8066               	bsf	_cooler_status/(0+8),_cooler_status& (0+7),c
 10091  002764  D001               	goto	i2u179_45
 10092  002766                     i2u178_40:
 10093  002766  9066               	bcf	_cooler_status/(0+8),_cooler_status& (0+7),c
 10094  002768                     i2u179_45:
 10095                           
 10096                           ;HM1.c: 287: RC2 = cooler_status;
 10097  002768  A066               	btfss	_cooler_status/(0+8),_cooler_status& (0+7),c
 10098  00276A  D002               	goto	i2u180_40
 10099  00276C  8482               	bsf	3970,2,c	;volatile
 10100  00276E  0012               	return	
 10101  002770                     i2u180_40:
 10102  002770  9482               	bcf	3970,2,c	;volatile
 10103  002772  0012               	return		;funcret
 10104  002774                     __end_of_toggle_cooler:
 10105                           	opt stack 0
 10106                           pclatu	equ	0xFFB
 10107                           pclath	equ	0xFFA
 10108                           tblptru	equ	0xFF8
 10109                           tblptrh	equ	0xFF7
 10110                           tblptrl	equ	0xFF6
 10111                           tablat	equ	0xFF5
 10112                           prodh	equ	0xFF4
 10113                           prodl	equ	0xFF3
 10114                           intcon	equ	0xFF2
 10115                           intcon3	equ	0xFF0
 10116                           postinc0	equ	0xFEE
 10117                           fsr0h	equ	0xFEA
 10118                           fsr0l	equ	0xFE9
 10119                           wreg	equ	0xFE8
 10120                           postdec1	equ	0xFE5
 10121                           fsr1h	equ	0xFE2
 10122                           fsr1l	equ	0xFE1
 10123                           indf2	equ	0xFDF
 10124                           postinc2	equ	0xFDE
 10125                           postdec2	equ	0xFDD
 10126                           fsr2h	equ	0xFDA
 10127                           fsr2l	equ	0xFD9
 10128                           status	equ	0xFD8
 10129                           pclatu	equ	0xFFB
 10130                           pclath	equ	0xFFA
 10131                           tblptru	equ	0xFF8
 10132                           tblptrh	equ	0xFF7
 10133                           tblptrl	equ	0xFF6
 10134                           tablat	equ	0xFF5
 10135                           prodh	equ	0xFF4
 10136                           prodl	equ	0xFF3
 10137                           intcon	equ	0xFF2
 10138                           intcon3	equ	0xFF0
 10139                           postinc0	equ	0xFEE
 10140                           fsr0h	equ	0xFEA
 10141                           fsr0l	equ	0xFE9
 10142                           wreg	equ	0xFE8
 10143                           postdec1	equ	0xFE5
 10144                           fsr1h	equ	0xFE2
 10145                           fsr1l	equ	0xFE1
 10146                           indf2	equ	0xFDF
 10147                           postinc2	equ	0xFDE
 10148                           postdec2	equ	0xFDD
 10149                           fsr2h	equ	0xFDA
 10150                           fsr2l	equ	0xFD9
 10151                           status	equ	0xFD8
 10152                           
 10153                           	psect	rparam
 10154  0000                     pclatu	equ	0xFFB
 10155                           pclath	equ	0xFFA
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           intcon3	equ	0xFF0
 10164                           postinc0	equ	0xFEE
 10165                           fsr0h	equ	0xFEA
 10166                           fsr0l	equ	0xFE9
 10167                           wreg	equ	0xFE8
 10168                           postdec1	equ	0xFE5
 10169                           fsr1h	equ	0xFE2
 10170                           fsr1l	equ	0xFE1
 10171                           indf2	equ	0xFDF
 10172                           postinc2	equ	0xFDE
 10173                           postdec2	equ	0xFDD
 10174                           fsr2h	equ	0xFDA
 10175                           fsr2l	equ	0xFD9
 10176                           status	equ	0xFD8
 10177                           
 10178                           	psect	temp
 10179  000067                     btemp:
 10180                           	opt stack 0
 10181  000067                     	ds	1
 10182  0000                     int$flags	set	btemp
 10183  0000                     wtemp6	set	btemp+1
 10184                           pclatu	equ	0xFFB
 10185                           pclath	equ	0xFFA
 10186                           tblptru	equ	0xFF8
 10187                           tblptrh	equ	0xFF7
 10188                           tblptrl	equ	0xFF6
 10189                           tablat	equ	0xFF5
 10190                           prodh	equ	0xFF4
 10191                           prodl	equ	0xFF3
 10192                           intcon	equ	0xFF2
 10193                           intcon3	equ	0xFF0
 10194                           postinc0	equ	0xFEE
 10195                           fsr0h	equ	0xFEA
 10196                           fsr0l	equ	0xFE9
 10197                           wreg	equ	0xFE8
 10198                           postdec1	equ	0xFE5
 10199                           fsr1h	equ	0xFE2
 10200                           fsr1l	equ	0xFE1
 10201                           indf2	equ	0xFDF
 10202                           postinc2	equ	0xFDE
 10203                           postdec2	equ	0xFDD
 10204                           fsr2h	equ	0xFDA
 10205                           fsr2l	equ	0xFD9
 10206                           status	equ	0xFD8


Data Sizes:
    Strings     230
    Constant    118
    Data        4
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     93     102
    BANK0           128     74     109
    BANK1           256     29      29
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_21(CODE[7]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_7(CODE[4]), STR_6(CODE[3]), STR_5(CODE[4]), 
		 -> STR_4(CODE[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_11(CODE[13]), STR_10(CODE[24]), STR_8(CODE[26]), STR_3(CODE[23]), 
		 -> STR_2(CODE[9]), STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> Buffer(BANK0[32]), handle_uart@buffer(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> STR_20(CODE[17]), STR_19(CODE[15]), STR_18(CODE[15]), STR_17(CODE[15]), 
		 -> STR_16(CODE[15]), Buffer(BANK0[32]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 24
		 -> STR_9(CODE[24]), handle_uart@buffer(BANK1[16]), 

    display_lcd$171	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_13(CODE[4]), STR_12(CODE[4]), 

    display_lcd$170	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), 

    handle_uart$143	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), STR_4(CODE[3]), 

    handle_uart$142	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[3]), 


Critical Paths under _main in COMRAM

    _read_adc_voltage->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _lcd_init->_lcd_send_byte
    _wait_for_byte->_read_byte_no_lib
    _send_string_no_lib->_send_byte_no_lib
    _handle_buttons->___awmod
    _sprintf->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->_read_adc_voltage
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _ISR in COMRAM

    _ISR->i2___awmod

Critical Paths under _main in BANK0

    _main->_display_lcd
    _handle_uart->_sprintf
    _display_lcd->_sprintf
    _sprintf->___ftsub
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handle_uart

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  160961
                            ___ftmul
                        _display_lcd
                     _handle_buttons
                        _handle_uart
                    _init_adc_no_lib
                        _init_timer0
                           _lcd_init
                   _read_adc_voltage
                         _setupPorts
                        _setupSerial
                      _toggle_heater
 ---------------------------------------------------------------------------------
 (1) _toggle_heater                                        2     2      0       0
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                     9     6      3   10665
                                             63 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      45
                                             24 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3693
                                             48 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3176
                                             44 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1616
                                             34 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_uart                                         29    29      0   67839
                                              0 BANK1     29    29      0
                  _is_byte_available
                   _read_byte_no_lib
                 _send_string_no_lib
                            _sprintf
                      _wait_for_byte
 ---------------------------------------------------------------------------------
 (2) _wait_for_byte                                        0     0      0      34
                  _is_byte_available
                   _read_byte_no_lib
 ---------------------------------------------------------------------------------
 (3) _read_byte_no_lib                                     1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _is_byte_available                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _send_string_no_lib                                   2     0      2     546
                                             25 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (3) _send_byte_no_lib                                     1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _handle_buttons                                       8     8      0    2814
                                             30 COMRAM     8     8      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _display_lcd                                          4     4      0   71744
                                             70 BANK0      4     4      0
                         _lcd_gotoxy
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             49    36     13   66545
                                             22 BANK0     48    35     13
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                7     4      3   15510
                                             87 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              10     7      3   15231
                                             87 COMRAM     3     0      3
                                              0 BANK0      7     7      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3652
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6281
                                             72 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
                   _read_adc_voltage (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2703
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     634
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     853
                                             24 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    3145
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     952
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     781
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     641
                                              4 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5094
                                             16 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4678
                                             90 COMRAM     3     3      0
                                              7 BANK0      9     3      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2953
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     155
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     738
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    3590
                                             38 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    3013
                                             37 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1    1535
                                             34 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1084
                                             32 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_send_nibble                                      2     2      0      68
                                             30 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (3) _delay_cycles                                         6     6      0      46
                                             24 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             4     2      2     350
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 18    18      0     348
                                              6 COMRAM    18    18      0
                      _toggle_cooler
                          i2___awmod
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _toggle_cooler                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_voltage (ARG)
       ___awtoft
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib
   _display_lcd
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_voltage (ARG)
               ___awtoft
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_voltage (ARG)
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_voltage (ARG)
                 ___awtoft
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _read_adc_raw_no_lib
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_voltage (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_voltage (ARG)
               ___awtoft
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_voltage (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_voltage (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _handle_buttons
     ___awmod
   _handle_uart
     _is_byte_available
     _read_byte_no_lib
     _send_string_no_lib
       _send_byte_no_lib
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_voltage (ARG)
               ___awtoft
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_voltage (ARG)
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_voltage (ARG)
                 ___awtoft
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _read_adc_raw_no_lib
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_voltage (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_voltage (ARG)
               ___awtoft
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_voltage (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_voltage (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _wait_for_byte
       _is_byte_available
       _read_byte_no_lib
   _init_adc_no_lib
   _init_timer0
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _read_adc_voltage
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_raw_no_lib
   _setupPorts
   _setupSerial
   _toggle_heater

 _ISR (ROOT)
   _toggle_cooler
   i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1D      1D       7       11.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     4A      6D       5       85.2%
BITCOMRAM           7E      0       1       0        0.8%
COMRAM              7E     5D      66       1       81.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F0      34        0.0%
DATA                 0      0      F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Oct 24 16:36:59 2024

           ?_read_adc_voltage 0040               ??_wait_for_byte 001A                 _cooler_status 0330  
          ??_read_adc_voltage 0043                  ?_display_lcd 0001                ?_lcd_send_byte 0021  
                ___awdiv@sign 0024           ___wmul@multiplicand 0029                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$XT 000000                  ___ftadd@exp1 008F  
                ___ftadd@exp2 008E                   __CFG_LVP$ON 000000                  ___ftadd@sign 008D  
                 __CFG_WDT$ON 000000                           l120 128C                           l122 12C2  
                         l123 12F2                           l300 235C                           l132 134E  
                         l133 1400                           l125 12FE                           l150 189C  
                         l223 2752                           l119 140E                           l160 192C  
                         l152 18C0                           l240 2330                           l241 2306  
                         l129 1312                           l410 040E                           l402 025E  
                         l170 1950                           l162 191E                           l154 1904  
                         l234 278A                           l226 275A                           l403 0908  
                         l411 044E                           l235 2788                           l260 261C  
                         l412 0514                           l404 02AE                           l164 1926  
                         l156 18F6                           l148 1878                           l261 2616  
                         l421 057A                           l405 02F0                           l325 257C  
                         l254 2676                           l430 0630                           l182 1A52  
                         l158 18FE                           l255 2668                           l415 04BC  
                         l407 0382                           l183 1A28                           l175 19B8  
                         l352 1230                           l360 0F0E                           l440 0754  
                         l408 03E8                           l168 1948                           l281 24FA  
                         l441 073E                           l433 066C                           l425 05EC  
                         l185 1A3C                           l282 24E8                           l290 23F0  
                         l362 0FCE                           l450 08E8                           l434 0656  
                         l426 0606                           l370 004E                           l274 2262  
                         l194 241A                           l283 2514                           l291 23B4  
                         l355 0DCC                           l443 0778                           l179 19CE  
                         l284 24EC                           l356 0CE0                           l452 0944  
                         l444 077C                           l188 1A5E                           l276 228A  
                         l269 2494                           l285 24F0                           l293 23CC  
                         l349 1156                           l461 0A06                           l445 079E  
                         l437 0734                           l429 0646                           l286 24F4  
                         l294 23D8                           l462 0A0E                           l446 08DC  
                         l438 069A                           l382 0264                           l390 01A8  
                         l366 0020                           l295 23E4                           l711 1E7E  
                         l359 0DA0                           l463 0A32                           l447 07EE  
                         l375 008A                           l367 003C                           l800 1F34  
                         l712 1E74                           l464 0A3A                           l456 09A2  
                         l392 01E8                           l801 1F64                           l465 0A82  
                         l449 08FE                           l393 01FE                           l385 0172  
                         l377 0164                           l369 0056                           l714 1EB2  
                         l650 1FD6                           l810 1CFE                           l466 0A62  
                         l458 09C2                           l386 029A                           l378 014C  
                         l299 2386                           l715 1E9C                           l651 1FCE  
                         l811 1D0E                           l475 0B58                           l459 09E4  
                         l395 0218                           l387 0176                           l379 0112  
                         l660 20AE                           l476 0ACA                           l396 0208  
                         l388 019E                           l717 1EDA                           l661 20BA  
                         l813 1D26                           l389 01AC                           l718 1ED0  
                         l742 1480                           l830 1C2A                           l654 1FF6  
                         l814 1D36                           l398 024A                           l751 1510  
                         l831 1C1A                           l655 2000                           l647 1FA8  
                         l663 20D0                           l807 1CA4                           l399 022A  
                         l824 24BA                           l656 200E                           l648 1FB8  
                         l664 20C8                           l681 1748                           l809 1CCC  
                         l818 26BE                           l770 15B4                           l746 14AA  
                         l682 178A                           l691 181C                           l683 17BA  
                         l667 20E8                           l843 2726                           l675 25B4  
                         l756 1506                           l836 1C4E                           l828 1BB2  
                         l692 1810                           l668 20F2                           l765 1544  
                         l757 14FC                           l837 1C42                           l685 17F8  
                         l669 2100                           l766 153A                           l870 203A  
                         l686 17E8                           l790 16C0                           l839 1C6A  
                         l679 172A                           l783 1606                           l775 1D98  
                         l768 1568                           l880 21F2                           l769 1584  
                         l873 207A                           l785 1632                           l777 1DC0  
                         l874 2088                           l890 22BA                           l786 166C  
                         l778 1DFE                           l883 2226                           l891 22AE  
                         l795 16F4                           l787 1694                           l779 1E24  
                         l884 2234                           l796 16E8                           l869 2046  
                         l789 16D0                           l879 21FE                           _GIE 007F97  
                __CFG_CPB$OFF 000000                           _RB3 007C0B                           _RB4 007C0C  
                         _RC2 007C12                           _RB5 007C0D                           _RC5 007C15  
                __CFG_CPD$OFF 000000                           _ISR 0008                           _lcd 000F83  
                ___awmod@sign 001E                           prod 000FF3     read_adc_voltage@raw_value 0047  
                         wreg 000FE8                ?_toggle_heater 0001                   lcd_gotoxy@x 0024  
                 lcd_gotoxy@y 0023                ?_toggle_cooler 0001                          ?_ISR 0001  
                ___ftdiv@cntr 003A                  ___ftdiv@sign 003F                          l4050 1F90  
                        l4710 0208                          l3914 225A                          l4716 022A  
                        l4806 057E                          l3928 2282                          l4922 0948  
                        l4842 0656                          l4834 0630                          l4866 073E  
                        l4786 0496                          l4778 044E                          l4992 0ACA  
                        l4996 0B54                          STR_1 FF8B                          STR_2 FFE4  
                        STR_3 FF63                          STR_4 FFFC                          STR_5 FFF8  
                        STR_6 FFFC                          STR_7 FFF8                          STR_8 FF19  
                        STR_9 FF33                          _LATC 000F8B                          u4000 23A8  
                        _LATD 000F8C                          _LATE 000F8D                          u4007 239E  
                        u2345 2464                          u2346 2466                          u5030 20D4  
                        u4160 25E4                          u5211 1616                          u6020 0986  
                        u4180 25EE                          u5070 274E                          u4175 25E6  
                        u4600 1E66                          u6200 2352                          u5401 1B96  
                        u4195 25F0                          _PEIE 007F96                          u5420 1BD0  
                        u5340 1822                          u6140 0A8A                          u6221 1D80  
                        u4710 1472                          u5270 16FA                          u6150 0AA8  
                        u4390 2278                          u5191 15EA                          u6207 2348  
                        u4640 1EE4                          u5520 2202                          u5425 1BC8  
                        u6241 1DA8                          u4810 1518                          u6170 0B68  
                        u4740 149C                          u5460 1C54                          u6180 0B84  
                        u4901 1CB4                          u6190 2328                          u4671 143E  
                        u4840 154C                          u5800 0496                          u5720 0328  
                        u4681 1452                          u4770 14DA                          u5490 204A  
                        u5900 067A                          u5580 00EC                          u5725 031E  
                        u6197 231E                          u3990 237E                          u6527 25FA  
                        u5840 05BC                          u5760 0420                          u4881 1C8C  
                        u6537 1846                          u4970 1FDA                          u5930 0762  
                        u5770 0460                          u6547 18CE                          u5940 0772  
                        u6557 248C                          u3997 2374                          i2l95 1AFA  
                        u6567 266A                          i2l99 1AF8                          _TMR0 000FD6  
            ?_lcd_send_nibble 0001                          _main 2406                  ___ftpack@arg 0019  
            _send_byte_no_lib 2784                  ___ftpack@exp 001C                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 0067            _handle_buttons$160 0025            _handle_buttons$158 0021  
          _handle_buttons$159 0023                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000                  _sprintf$1290 00A9  
               __CFG_MCLRE$ON 000000                  ___ftmul@cntr 0056                  ___param_bank 000000  
                ___ftmul@sign 0057                         ??_ISR 0007                  ___fttol@exp1 0092  
                ___fttol@lval 008E          __end_of_delay_cycles 2638                         ?_main 0001  
             __end_of___awdiv 2018               __end_of___ftadd 15DA                         STR_10 FF4B  
                       STR_11 FFD7                         STR_12 FFF4                         STR_20 FF7A  
                       STR_13 FFF8                         STR_21 FFED                         STR_14 FFF4  
                       STR_15 FFF8                         STR_16 FFB9                         STR_17 FFC8  
                       STR_18 FF9B                         STR_19 FFAA               __end_of___awmod 210A  
             __end_of___ftdiv 1E56               __end_of___ftneg 26CC               __end_of___lldiv 209A  
             __end_of___ftmul 1D70                         _T0CON 000FD5               ___awdiv@divisor 0021  
             __end_of___llmod 2246               __end_of___ftsub 24E4               __end_of___fttol 1C7C  
                       i2l100 1B0A                         i2l101 1B2E                         i2l102 1B38  
                       i2l660 211E                         i2l661 212A                         i2l663 2140  
                       i2l664 2138                         i2l667 2158                         i2l668 2162  
                       i2l669 2170               ___awdiv@counter 0023                         _RCREG 000FAE  
                       _RCSTA 000FAB                         _SPBRG 000FAF       read_adc_voltage@channel 0046  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                         _TXREG 000FAD  
                       _TXSTA 000FAC                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                  ?_init_timer0 0001                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                  ___lltoft@exp 0029                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                 ___awtoft@sign 0030  
             __end_of_dpowers FECB                         _scale 0B92               __end_of_isdigit 272E  
                       _hours 005F               _init_adc_no_lib 2794                 ___ftpack@sign 001D  
              __pbitbssCOMRAM 0330                         pclath 000FFA                         tablat 000FF5  
                       status 000FD8       read_adc_voltage@voltage 0043                         wtemp6 0068  
             __end_of_sprintf 0B92            __size_ofi2___awmod 0070                __CFG_PBADEN$ON 000000  
             __initialization 2526               _handle_uart$142 0119               _handle_uart$143 011B  
                __end_of_main 245A               ??_lcd_send_byte 0022                        ??_main 005E  
               ___fttol@sign1 008D                 __activetblptr 000003          __size_of__tdiv_to_l_ 0132  
             ??_toggle_heater 0019               ??_toggle_cooler 0001                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0          __size_of_handle_uart 01B4  
            ___llmod@dividend 0026                        ?_scale 0058                        _ADRESH 000FC4  
                      _ADRESL 000FC3              ___awdiv@dividend 001F              __end_of___awtoft 25D8  
            __end_of___ftpack 1F04              __end_of___lltoft 2304                        _INT0IF 007F91  
                      _INT1IF 007F80                        _INT2IF 007F81                        _TMR0IE 007F95  
                      _TMR0IF 007F92                        _SPBRGH 000FB0              __end_of_delay_ms 2684  
                      _Buffer 00CD                __CFG_XINST$OFF 000000              __end_of__powers_ FEF2  
            __end_of_lcd_init 22A8              __end_of_lcd_putc 2406              __end_of_lcd_puts 23B0  
                      ___ftge 1F04                        ___wmul 2638                     ??___awdiv 0023  
                   ??___ftadd 005B                __CFG_STVREN$ON 000000                     ??___awmod 001D  
                   ??___ftdiv 0037                     ??___ftneg 001C                     ??___lldiv 0021  
                   ??___ftmul 004F                     ??___llmod 002E                     ??___ftsub 005E  
                   ??___fttol 0088                        _fround 0FFA                        clear_0 254C  
            ___awdiv@quotient 0025               ___awmod@divisor 001B               ___awmod@counter 001D  
        __size_of_display_lcd 0120         ___ftmul@f3_as_product 0053       __end_of_init_adc_no_lib 27A0  
                __pdataCOMRAM 0062                     ??_isdigit 0019             __end_ofi2___awmod 217A  
                __mediumconst FEA2           send_string_no_lib@p 001A                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8            _send_string_no_lib 2304  
              i2___awmod@sign 0006                  ?_setupSerial 0001                     ??_sprintf 00A3  
                  __accesstop 0080       __end_of__initialization 255C           ?_send_string_no_lib 001A  
                  ___ftadd@f1 0087                    ___ftadd@f2 008A                    ___ftge@ff1 0019  
                  ___ftge@ff2 001C             ?_read_byte_no_lib 0001                 ___rparam_used 000001  
                  ___ftdiv@f1 0031                    ___ftdiv@f2 0034                    ___ftdiv@f3 003B  
                  ___ftneg@f1 0019                    ___awtoft@c 002D            ??_read_byte_no_lib 0019  
                  ___ftmul@f1 0049                    ___ftmul@f2 004C                    ___ftsub@f1 0090  
                  ___ftsub@f2 0093                    ___fttol@f1 0084                __pcstackCOMRAM 0001  
       __size_of_delay_cycles 002E                    ___lltoft@c 0021                 __end_of_scale 0FFA  
        ??_send_string_no_lib 001C      __end_of_send_byte_no_lib 2794                    __div_to_l_ 170C  
   __size_of_read_adc_voltage 0066             lcd_gotoxy@address 0025               __div_to_l_@exp1 0024  
             __div_to_l_@cntr 0023          __size_of_init_timer0 0018                       ??_scale 005B  
             __div_to_l_@quot 001F                  sprintf@width 00C1                    __pbssBANK0 00CA  
 __end_of_read_adc_raw_no_lib 25A0                  _delay_cycles 260A                 __div_to_l_@f1 0019  
               __div_to_l_@f2 001C             read_byte_no_lib@c 0019                lcd_send_byte@n 0021  
                     ?___ftge 0019                       ?___wmul 0027              lcd_send_nibble@n 0020  
       __end_of_wait_for_byte 2784                       ?_fround 0058                     ?___awtoft 002D  
                   ?___ftpack 0019                     ?___lltoft 0021              ?_init_adc_no_lib 0001  
                   ?_delay_ms 0019                    _lcd_gotoxy 24E4       __size_of_handle_buttons 0122  
                   ?_lcd_init 0001                     ?_lcd_putc 0001                     ?_lcd_puts 0027  
           _is_byte_available 2746             __end_of__npowers_ FF19                       __Hparam 0000  
                  _scale$1289 0080                       __Lparam 0000      __size_of_lcd_send_nibble 0022  
          ?_is_byte_available 0001               __size_of___ftge 0090                       ___awdiv 1F94  
                     ___ftadd 142C                       ___awmod 209A                       ___ftdiv 1D70  
                     ___ftneg 26A8                       ___lldiv 2018               __size_of___wmul 0026  
                     ___ftmul 1C7C                       ___llmod 21E0                       ___ftsub 24A2  
                     ___fttol 1B84                       __pcinit 2526                    ??___awtoft 0030  
                  ??___ftpack 001E               __size_of_fround 027E                       __ramtop 1000  
         ??_is_byte_available 0019                    ??___lltoft 0025                       __ptext0 2406  
                     __ptext1 25D8                       __ptext2 2684                       __ptext3 26CC  
                     __ptext4 217A                       __ptext5 2566                       __ptext6 1D70  
                     __ptext7 25A0                       __ptext8 2246                       __ptext9 272E  
                __size_of_ISR 1B7C                   ?__div_to_l_ 0019                       _dpowers FEA3  
                     _isdigit 2710              ___awmod@dividend 0019                       _minutes 0060  
                     _seconds 0061                    ??_delay_ms 001B                       _sprintf 0012  
                  ??_lcd_init 0023                __pintcode_body 1A76                    ??_lcd_putc 0026  
                  ??_lcd_puts 0029          end_of_initialization 255C          __size_of_setupSerial 0024  
   __end_of_is_byte_available 275E                       int_func 1A76          lcd_send_byte@cm_data 0022  
             ___lldiv@divisor 001D               ___lldiv@counter 0025                     _RCSTAbits 000FAB  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                __tdiv_to_l_@f1 0019                __tdiv_to_l_@f2 001C  
       __end_of_lcd_send_byte 24A2              setupSerial@dummy 0019                 ??__tdiv_to_l_ 001F  
           handle_uart@buffer 0102                     _PORTEbits 000F84                    _setupPorts 26CC  
               ??_handle_uart 005E              _read_adc_voltage 217A                   ?_lcd_gotoxy 0023  
       __end_of_toggle_heater 260A         __end_of_toggle_cooler 2774                     i2___awmod 210A  
             _LCD_INIT_STRING 0062                   ___ftdiv@exp 003E                     _TXSTAbits 000FAC  
         __size_of__div_to_l_ 0128                   ___ftmul@exp 0052             send_byte_no_lib@c 0019  
               ??_display_lcd 005E                __end_of___ftge 1F94                __end_of___wmul 265E  
                 _BAUDCONbits 000FB8                 __pidataCOMRAM 27A8                 delay_cycles@n 001C  
               delay_cycles@x 001D             ??_lcd_send_nibble 001F     __size_of_read_byte_no_lib 0008  
              __end_of_fround 1278             ?_send_byte_no_lib 0001           start_initialization 2526  
                 __end_of_ISR 1B84            ??_send_byte_no_lib 0019                _handle_buttons 1834  
         __end_of__tdiv_to_l_ 170C                    ?i2___awmod 0001           __end_of_handle_uart 142C  
  __size_of_is_byte_available 0018               ___llmod@divisor 002A               ___llmod@counter 002E  
                    ??___ftge 001F           __size_of_lcd_gotoxy 0042                      ??___wmul 002B  
read_adc_raw_no_lib@raw_value 001D              __CFG_LPT1OSC$OFF 000000                      ??_fround 005B  
               sprintf@tmpval 00B6   __size_of_send_string_no_lib 0056                   ?_setupPorts 0001  
                  fround@prec 0086             __size_of___awtoft 0038             __size_of___ftpack 00AE  
      __end_of_handle_buttons 1956           __end_of_display_lcd 1A76             __size_of___lltoft 005C  
               ??_init_timer0 0019                   __pbssCOMRAM 005E                 __pcstackBANK0 0080  
               __pcstackBANK1 0100             __size_of_delay_ms 0026             __size_of_lcd_init 0062  
                 sprintf@flag 00BC             __size_of_lcd_putc 0056             __size_of_lcd_puts 0056  
                 sprintf@fval 00BE                   sprintf@prec 00C3             __CFG_CCP2MX$PORTC 000000  
                   __pintcode 0008  __size_of_read_adc_raw_no_lib 003A                 __pmediumconst FEA2  
                    ?___awdiv 001F                      ?___ftadd 0087                     _clockMode 0332  
                    ?___awmod 0019                      ?___ftdiv 0031                      ?___ftneg 0019  
                    ?___lldiv 0019                      ?___ftmul 0049                      ?___llmod 0026  
                    ?___ftsub 0090                     __npowers_ FEF2                      ?___fttol 0084  
                 __tdiv_to_l_ 15DA                handle_uart@cmd 0112                  ??__div_to_l_ 001F  
             ?_handle_buttons 0001                      ?_isdigit 0001                   _handle_uart 1278  
                 ??i2___awmod 0005                      ?_sprintf 0096                __size_of_scale 0468  
    __size_of_init_adc_no_lib 000C           __end_of_init_timer0 2746        __size_of_wait_for_byte 0010  
              ___wmul@product 002B                     delay_ms@n 0019                     delay_ms@x 001B  
         __size_of_setupPorts 0022                      i2u180_40 2770                      _PIR1bits 000F9E  
          __end_of__div_to_l_ 1834                      i2u178_40 2766                      i2u179_45 2768  
    __end_of_read_adc_voltage 21E0                      i2u445_40 2144                      i2u454_40 1B06  
                    i2u455_45 1B08              __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 001F  
                 _display_lcd 1956              _read_byte_no_lib 27A0                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0027                     lcd_init@i 0023                     lcd_putc@c 0026  
                   lcd_puts@s 0027                  ??_lcd_gotoxy 0024                 ??_setupSerial 0019  
                   copy_data0 253A            i2___awmod@dividend 0001               _lcd_send_nibble 26EE  
                    __Hrparam 0000                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
          __end_of_lcd_gotoxy 2526              __size_of___awdiv 0084              __size_of___ftadd 01AE  
            __size_of___awmod 0070              __size_of___ftdiv 00E6              __size_of___ftneg 0024  
            __size_of___lldiv 0082              __size_of___ftmul 00F4              __size_of___llmod 0066  
            __size_of___ftsub 0042              __size_of___fttol 00F8                 _wait_for_byte 2774  
                    ___awtoft 25A0                      ___ftpack 1E56                   _fround$1287 0083  
                 _fround$1288 0080                      ___lltoft 22A8                   _isdigit$923 001A  
                  sprintf@len 00B0                    sprintf@exp 00BA                    sprintf@val 00B2  
                 _init_timer0 272E              __size_of_isdigit 001E                      _delay_ms 265E  
                    __ptext10 2794                      __ptext11 1278                      __ptext20 0B92  
                    __ptext12 2774                      __ptext21 2710                      __ptext13 27A0  
                    __ptext30 21E0                      __ptext22 0FFA                      __ptext14 2746  
                    __ptext31 2018                      __ptext23 2638                      __ptext15 2304  
                    __ptext40 24E4                      __ptext32 1B84                      __ptext24 1C7C  
                    __ptext16 2784                      __ptext41 245A                      __ptext33 24A2  
                    __ptext25 209A                      __ptext17 1834                      __ptext42 26EE  
                    __ptext34 142C                      __ptext26 1F94                      __ptext18 1956  
                    __ptext43 260A                      __ptext35 1E56                      __ptext27 15DA  
                    __ptext19 0012                      __ptext44 265E                      __ptext36 26A8  
                    __ptext28 170C                      __ptext37 1F04                      __ptext29 22A8  
                    __ptext46 210A                      __ptext38 235A                      __ptext47 275E  
                    __ptext39 23B0                 _heater_status 0331                      __powers_ FECB  
                    _lcd_init 2246                 handle_uart@c1 0100                 handle_uart@c2 0101  
               handle_uart@h1 0113                 handle_uart@h2 0114                 handle_uart@m1 0115  
               handle_uart@m2 0116                 handle_uart@s1 0117                 handle_uart@s2 0118  
                    _lcd_putc 23B0                      _lcd_puts 235A              __size_of_sprintf 0B80  
      __size_of_lcd_send_byte 0048                 ?_delay_cycles 0001                 __size_of_main 0054  
   __size_of_send_byte_no_lib 0010           __end_of_setupSerial 26A8             ??_init_adc_no_lib 0019  
                    int$flags 0067        __size_of_toggle_heater 0032        __size_of_toggle_cooler 0016  
              ?_wait_for_byte 0001                  ??_setupPorts 0019             i2___awmod@divisor 0003  
           i2___awmod@counter 0005                      isdigit@c 001B           _read_adc_raw_no_lib 2566  
                    scale@scl 0083               _display_lcd$170 00C6               _display_lcd$171 00C8  
                    intlevel2 0000                     sprintf@ap 00AE                     sprintf@cp 00AC  
     __end_of_lcd_send_nibble 2710              __tdiv_to_l_@exp1 0027              __tdiv_to_l_@cntr 0026  
                   sprintf@sp 0096                ??_delay_cycles 0019              __tdiv_to_l_@quot 0022  
            ___lldiv@dividend 0019            __end_of_setupPorts 26EE          ?_read_adc_raw_no_lib 0019  
  __end_of_send_string_no_lib 235A              ??_handle_buttons 001F                 _lcd_send_byte 245A  
                ?__tdiv_to_l_ 0019                   _temperature 00CA                      sprintf@c 00C5  
                    sprintf@f 0098              ___lldiv@quotient 0021                  ?_handle_uart 0001  
               _toggle_heater 25D8                   _setupSelect 005E                   _setupSerial 2684  
               _toggle_cooler 275E      __end_of_read_byte_no_lib 27A8         ??_read_adc_raw_no_lib 001B  
